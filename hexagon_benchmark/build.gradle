
apply from: "../gradle/kotlin.gradle"
apply from: "../gradle/service.gradle"

apply plugin: 'war'
apply plugin: 'me.champeau.gradle.jmh'
apply plugin: 'com.fizzed.rocker'

mainClassName = "com.hexagonkt.BenchmarkKt"

/*
 * Check: https://www.infoq.com/articles/G1-One-Garbage-Collector-To-Rule-Them-All
 */
applicationDefaultJvmArgs = [
    '-Xms2G',
    '-Xmx2G',
    '-XX:+UseNUMA',
    '-XX:+UseParallelGC',
//    '-XX:+UseG1GC',
//    '-XX:+UseStringDeduplicationJVM',
    '-XX:+AggressiveOpts'
]

ext.hikariVersion = '2.6.2'
ext.postgresqlVersion = '42.0.0'

ext.tfbBuildDir = project.buildDir.absolutePath + '/tfb'
ext.databases = [ 'MongoDB', 'PostgreSQL' ]
ext.servers = [ 'Jetty', 'Undertow' ]
ext.tests = [servers, databases].combinations ()

war {
    archiveName = "ROOT.war"
}

installDist.dependsOn 'war'

dependencies {
    compile project(':port_store')
    compile project(':server_jetty')
    compile project(':server_undertow')
    compile project(':templates_pebble')
    compile project(':templates_rocker')

    compile ("ch.qos.logback:logback-classic:$logbackVersion") { exclude module: 'slf4j-api' }
    compile ("com.zaxxer:HikariCP:$hikariVersion")
    compile ("org.postgresql:postgresql:$postgresqlVersion")

    testCompile project(':port_client')
    testCompile ("org.testng:testng:$testngVersion")

    jmh ("org.openjdk.jmh:jmh-core:$jmhBenchmarkVersion")
    jmh ("org.openjdk.jmh:jmh-generator-annprocess:$jmhBenchmarkVersion")
}

sourceSets {
    main {
        rocker {
            srcDir('src/main/resources')
        }
    }
}

test {
    useTestNG {}
}

jmh {
    iterations = 5
    benchmarkMode = [ 'all' ]
    batchSize = 1
    fork = 1
    operationsPerInvocation = 5
    timeOnIteration = '1s'
    warmup = '1s'
    warmupBatchSize = 5
    warmupIterations = 1

    jmhVersion = jmhBenchmarkVersion
}

//noinspection GroovyAssignabilityCheck
task tfb(dependsOn: [ 'benchmarkCode', 'benchmarkConfig', 'setupScripts' ])

//noinspection GroovyAssignabilityCheck
task copyTfb(type: Copy) {
    from projectDir
    include 'src/**', 'tfb.gradle', 'readme.md'
    exclude 'src/jmh'
    into tfbBuildDir
    rename 'tfb.gradle', 'build.gradle'
}

//noinspection GroovyAssignabilityCheck
task gradleSettings(type: WriteProperties) {
    Map<String, ?> settings = [
        description : 'Hexagon web framework\'s benchmark',

        gradleScripts :
            "https://raw.githubusercontent.com/hexagonkt/hexagon/$rootProject.version/gradle",

        hexagonVersion : rootProject.version,
        kotlinVersion : kotlinVersion,
        logbackVersion : logbackVersion,

        hikariVersion : hikariVersion,
        postgresqlVersion : postgresqlVersion,

        testngVersion : testngVersion
    ]

    properties settings
    outputFile = "$tfbBuildDir/gradle.properties"
}

import groovy.json.JsonOutput

//noinspection GroovyAssignabilityCheck
task benchmarkConfig() {
    doLast {
        Map<String, Map<String, Object>> test = [:]
        tests.forEach {
            String server = it[0]
            String database = it[1]
            String databaseEngine = database.toLowerCase()
            String name = server == servers.first () && database == databases.first ()?
                'default' : server + '_' + database
            int port = server == 'Resin'? 8080 : 9090
            test[name.toLowerCase()] = [
                json_url : '/json',
                db_url : "/$databaseEngine/db",
                query_url : "/$databaseEngine/query?queries=",
                fortune_url : "/$databaseEngine/pebble/fortunes",
                update_url : "/$databaseEngine/update?queries=",
                plaintext_url : '/plaintext',

                port : port,

                approach : 'Realistic',
                classification : 'Micro',
                database : database == 'PostgreSQL'? 'postgres' : databaseEngine,
                framework : 'Hexagon',
                language : 'Kotlin',
                orm : 'Raw',
                platform : 'Servlet',
                webserver : 'None',
                os : 'Linux',
                database_os : 'Linux',
                display_name : "Hexagon $server $database",
                notes : 'http://hexagonkt.com',

                setup_file : "setup_${server.toLowerCase ()}_$databaseEngine",
                versus : 'servlet'
            ]
        }

        Map<String, ?> config = [
            framework : 'hexagon',
            tests : [ test ]
        ]

        String json = JsonOutput.toJson(config)
        File file = file("$tfbBuildDir/benchmark_config.json")
        file.createNewFile()
        file.text = JsonOutput.prettyPrint(json)
    }
}

//noinspection GroovyAssignabilityCheck
task setupScripts() {
    doLast {
        tests.forEach {
            String server = ((String)it[0]).toLowerCase()
            String database = ((String)it[1]).toLowerCase()
            File file = file("$tfbBuildDir/setup_${server}_${database}.sh")
            file.createNewFile()
            String command = server == "resin"?
                """
                rm -rf \$RESIN_HOME/webapps/*
                cp build/libs/ROOT.war \$RESIN_HOME/webapps
                resinctl start
                """:
                'nohup build/install/hexagon/bin/hexagon &'
            file.text = """
                #!/bin/bash

                fw_depends java $database

                ./gradlew -x test
                export WEBENGINE='$server'
                $command
            """.stripIndent ()
        }
    }
}

//noinspection GroovyAssignabilityCheck
task benchmarkCode(dependsOn: [ 'copyTfb', 'gradleSettings' ]) {
    doLast {
        List<String> extensions = [ 'kt', 'html', 'properties', 'xml', 'yaml', 'yml', 'gradle' ]
        String sources = fileTree (dir: tfbBuildDir, includes: extensions.collect { "**/*.$it" })
            .filter { it.file }
            .collect { './hexagon' + it.path.substring (tfbBuildDir.length()) }
            .sort ()
            .join ("\n")

        File file = file("$tfbBuildDir/source_code")
        file.createNewFile()
        file.text = sources
    }
}
