{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Hexagon Toolkit provides several libraries to build server applications. These libraries provide single standalone features 1 and are referred to as \"Ports\" . The main ports are: The HTTP server : supports HTTPS, HTTP/2, mutual TLS, static files (serve and upload), forms processing, cookies, sessions, CORS and more. The HTTP client : which supports mutual TLS, HTTP/2 and cookies among other features. Each of these features or ports may have different implementations called \"Adapters\" . Hexagon is designed to fit in applications that conform to the Hexagonal Architecture (also called Clean Architecture or Ports and Adapters Architecture ). Its design principles also fit into this architecture. Hello World \u00b6 Simple Hello World HTTP example. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 package com.hexagonkt.http.server.jetty import com.hexagonkt.http.server.Server lateinit var server : Server /** * Start a Hello World server, serving at path \"/hello\". */ fun main () { server = serve { get ( \"/hello\" ) { ok ( \"Hello World!\" ) } } } You can check the code examples and demo projects for more complex use cases. Features \u00b6 Hexagon's goals and design principles: Put you in Charge : There is no code generation, no runtime annotation processing, no classpath based logic, and no implicit behaviour. You control your tools, not the other way around. Modular : Each feature (Port) or adapter is isolated in its own module. Use only the modules you need without carrying unneeded dependencies. Pluggable Adapters : Every Port may have many implementations (Adapters) using different technologies. You can swap adapters without changing the application code. Batteries Included : It contains all the required pieces to make production-grade applications: settings management, serialization, dependency injection 2 and build helpers. Kotlin First : Take full advantage of Kotlin instead of just calling Java code from Kotlin. The library is coded in Kotlin for coding with Kotlin. No strings attached to Java (as a Language). Properly Tested : The project's coverage is checked in every Pull Request. It is also stress-tested at TechEmpower Frameworks Benchmark . Architecture \u00b6 How Hexagon fits in your architecture in a picture. Note Using this toolkit won't make your application compliant with Hexagonal Architecture (by its nature, no tool can do that), you have to provide a layer of abstraction by yourself. Ports \u00b6 Ports with their provided implementations (Adapters). PORT ADAPTERS HTTP Server Jetty , Servlet HTTP Client AHC Messaging RabbitMQ Store MongoDB Templates Pebble , FreeMarker Serialization Formats JSON , YAML Settings Environment , URLs , System Properties Except the Core module that contains a set of utilities like serialization and dependency injection. However, some of these capacities can be replaced by other third party libraries. \u21a9 However, you can replace the core DI implementation with any other library. \u21a9","title":"Home"},{"location":"#hello-world","text":"Simple Hello World HTTP example. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 package com.hexagonkt.http.server.jetty import com.hexagonkt.http.server.Server lateinit var server : Server /** * Start a Hello World server, serving at path \"/hello\". */ fun main () { server = serve { get ( \"/hello\" ) { ok ( \"Hello World!\" ) } } } You can check the code examples and demo projects for more complex use cases.","title":"Hello World"},{"location":"#features","text":"Hexagon's goals and design principles: Put you in Charge : There is no code generation, no runtime annotation processing, no classpath based logic, and no implicit behaviour. You control your tools, not the other way around. Modular : Each feature (Port) or adapter is isolated in its own module. Use only the modules you need without carrying unneeded dependencies. Pluggable Adapters : Every Port may have many implementations (Adapters) using different technologies. You can swap adapters without changing the application code. Batteries Included : It contains all the required pieces to make production-grade applications: settings management, serialization, dependency injection 2 and build helpers. Kotlin First : Take full advantage of Kotlin instead of just calling Java code from Kotlin. The library is coded in Kotlin for coding with Kotlin. No strings attached to Java (as a Language). Properly Tested : The project's coverage is checked in every Pull Request. It is also stress-tested at TechEmpower Frameworks Benchmark .","title":"Features"},{"location":"#architecture","text":"How Hexagon fits in your architecture in a picture. Note Using this toolkit won't make your application compliant with Hexagonal Architecture (by its nature, no tool can do that), you have to provide a layer of abstraction by yourself.","title":"Architecture"},{"location":"#ports","text":"Ports with their provided implementations (Adapters). PORT ADAPTERS HTTP Server Jetty , Servlet HTTP Client AHC Messaging RabbitMQ Store MongoDB Templates Pebble , FreeMarker Serialization Formats JSON , YAML Settings Environment , URLs , System Properties Except the Core module that contains a set of utilities like serialization and dependency injection. However, some of these capacities can be replaced by other third party libraries. \u21a9 However, you can replace the core DI implementation with any other library. \u21a9","title":"Ports"},{"location":"api/","text":"Modules \u00b6 Core Scheduler Web Ports and Adapters \u00b6 HTTP Server Jetty Servlet HTTP Client Async HTTP Client Store MongoDB Messaging RabbitMQ Templates Pebble FreeMarker","title":"API"},{"location":"api/#modules","text":"Core Scheduler Web","title":"Modules"},{"location":"api/#ports-and-adapters","text":"HTTP Server Jetty Servlet HTTP Client Async HTTP Client Store MongoDB Messaging RabbitMQ Templates Pebble FreeMarker","title":"Ports and Adapters"},{"location":"developer_guide/","text":"Concepts \u00b6 Port \u00b6 It is an interface for a task. The toolkit ports are designed to work on their own. For example: you can use the http_server module without importing the templates one, and the other way around (taking only the dependencies you need for your application). Adapter \u00b6 They are implementations of a functionality (Port) for a given product/technology. Clients should only use ports' code (not Adapters specific code), this makes it easy to switch among different adapters with minimum impact. Adapters are independent of each other, but you can use several adapters for the same port in a single application. Manager \u00b6 Singleton object to manage a cross toolkit aspect. I.e.: Serialization, Injection or Settings. Toolkit Structure \u00b6 The project is composed of modules, each module provides a single functionality. There are three kinds of modules: The ones that provide functionality that does not depend on different implementations, like hexagon_scheduler or hexagon_core . Their name always starts with the hexagon_ prefix. These modules can depend on several Ports, but never on Adapters (see below). Modules that define a \"Port\": these are interfaces to a feature that may have different implementations (ie: port_http_server or port_store ). They cannot be used by themselves and in their place, an adapter implementing them should be added to the list of dependencies. These modules' names start with the port_ prefix. Ports are independent of each other. Adapter modules, which are Port implementations for a given tool, store_mongodb , and messaging_rabbitmq are examples of this type of module. Adapter names must start with their port name. Hexagon Core \u00b6 The Hexagon Core module is used by all other libraries, so it would be added to your project anyway just by using any adapter. Core utilities like, logging, serialization, and dependency injection. Toolkit's ports are designed to use core functionalities. You can use a third party DI library instead of using the Core one. It depends on Logback and Jackson. The main features are the following: Helpers : JVM information, a logger and other useful utilities. Dependency Injection : bind classes to creation closures or instances and inject them. Objects Serialization : parse/serialize data in different formats to class instances. Other Modules \u00b6 The following libraries provide extra features not bound to different implementations. They will not use dependencies outside the Hexagon toolkit. Settings : load settings from different data sources and formats. These properties are made available to other components through the SettingsManager . Scheduling : this module allows services to execute tasks periodically using Cron expressions. However, you have to be careful to not run tasks twice if you have many instances. Web : this module is meant to ease web application development. Provides helpers for generating HTML and depends on the HTTP Server and Templates ports. Toolkit Ports \u00b6 These modules define features that need a specific implementation. You can use many implementations of each port at the same time. You can even provide a custom implementation if you want to optimize a particular use case. These are the implemented ports: HTTP Server : describes how to use HTTP routing and HTML templates for Web services. HTTP Client : documentation to use the HTTP client module to connect to other services. Storage : gives an overview of how to store data using different data stores. Messaging : how to support asynchronous communication with messages through message brokers. Templates : describes how to render pages using template engines.","title":"Developer Guide"},{"location":"developer_guide/#concepts","text":"","title":"Concepts"},{"location":"developer_guide/#port","text":"It is an interface for a task. The toolkit ports are designed to work on their own. For example: you can use the http_server module without importing the templates one, and the other way around (taking only the dependencies you need for your application).","title":"Port"},{"location":"developer_guide/#adapter","text":"They are implementations of a functionality (Port) for a given product/technology. Clients should only use ports' code (not Adapters specific code), this makes it easy to switch among different adapters with minimum impact. Adapters are independent of each other, but you can use several adapters for the same port in a single application.","title":"Adapter"},{"location":"developer_guide/#manager","text":"Singleton object to manage a cross toolkit aspect. I.e.: Serialization, Injection or Settings.","title":"Manager"},{"location":"developer_guide/#toolkit-structure","text":"The project is composed of modules, each module provides a single functionality. There are three kinds of modules: The ones that provide functionality that does not depend on different implementations, like hexagon_scheduler or hexagon_core . Their name always starts with the hexagon_ prefix. These modules can depend on several Ports, but never on Adapters (see below). Modules that define a \"Port\": these are interfaces to a feature that may have different implementations (ie: port_http_server or port_store ). They cannot be used by themselves and in their place, an adapter implementing them should be added to the list of dependencies. These modules' names start with the port_ prefix. Ports are independent of each other. Adapter modules, which are Port implementations for a given tool, store_mongodb , and messaging_rabbitmq are examples of this type of module. Adapter names must start with their port name.","title":"Toolkit Structure"},{"location":"developer_guide/#hexagon-core","text":"The Hexagon Core module is used by all other libraries, so it would be added to your project anyway just by using any adapter. Core utilities like, logging, serialization, and dependency injection. Toolkit's ports are designed to use core functionalities. You can use a third party DI library instead of using the Core one. It depends on Logback and Jackson. The main features are the following: Helpers : JVM information, a logger and other useful utilities. Dependency Injection : bind classes to creation closures or instances and inject them. Objects Serialization : parse/serialize data in different formats to class instances.","title":"Hexagon Core"},{"location":"developer_guide/#other-modules","text":"The following libraries provide extra features not bound to different implementations. They will not use dependencies outside the Hexagon toolkit. Settings : load settings from different data sources and formats. These properties are made available to other components through the SettingsManager . Scheduling : this module allows services to execute tasks periodically using Cron expressions. However, you have to be careful to not run tasks twice if you have many instances. Web : this module is meant to ease web application development. Provides helpers for generating HTML and depends on the HTTP Server and Templates ports.","title":"Other Modules"},{"location":"developer_guide/#toolkit-ports","text":"These modules define features that need a specific implementation. You can use many implementations of each port at the same time. You can even provide a custom implementation if you want to optimize a particular use case. These are the implemented ports: HTTP Server : describes how to use HTTP routing and HTML templates for Web services. HTTP Client : documentation to use the HTTP client module to connect to other services. Storage : gives an overview of how to store data using different data stores. Messaging : how to support asynchronous communication with messages through message brokers. Templates : describes how to render pages using template engines.","title":"Toolkit Ports"},{"location":"gradle/","text":"Build Variables \u00b6 The build process and imported build scripts (like the ones documented here) use variables to customize their behavior. It is possible to add/change variables of a build from the following places: In the project's gradle.properties file. In your user's gradle configuration: ~/.gradle/gradle.properties . Passing them from the command line with the following switch: -Pkey=val . Defining a project's extra property inside build.gradle . Ie: project.ext.key='val' . For examples and reference, check build.gradle and gradle.properties . Helper scripts \u00b6 These scripts can be added to your build to include a whole new capability to your building logic. To use them, you can import the online versions, or copy them to your gradle directory before importing the script. You can import these scripts by adding add apply from: $gradleScripts/$script.gradle to your build.gradle file some of them may require additional plugins inside the plugins section in the root build.gradle . Check toolkit build.gradle files for examples. Publish \u00b6 This script set up the project/module for publishing in Maven Central . It publishes all artifacts attached to the mavenJava publication (check kotlin.gradle publishing section) at the bare minimum binaries are published. For an Open Source project, you must include sources and javadoc. To use it, apply $gradleScripts/publish.gradle . To set up this script's parameters, check the build variables section . These helper settings are: bintrayKey (REQUIRED): if not defined will try to load BINTRAY_KEY environment variable. bintrayUser (REQUIRED): or BINTRAY_USER environment variable if not defined. license (REQUIRED): the license used in published POMs. vcsUrl (REQUIRED): code repository location. Dokka \u00b6 This script set up Dokka tool and add a JAR with the project's code documentation to the published JARs. It adds the following extra task: dokkaJar: create a jar file with the source code documentation in Javadoc format. All modules' Markdown files are added to the documentation and test classes ending in SamplesTest are available to be referenced as samples. To use it, apply $gradleScripts/dokka.gradle and add the id 'org.jetbrains.dokka' version 'VERSION' plugin to the root build.gradle . The format for the generated documentation will be javadoc to make it compatible with current IDEs. Icons \u00b6 Create web icons (favicon and thumbnails for browsers/mobile) from image SVGs (logos). For image rendering you will need rsvg (librsvg2-bin) and imagemagick installed in the development machine. To use it, apply $gradleScripts/icons.gradle to your build.gradle . To set up this script's parameters, check the build variables section . These helper settings are: logo (REQUIRED): SVG file used to render the logos. Used for the favicon. logoLarge: SVG file used to render the large logo. If not supplied 'logo' will be used. logoWide: SVG file used to render the wide logo. Used for MS Windows tiles. If not provided 'logoLarge' will be used. Kotlin \u00b6 Adds Kotlin's Gradle plugin. Uses JUnit 5 as the test framework. It also includes MockK in the test classpath. It sets up: Java version Repositories Kotlin dependencies Resource processing (replacing build variables) Cleaning (deleting runtime files as logs and dump files) Tests run, handles properties, output, and mocks (test's output depends on Gradle logging level) Set up coverage report IDE settings for IntelliJ and Eclipse (download dependencies' sources and API documentation) Published artifacts (binaries and sources): sourcesJar task To use it, apply $gradleScripts/kotlin.gradle and add the id 'org.jetbrains.kotlin.jvm' version 'VERSION' plugin to the root build.gradle . To set up this script's parameters, check the build variables section . These helper settings are: kotlinVersion: Kotlin version. Defaults to the version used in the matching Hexagon release. mockkVersion: MockK mocking library version. If no value is supplied, Hexagon's version is taken. junitVersion: JUnit version (5+), the default value is the toolkit version. basePackage: Module's base package (used by the Jacoco Report when using Kotlin Coding Standard) Application \u00b6 Gradle's script for a service or application. It adds these extra tasks: buildInfo: add configuration file ( META-INF/build.properties ) with build variables to the package. It is executed automatically before compiling classes. watch: run the application in another thread. Allows the possibility to watch source changes. To run the application and watch for changes you need to execute this task with the --continuous ( -t ) Gradle flag. Ie: gw -t watch . jarAll: creates a single JAR with all dependencies, and the application main class set up. This task is an alternative to the Gradle installDist task. To use it, apply $gradleScripts/application.gradle to your build.gradle . To set up this script you need to add the main class name to your build.gradle file with the following code: 1 2 3 application { mainClass . set ( \"com.example.ApplicationKt\" ) } Certificates \u00b6 Creates the required key stores for development purposes. IMPORTANT these key stores must not be used for production environments. The created key stores are: ca.p12 : self-signed certificate authority (CA). This store holds the CA private key. The store must be private and will be used to sign other certificates. The key pair alias is ca . trust.p12 : key store with CA's public certificate. It can be set as the Java process trust store which makes every certificate signed with the CA trusted. However, if used as the trust store, the JDK cacerts entries won't be loaded and thus, not trusted. It can be used to set up HTTPS clients (not required to be set at JVM level). <domain>.p12 : there would be one per each domain (see sslDomain variable). These stores are signed by the CA, and they contain the service private key and its full chain certificate. <domain> will be the domain name without the TLD, and the Subject alternative names (SAN) will include <domain>.test ( TLD for local environments ) and localhost (along the extra subdomains specified). The defined tasks are: createCa: creates ca.p12 and import its public certificate inside trust.p12 . createIdentities: creates the <domain>.p12 store for all sslDomain variables. To use it, apply $gradleScripts/certificates.gradle to your build.gradle . To set up this script's parameters, check the build variables section . These helper settings are: sslDomain[1-9] (REQUIRED): the main domain for the identity store. You can create up to ten (from sslDomain to sslDomain9 ). Each of these variables has the format subdomain1|subdomain2|subdomainN|domain.tld subdomains are added to <domain>.p12 alternative names (aside of <domain>.test and localhost which are always added). By default, no extra domains are added to the key store. sslOrganization (REQUIRED): organization stated in created certificates. sslCaFile: certificate authority key store file. By default: \"ca.p12\". sslCaAlias: CA alias in the key store. If not provided, it will be \"ca\". sslTrustFile: trust store file name, by default it is \"trust.p12\". sslPath: path used to generate the key stores. By default, it will be the project's build directory. sslPassword: password used for the generated key stores. By default, it is the file name reversed. sslValidity: validity period (in days) for certificates. If not provided, it will be 365. sslCountry: country used in the certificates. By default, it is the current locale's country code. Lean \u00b6 This script changes the default Gradle source layout to be less bulky. To use it you must apply the $gradleScripts/lean.gradle script to your build.gradle file. It must be applied after the Kotlin plugin. After applying this script, the source folders will be ${projectDir}/main and ${projectDir}/test , and the resources will be stored also in these folders. Detekt \u00b6 This script sets up the build to analyze the code with the Detekt static code analyzer. To use it you must apply the $gradleScripts/detekt.gradle script to your build.gradle file. It must be applied after the Kotlin plugin. For the script to work you need to add the plugin to the plugins build section before importing the script. I.e.: 1 2 3 plugins { id ( \"io.gitlab.arturbosch.detekt\" ) version \"VERSION\" apply false } To set up this script's parameters, check the build variables section . These helper settings are: detektConfigPath: file with Detekt rules and settings. If not set, the default Detekt setup will be used. Docker \u00b6 This script adds helper tasks for dealing with Docker inside a project. To use it you must apply the $gradleScripts/docker.gradle script to your build.gradle file. This script provides the following tasks: cleanDocker : deletes unused containers, images, and volumes.","title":"Gradle Helpers"},{"location":"gradle/#build-variables","text":"The build process and imported build scripts (like the ones documented here) use variables to customize their behavior. It is possible to add/change variables of a build from the following places: In the project's gradle.properties file. In your user's gradle configuration: ~/.gradle/gradle.properties . Passing them from the command line with the following switch: -Pkey=val . Defining a project's extra property inside build.gradle . Ie: project.ext.key='val' . For examples and reference, check build.gradle and gradle.properties .","title":"Build Variables"},{"location":"gradle/#helper-scripts","text":"These scripts can be added to your build to include a whole new capability to your building logic. To use them, you can import the online versions, or copy them to your gradle directory before importing the script. You can import these scripts by adding add apply from: $gradleScripts/$script.gradle to your build.gradle file some of them may require additional plugins inside the plugins section in the root build.gradle . Check toolkit build.gradle files for examples.","title":"Helper scripts"},{"location":"gradle/#publish","text":"This script set up the project/module for publishing in Maven Central . It publishes all artifacts attached to the mavenJava publication (check kotlin.gradle publishing section) at the bare minimum binaries are published. For an Open Source project, you must include sources and javadoc. To use it, apply $gradleScripts/publish.gradle . To set up this script's parameters, check the build variables section . These helper settings are: bintrayKey (REQUIRED): if not defined will try to load BINTRAY_KEY environment variable. bintrayUser (REQUIRED): or BINTRAY_USER environment variable if not defined. license (REQUIRED): the license used in published POMs. vcsUrl (REQUIRED): code repository location.","title":"Publish"},{"location":"gradle/#dokka","text":"This script set up Dokka tool and add a JAR with the project's code documentation to the published JARs. It adds the following extra task: dokkaJar: create a jar file with the source code documentation in Javadoc format. All modules' Markdown files are added to the documentation and test classes ending in SamplesTest are available to be referenced as samples. To use it, apply $gradleScripts/dokka.gradle and add the id 'org.jetbrains.dokka' version 'VERSION' plugin to the root build.gradle . The format for the generated documentation will be javadoc to make it compatible with current IDEs.","title":"Dokka"},{"location":"gradle/#icons","text":"Create web icons (favicon and thumbnails for browsers/mobile) from image SVGs (logos). For image rendering you will need rsvg (librsvg2-bin) and imagemagick installed in the development machine. To use it, apply $gradleScripts/icons.gradle to your build.gradle . To set up this script's parameters, check the build variables section . These helper settings are: logo (REQUIRED): SVG file used to render the logos. Used for the favicon. logoLarge: SVG file used to render the large logo. If not supplied 'logo' will be used. logoWide: SVG file used to render the wide logo. Used for MS Windows tiles. If not provided 'logoLarge' will be used.","title":"Icons"},{"location":"gradle/#kotlin","text":"Adds Kotlin's Gradle plugin. Uses JUnit 5 as the test framework. It also includes MockK in the test classpath. It sets up: Java version Repositories Kotlin dependencies Resource processing (replacing build variables) Cleaning (deleting runtime files as logs and dump files) Tests run, handles properties, output, and mocks (test's output depends on Gradle logging level) Set up coverage report IDE settings for IntelliJ and Eclipse (download dependencies' sources and API documentation) Published artifacts (binaries and sources): sourcesJar task To use it, apply $gradleScripts/kotlin.gradle and add the id 'org.jetbrains.kotlin.jvm' version 'VERSION' plugin to the root build.gradle . To set up this script's parameters, check the build variables section . These helper settings are: kotlinVersion: Kotlin version. Defaults to the version used in the matching Hexagon release. mockkVersion: MockK mocking library version. If no value is supplied, Hexagon's version is taken. junitVersion: JUnit version (5+), the default value is the toolkit version. basePackage: Module's base package (used by the Jacoco Report when using Kotlin Coding Standard)","title":"Kotlin"},{"location":"gradle/#application","text":"Gradle's script for a service or application. It adds these extra tasks: buildInfo: add configuration file ( META-INF/build.properties ) with build variables to the package. It is executed automatically before compiling classes. watch: run the application in another thread. Allows the possibility to watch source changes. To run the application and watch for changes you need to execute this task with the --continuous ( -t ) Gradle flag. Ie: gw -t watch . jarAll: creates a single JAR with all dependencies, and the application main class set up. This task is an alternative to the Gradle installDist task. To use it, apply $gradleScripts/application.gradle to your build.gradle . To set up this script you need to add the main class name to your build.gradle file with the following code: 1 2 3 application { mainClass . set ( \"com.example.ApplicationKt\" ) }","title":"Application"},{"location":"gradle/#certificates","text":"Creates the required key stores for development purposes. IMPORTANT these key stores must not be used for production environments. The created key stores are: ca.p12 : self-signed certificate authority (CA). This store holds the CA private key. The store must be private and will be used to sign other certificates. The key pair alias is ca . trust.p12 : key store with CA's public certificate. It can be set as the Java process trust store which makes every certificate signed with the CA trusted. However, if used as the trust store, the JDK cacerts entries won't be loaded and thus, not trusted. It can be used to set up HTTPS clients (not required to be set at JVM level). <domain>.p12 : there would be one per each domain (see sslDomain variable). These stores are signed by the CA, and they contain the service private key and its full chain certificate. <domain> will be the domain name without the TLD, and the Subject alternative names (SAN) will include <domain>.test ( TLD for local environments ) and localhost (along the extra subdomains specified). The defined tasks are: createCa: creates ca.p12 and import its public certificate inside trust.p12 . createIdentities: creates the <domain>.p12 store for all sslDomain variables. To use it, apply $gradleScripts/certificates.gradle to your build.gradle . To set up this script's parameters, check the build variables section . These helper settings are: sslDomain[1-9] (REQUIRED): the main domain for the identity store. You can create up to ten (from sslDomain to sslDomain9 ). Each of these variables has the format subdomain1|subdomain2|subdomainN|domain.tld subdomains are added to <domain>.p12 alternative names (aside of <domain>.test and localhost which are always added). By default, no extra domains are added to the key store. sslOrganization (REQUIRED): organization stated in created certificates. sslCaFile: certificate authority key store file. By default: \"ca.p12\". sslCaAlias: CA alias in the key store. If not provided, it will be \"ca\". sslTrustFile: trust store file name, by default it is \"trust.p12\". sslPath: path used to generate the key stores. By default, it will be the project's build directory. sslPassword: password used for the generated key stores. By default, it is the file name reversed. sslValidity: validity period (in days) for certificates. If not provided, it will be 365. sslCountry: country used in the certificates. By default, it is the current locale's country code.","title":"Certificates"},{"location":"gradle/#lean","text":"This script changes the default Gradle source layout to be less bulky. To use it you must apply the $gradleScripts/lean.gradle script to your build.gradle file. It must be applied after the Kotlin plugin. After applying this script, the source folders will be ${projectDir}/main and ${projectDir}/test , and the resources will be stored also in these folders.","title":"Lean"},{"location":"gradle/#detekt","text":"This script sets up the build to analyze the code with the Detekt static code analyzer. To use it you must apply the $gradleScripts/detekt.gradle script to your build.gradle file. It must be applied after the Kotlin plugin. For the script to work you need to add the plugin to the plugins build section before importing the script. I.e.: 1 2 3 plugins { id ( \"io.gitlab.arturbosch.detekt\" ) version \"VERSION\" apply false } To set up this script's parameters, check the build variables section . These helper settings are: detektConfigPath: file with Detekt rules and settings. If not set, the default Detekt setup will be used.","title":"Detekt"},{"location":"gradle/#docker","text":"This script adds helper tasks for dealing with Docker inside a project. To use it you must apply the $gradleScripts/docker.gradle script to your build.gradle file. This script provides the following tasks: cleanDocker : deletes unused containers, images, and volumes.","title":"Docker"},{"location":"help/","text":"Support \u00b6 Please, check if your issue already exists at the project board , the organization board or the issues list before creating a new one. To notify bugs - create a new bug issue using Github. You can also write an email at support@hexagonkt.com to ask for support. Help \u00b6 You can use Slack for questions, comments, etc. you can also create a Github issue tagged as a question.","title":"Help and Support"},{"location":"help/#support","text":"Please, check if your issue already exists at the project board , the organization board or the issues list before creating a new one. To notify bugs - create a new bug issue using Github. You can also write an email at support@hexagonkt.com to ask for support.","title":"Support"},{"location":"help/#help","text":"You can use Slack for questions, comments, etc. you can also create a Github issue tagged as a question.","title":"Help"},{"location":"maven/","text":"Parent POMs \u00b6 If you want to use Maven to build your Kotlin applications, you can set up your POM to inherit from the Hexagon's parent POM. This POM configures Kotlin and Hexagon for you. There are two different flavors available (based on the directory schema you want to use): The standard layout POM The lean layout POM Standard Parent POM \u00b6 This layout is the well-known standard one, it has more directories but its widely used. Set up the Kotlin plugin Define Hexagon dependencies' versions Use JUnit 5 and MockK for testing Configure Jacoco coverage report 1 2 3 4 5 <parent> <groupId> com.hexagonkt </groupId> <artifactId> kotlin_pom </artifactId> <version> $hexagonVersion </version> </parent> Lean Parent POM \u00b6 This directory layout has less nested directories, and it is more compact. The main downside of using this approach is that it differs of the standard one. Inherits from the Standard Parent POM (it provides all its features) Change the source directories to be main and test instead src/{main,test}/kotlin Store resources together with source files instead of src/<sourceSet>/resources 1 2 3 4 5 <parent> <groupId> com.hexagonkt </groupId> <artifactId> kotlin_lean_pom </artifactId> <version> $hexagonVersion </version> </parent>","title":"Maven Parent POM"},{"location":"maven/#parent-poms","text":"If you want to use Maven to build your Kotlin applications, you can set up your POM to inherit from the Hexagon's parent POM. This POM configures Kotlin and Hexagon for you. There are two different flavors available (based on the directory schema you want to use): The standard layout POM The lean layout POM","title":"Parent POMs"},{"location":"maven/#standard-parent-pom","text":"This layout is the well-known standard one, it has more directories but its widely used. Set up the Kotlin plugin Define Hexagon dependencies' versions Use JUnit 5 and MockK for testing Configure Jacoco coverage report 1 2 3 4 5 <parent> <groupId> com.hexagonkt </groupId> <artifactId> kotlin_pom </artifactId> <version> $hexagonVersion </version> </parent>","title":"Standard Parent POM"},{"location":"maven/#lean-parent-pom","text":"This directory layout has less nested directories, and it is more compact. The main downside of using this approach is that it differs of the standard one. Inherits from the Standard Parent POM (it provides all its features) Change the source directories to be main and test instead src/{main,test}/kotlin Store resources together with source files instead of src/<sourceSet>/resources 1 2 3 4 5 <parent> <groupId> com.hexagonkt </groupId> <artifactId> kotlin_lean_pom </artifactId> <version> $hexagonVersion </version> </parent>","title":"Lean Parent POM"},{"location":"planning/","text":"You can check current tasks, priorities, and upcoming milestones on the following places: Project board : main the toolkit's tasks. Tasks related to the project's libraries. Organization board : organization's tasks (i.e.: create example projects). Roadmap : upcoming releases status. Contains milestones' pending and completed tasks. If you miss some feature you would like to see implemented. You can request it using the enhancement Github template. If you want to help us decide which tasks to pick first. You may prioritize issues, adding the reaction on the issues more important to you.","title":"Planning"},{"location":"quick_start/","text":"In this guide, we are going to create a sample HTTP service. You can read the Core or HTTP Server modules documentation for more information. You can use both Gradle and Maven to build your application. You can start by cloning a starter project ( Gradle Starter or Maven Starter ). Or you can create a project from scratch following these steps: Configure Kotlin in Gradle or Maven . Add the dependency in Gradle or Maven: build.gradle 1 2 3 4 5 repositories { mavenCentral () } implementation ( \"com.hexagonkt:http_server_jetty:$hexagonVersion\" ) pom.xml 1 2 3 4 5 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> http_server_jetty </artifactId> <version> $hexagonVersion </version> </dependency> Write the code in the src/main/kotlin/Hello.kt file: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 package com.hexagonkt.http.server.jetty import com.hexagonkt.http.server.Server lateinit var server : Server /** * Start a Hello World server, serving at path \"/hello\". */ fun main () { server = serve { get ( \"/hello\" ) { ok ( \"Hello World!\" ) } } } Run the service and view the results at: http://localhost:2010/hello Tip If you use Gradle, you can use the Application Helper and run the application watching for changes with the command: ./gradlew watch -t Dependencies Verification \u00b6 Hexagon's dependencies are signed, you can get the public key at the OpenPGP Public Key Server or here . These are the details of the public key: 1 2 pub 4096R/2AEE3721 2020-05-30 Hexagon Toolkit (Key used to sign published binaries) <project@hexagonkt.com> Fingerprint=792B D37F F598 91C4 AC6F 8D92 3B26 711D 2AEE 3721 Warning You may find a deprecated public key in public GPG key servers (check the details below). Please, ignore it and use the above one. The information about the obsolete is: 1 2 pub 2048R/657676D1 2020-05-30 Hexagon Toolkit <project@hexagonkt.com> Fingerprint=F263 9BBC 4A6A FE50 D098 9F08 5352 7033 6576 76D1 Next Steps \u00b6 To continue learning about this toolkit, you can: Check the Developer Guide for more details. Clone the Gradle Starter or Maven Starter repository for a minimal fully working example (including tests). Proceed to the Examples section to check code snippets or full example projects.","title":"Quick Start"},{"location":"quick_start/#dependencies-verification","text":"Hexagon's dependencies are signed, you can get the public key at the OpenPGP Public Key Server or here . These are the details of the public key: 1 2 pub 4096R/2AEE3721 2020-05-30 Hexagon Toolkit (Key used to sign published binaries) <project@hexagonkt.com> Fingerprint=792B D37F F598 91C4 AC6F 8D92 3B26 711D 2AEE 3721 Warning You may find a deprecated public key in public GPG key servers (check the details below). Please, ignore it and use the above one. The information about the obsolete is: 1 2 pub 2048R/657676D1 2020-05-30 Hexagon Toolkit <project@hexagonkt.com> Fingerprint=F263 9BBC 4A6A FE50 D098 9F08 5352 7033 6576 76D1","title":"Dependencies Verification"},{"location":"quick_start/#next-steps","text":"To continue learning about this toolkit, you can: Check the Developer Guide for more details. Clone the Gradle Starter or Maven Starter repository for a minimal fully working example (including tests). Proceed to the Examples section to check code snippets or full example projects.","title":"Next Steps"},{"location":"examples/example_projects/","text":"Todo-Backend \u00b6 Sample application for the Todo-Backend project which implements TodoMVC backends. You can check the code here \u2197 . Real World \u00b6 Hexagon RealWorld backend implementation. The source code is available here \u2197 . Contact Application \u00b6 Sample contact application that showcases the structure of a Hexagon service. Source code can be checked here \u2197 . Twitter Clone \u00b6 Mini Twitter clone application showcasing the use of template rendering, handling form data and integration with MongoDB. You can find the repository here \u2197 .","title":"Example Projects"},{"location":"examples/example_projects/#todo-backend","text":"Sample application for the Todo-Backend project which implements TodoMVC backends. You can check the code here \u2197 .","title":"Todo-Backend"},{"location":"examples/example_projects/#real-world","text":"Hexagon RealWorld backend implementation. The source code is available here \u2197 .","title":"Real World"},{"location":"examples/example_projects/#contact-application","text":"Sample contact application that showcases the structure of a Hexagon service. Source code can be checked here \u2197 .","title":"Contact Application"},{"location":"examples/example_projects/#twitter-clone","text":"Mini Twitter clone application showcasing the use of template rendering, handling form data and integration with MongoDB. You can find the repository here \u2197 .","title":"Twitter Clone"},{"location":"examples/http_client_examples/","text":"HTTP Client Creation Example \u00b6 This example shows how to create HTTP Client instances. Check the full test for more information. Without setting parameters \u00b6 1 2 3 4 5 6 7 // Adapter injected Client () // No base endpoint, whole URL must be passed each request Client ( \"http://host:1234/base\" ) // Requests' paths will be appended to supplied base URL // Adapter provided explicitly Client ( adapter ) Client ( adapter , \"http://host:1234/base\" ) Using client settings \u00b6 1 2 3 4 5 6 7 8 9 10 // All client settings parameters are optionals and provide default values Client ( \"http://host:1234/base\" , ClientSettings ( contentType = \"application/json\" , useCookies = true , headers = mapOf ( \"X-Api-Key\" to listOf ( \"cafebabe\" )), // Headers to use in all requests user = \"user\" , // HTTP Basic auth user password = \"password\" , // HTTP Basic auth password insecure = false , // If true, the client doesn't check server certificates sslSettings = SslSettings () // Key stores settings (check TLS section for details) )) Send Requests Example \u00b6 This example shows send HTTP requests to a server. Here you can check the full test . Generic request \u00b6 1 2 3 4 5 6 7 8 9 val request = Request ( method = GET , path = \"/\" , body = mapOf ( \"body\" to \"payload\" ), headers = mapOf ( \"X-Header\" to listOf ( \"value\" )), contentType = Json . contentType ) val response = client . send ( request ) Shortcut without body sending \u00b6 1 2 3 4 5 6 7 8 val responseGet = client . get ( \"/\" ) val responseHead = client . head ( \"/\" ) val responsePost = client . post ( \"/\" ) val responsePut = client . put ( \"/\" ) val responseDelete = client . delete ( \"/\" ) val responseTrace = client . trace ( \"/\" ) val responseOptions = client . options ( \"/\" ) val responsePatch = client . patch ( \"/\" ) Shortcut with payload sending \u00b6 1 2 3 4 5 6 7 8 9 val body = mapOf ( \"key\" to \"value\" ) val responseGet = client . get ( \"/\" , body = body ) val responsePost = client . post ( \"/\" , body ) val responsePut = client . put ( \"/\" , body ) val responseDelete = client . delete ( \"/\" , body ) val responseTrace = client . trace ( \"/\" , body ) val responseOptions = client . options ( \"/\" , body ) val responsePatch = client . patch ( \"/\" , body ) Shortcut including body and content type \u00b6 1 2 3 4 5 6 7 8 9 val body = mapOf ( \"key\" to \"value\" ) val responseGet = client . get ( \"/\" , body = body , format = Yaml ) val responsePost = client . post ( \"/\" , body , Yaml ) val responsePut = client . put ( \"/\" , body , Yaml ) val responseDelete = client . delete ( \"/\" , body , Yaml ) val responseTrace = client . trace ( \"/\" , body , Yaml ) val responseOptions = client . options ( \"/\" , body , Yaml ) val responsePatch = client . patch ( \"/\" , body , Yaml ) Use Cookies Example \u00b6 Check the details at the full test . 1 2 3 4 5 6 7 8 9 10 11 12 val cookieName = \"sampleCookie\" val cookieValue = \"sampleCookieValue\" // Set the cookie in the client client . cookies [ \"sampleCookie\" ] = Cookie ( cookieName , cookieValue ) // Assert that it is received in the server and change its value afterwards client . post ( \"/assertHasCookie?cookieName= $ cookieName \" ) client . post ( \"/addCookie?cookieName= $ cookieName &cookieValue= ${ cookieValue } _changed\" ) // Verify that the client cookie is updated assert ( client . cookies [ cookieName ]?. value == cookieValue + \"_changed\" ) Multipart Requests Example \u00b6 Refer to the full test for more details. Send form fields \u00b6 1 2 val parts = mapOf ( \"name\" to Part ( \"name\" , \"value\" )) val response = client . send ( Request ( POST , \"/multipart\" , parts = parts )) Send and attached file \u00b6 1 2 3 val stream = URL ( \"classpath:assets/index.html\" ). openStream () val parts = mapOf ( \"file\" to Part ( \"file\" , stream , \"index.html\" )) val response = client . send ( Request ( POST , \"/file\" , parts = parts )) Mutual TLS Example \u00b6 This example shows how make requests using mutual TLS between the client and the server. You can check the full test for more details. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // Key store files val identity = \"hexagonkt.p12\" val trust = \"trust.p12\" // Default passwords are file name reversed val keyStorePassword = identity . reversed () val trustStorePassword = trust . reversed () // Key stores can be set as URIs to classpath resources (the triple slash is needed) val keyStore = URL ( \"classpath:ssl/ $ identity \" ) val trustStore = URL ( \"classpath:ssl/ $ trust \" ) val sslSettings = SslSettings ( keyStore = keyStore , keyStorePassword = keyStorePassword , trustStore = trustStore , trustStorePassword = trustStorePassword , clientAuth = true // Requires a valid certificate from the client (mutual TLS) ) val serverSettings = ServerSettings ( bindPort = 0 , protocol = HTTPS , // You can also use HTTP2 sslSettings = sslSettings ) val server = serve ( serverSettings , serverAdapter ) { get ( \"/hello\" ) { // We can access the certificate used by the client from the request val subjectDn = request . certificate ?. subjectDN ?. name response . headers [ \"cert\" ] = subjectDn ok ( \"Hello World!\" ) } } // We'll use the same certificate for the client (in a real scenario it would be different) val clientSettings = ClientSettings ( sslSettings = sslSettings ) // Create a HTTP client and make a HTTPS request val client = Client ( AhcAdapter (), \"https://localhost: ${ server . runtimePort } \" , clientSettings ) client . get ( \"/hello\" ). apply { logger . debug { body } // Assure the certificate received (and returned) by the server is correct assert ( headers . require ( \"cert\" ). first (). startsWith ( \"CN=hexagonkt.com\" )) assert ( body == \"Hello World!\" ) }","title":"HTTP Client"},{"location":"examples/http_client_examples/#http-client-creation-example","text":"This example shows how to create HTTP Client instances. Check the full test for more information.","title":"HTTP Client Creation Example"},{"location":"examples/http_client_examples/#without-setting-parameters","text":"1 2 3 4 5 6 7 // Adapter injected Client () // No base endpoint, whole URL must be passed each request Client ( \"http://host:1234/base\" ) // Requests' paths will be appended to supplied base URL // Adapter provided explicitly Client ( adapter ) Client ( adapter , \"http://host:1234/base\" )","title":"Without setting parameters"},{"location":"examples/http_client_examples/#using-client-settings","text":"1 2 3 4 5 6 7 8 9 10 // All client settings parameters are optionals and provide default values Client ( \"http://host:1234/base\" , ClientSettings ( contentType = \"application/json\" , useCookies = true , headers = mapOf ( \"X-Api-Key\" to listOf ( \"cafebabe\" )), // Headers to use in all requests user = \"user\" , // HTTP Basic auth user password = \"password\" , // HTTP Basic auth password insecure = false , // If true, the client doesn't check server certificates sslSettings = SslSettings () // Key stores settings (check TLS section for details) ))","title":"Using client settings"},{"location":"examples/http_client_examples/#send-requests-example","text":"This example shows send HTTP requests to a server. Here you can check the full test .","title":"Send Requests Example"},{"location":"examples/http_client_examples/#generic-request","text":"1 2 3 4 5 6 7 8 9 val request = Request ( method = GET , path = \"/\" , body = mapOf ( \"body\" to \"payload\" ), headers = mapOf ( \"X-Header\" to listOf ( \"value\" )), contentType = Json . contentType ) val response = client . send ( request )","title":"Generic request"},{"location":"examples/http_client_examples/#shortcut-without-body-sending","text":"1 2 3 4 5 6 7 8 val responseGet = client . get ( \"/\" ) val responseHead = client . head ( \"/\" ) val responsePost = client . post ( \"/\" ) val responsePut = client . put ( \"/\" ) val responseDelete = client . delete ( \"/\" ) val responseTrace = client . trace ( \"/\" ) val responseOptions = client . options ( \"/\" ) val responsePatch = client . patch ( \"/\" )","title":"Shortcut without body sending"},{"location":"examples/http_client_examples/#shortcut-with-payload-sending","text":"1 2 3 4 5 6 7 8 9 val body = mapOf ( \"key\" to \"value\" ) val responseGet = client . get ( \"/\" , body = body ) val responsePost = client . post ( \"/\" , body ) val responsePut = client . put ( \"/\" , body ) val responseDelete = client . delete ( \"/\" , body ) val responseTrace = client . trace ( \"/\" , body ) val responseOptions = client . options ( \"/\" , body ) val responsePatch = client . patch ( \"/\" , body )","title":"Shortcut with payload sending"},{"location":"examples/http_client_examples/#shortcut-including-body-and-content-type","text":"1 2 3 4 5 6 7 8 9 val body = mapOf ( \"key\" to \"value\" ) val responseGet = client . get ( \"/\" , body = body , format = Yaml ) val responsePost = client . post ( \"/\" , body , Yaml ) val responsePut = client . put ( \"/\" , body , Yaml ) val responseDelete = client . delete ( \"/\" , body , Yaml ) val responseTrace = client . trace ( \"/\" , body , Yaml ) val responseOptions = client . options ( \"/\" , body , Yaml ) val responsePatch = client . patch ( \"/\" , body , Yaml )","title":"Shortcut including body and content type"},{"location":"examples/http_client_examples/#use-cookies-example","text":"Check the details at the full test . 1 2 3 4 5 6 7 8 9 10 11 12 val cookieName = \"sampleCookie\" val cookieValue = \"sampleCookieValue\" // Set the cookie in the client client . cookies [ \"sampleCookie\" ] = Cookie ( cookieName , cookieValue ) // Assert that it is received in the server and change its value afterwards client . post ( \"/assertHasCookie?cookieName= $ cookieName \" ) client . post ( \"/addCookie?cookieName= $ cookieName &cookieValue= ${ cookieValue } _changed\" ) // Verify that the client cookie is updated assert ( client . cookies [ cookieName ]?. value == cookieValue + \"_changed\" )","title":"Use Cookies Example"},{"location":"examples/http_client_examples/#multipart-requests-example","text":"Refer to the full test for more details.","title":"Multipart Requests Example"},{"location":"examples/http_client_examples/#send-form-fields","text":"1 2 val parts = mapOf ( \"name\" to Part ( \"name\" , \"value\" )) val response = client . send ( Request ( POST , \"/multipart\" , parts = parts ))","title":"Send form fields"},{"location":"examples/http_client_examples/#send-and-attached-file","text":"1 2 3 val stream = URL ( \"classpath:assets/index.html\" ). openStream () val parts = mapOf ( \"file\" to Part ( \"file\" , stream , \"index.html\" )) val response = client . send ( Request ( POST , \"/file\" , parts = parts ))","title":"Send and attached file"},{"location":"examples/http_client_examples/#mutual-tls-example","text":"This example shows how make requests using mutual TLS between the client and the server. You can check the full test for more details. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // Key store files val identity = \"hexagonkt.p12\" val trust = \"trust.p12\" // Default passwords are file name reversed val keyStorePassword = identity . reversed () val trustStorePassword = trust . reversed () // Key stores can be set as URIs to classpath resources (the triple slash is needed) val keyStore = URL ( \"classpath:ssl/ $ identity \" ) val trustStore = URL ( \"classpath:ssl/ $ trust \" ) val sslSettings = SslSettings ( keyStore = keyStore , keyStorePassword = keyStorePassword , trustStore = trustStore , trustStorePassword = trustStorePassword , clientAuth = true // Requires a valid certificate from the client (mutual TLS) ) val serverSettings = ServerSettings ( bindPort = 0 , protocol = HTTPS , // You can also use HTTP2 sslSettings = sslSettings ) val server = serve ( serverSettings , serverAdapter ) { get ( \"/hello\" ) { // We can access the certificate used by the client from the request val subjectDn = request . certificate ?. subjectDN ?. name response . headers [ \"cert\" ] = subjectDn ok ( \"Hello World!\" ) } } // We'll use the same certificate for the client (in a real scenario it would be different) val clientSettings = ClientSettings ( sslSettings = sslSettings ) // Create a HTTP client and make a HTTPS request val client = Client ( AhcAdapter (), \"https://localhost: ${ server . runtimePort } \" , clientSettings ) client . get ( \"/hello\" ). apply { logger . debug { body } // Assure the certificate received (and returned) by the server is correct assert ( headers . require ( \"cert\" ). first (). startsWith ( \"CN=hexagonkt.com\" )) assert ( body == \"Hello World!\" ) }","title":"Mutual TLS Example"},{"location":"examples/http_server_examples/","text":"Books Example \u00b6 A simple CRUD example showing how to manage book resources. Here you can check the full test . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 data class Book ( val author : String , val title : String ) private val books : MutableMap < Int , Book > = linkedMapOf ( 100 to Book ( \"Miguel de Cervantes\" , \"Don Quixote\" ), 101 to Book ( \"William Shakespeare\" , \"Hamlet\" ), 102 to Book ( \"Homer\" , \"The Odyssey\" ) ) val server : Server = Server ( adapter ) { post ( \"/books\" ) { // Require fails if parameter does not exists val author = queryParameters . require ( \"author\" ) val title = queryParameters . require ( \"title\" ) val id = ( books . keys . maxOrNull () ?: 0 ) + 1 books += id to Book ( author , title ) send ( 201 , id ) } get ( \"/books/{id}\" ) { val bookId = pathParameters . require ( \"id\" ). toInt () val book = books [ bookId ] if ( book != null ) // ok() is a shortcut to send(200) ok ( \"Title: ${ book . title } , Author: ${ book . author } \" ) else send ( 404 , \"Book not found\" ) } put ( \"/books/{id}\" ) { val bookId = pathParameters . require ( \"id\" ). toInt () val book = books [ bookId ] if ( book != null ) { books += bookId to book . copy ( author = queryParameters [ \"author\" ] ?: book . author , title = queryParameters [ \"title\" ] ?: book . title ) ok ( \"Book with id ' $ bookId ' updated\" ) } else { send ( 404 , \"Book not found\" ) } } delete ( \"/books/{id}\" ) { val bookId = pathParameters . require ( \"id\" ). toInt () val book = books [ bookId ] books -= bookId if ( book != null ) ok ( \"Book with id ' $ bookId ' deleted\" ) else send ( 404 , \"Book not found\" ) } // Matches path's requests with *any* HTTP method as a fallback (return 404 instead 405) any ( \"/books/{id}\" ) { send ( 405 ) } get ( \"/books\" ) { ok ( books . keys . joinToString ( \" \" , transform = Int :: toString )) } } Session Example \u00b6 Example showing how to use sessions. Here you can check the full test . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 val server : Server = Server ( adapter , ServerSettings ( features = setOf ( SESSIONS ))) { path ( \"/session\" ) { get ( \"/id\" ) { ok ( session . id ?: \"null\" ) } get ( \"/access\" ) { ok ( session . lastAccessedTime ?. toString () ?: \"null\" ) } get ( \"/new\" ) { ok ( session . isNew ()) } path ( \"/inactive\" ) { get { ok ( session . maxInactiveInterval ?: \"null\" ) } put ( \"/{time}\" ) { session . maxInactiveInterval = pathParameters . require ( \"time\" ). toInt () } } get ( \"/creation\" ) { ok ( session . creationTime ?: \"null\" ) } post ( \"/invalidate\" ) { session . invalidate () } path ( \"/{key}\" ) { put ( \"/{value}\" ) { session . set ( pathParameters . require ( \"key\" ), pathParameters . require ( \"value\" )) } get { ok ( session . get ( pathParameters . require ( \"key\" )). toString ()) } delete { session . remove ( pathParameters . require ( \"key\" )) } } get { val attributes = session . attributes val attributeTexts = attributes . entries . map { it . key + \" : \" + it . value } response . headers [ \"attributes\" ] = attributeTexts . joinToString ( \", \" ) response . headers [ \"attribute values\" ] = attributes . values . joinToString ( \", \" ) response . headers [ \"attribute names\" ] = attributes . keys . joinToString ( \", \" ) response . headers [ \"creation\" ] = session . creationTime . toString () response . headers [ \"id\" ] = session . id ?: \"\" response . headers [ \"last access\" ] = session . lastAccessedTime . toString () response . status = 200 } } } Cookies Example \u00b6 Demo server to show the use of cookies. Here you can check the full test . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 val server : Server = Server ( adapter ) { post ( \"/assertNoCookies\" ) { if ( request . cookies . isNotEmpty ()) halt ( 500 ) } post ( \"/addCookie\" ) { val name = queryParameters . require ( \"cookieName\" ) val value = queryParameters . require ( \"cookieValue\" ) response . addCookie ( Cookie ( name , value )) } post ( \"/assertHasCookie\" ) { val cookieName = queryParameters . require ( \"cookieName\" ) val cookieValue = request . cookies [ cookieName ]?. value if ( queryParameters [ \"cookieValue\" ] != cookieValue ) halt ( 500 ) } post ( \"/removeCookie\" ) { response . removeCookie ( queryParameters . require ( \"cookieName\" )) } } Error Handling Example \u00b6 Code to show how to handle callback exceptions and HTTP error codes. Here you can check the full test . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class CustomException : IllegalArgumentException () val server : Server = Server ( adapter ) { error ( UnsupportedOperationException :: class ) { response . headers [ \"error\" ] = it . message ?: it . javaClass . name send ( 599 , \"Unsupported\" ) } error ( IllegalArgumentException :: class ) { response . headers [ \"runtimeError\" ] = it . message ?: it . javaClass . name send ( 598 , \"Runtime\" ) } // Catching `Exception` handles any unhandled exception before (it has to be the last) error ( Exception :: class ) { send ( 500 , \"Root handler\" ) } // It is possible to execute a handler upon a given status code before returning error ( 588 ) { send ( 578 , \"588 -> 578\" ) } get ( \"/exception\" ) { throw UnsupportedOperationException ( \"error message\" ) } get ( \"/baseException\" ) { throw CustomException () } get ( \"/unhandledException\" ) { error ( \"error message\" ) } get ( \"/halt\" ) { halt ( \"halted\" ) } get ( \"/588\" ) { halt ( 588 ) } } Filters Example \u00b6 This example shows how to add filters before and after route execution. Here you can check the full test . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 private val users : Map < String , String > = mapOf ( \"Turing\" to \"London\" , \"Dijkstra\" to \"Rotterdam\" ) private val server : Server = Server ( adapter ) { before { attributes [ \"start\" ] = nanoTime () } before ( \"/protected/*\" ) { val authorization = request . headers [ \"Authorization\" ] ?: halt ( 401 , \"Unauthorized\" ) val credentials = authorization . removePrefix ( \"Basic \" ) val userPassword = String ( Base64 . getDecoder (). decode ( credentials )). split ( \":\" ) // Parameters set in call attributes are accessible in other filters and routes attributes [ \"username\" ] = userPassword [ 0 ] attributes [ \"password\" ] = userPassword [ 1 ] } // All matching filters are run in order unless call is halted before ( \"/protected/*\" ) { if ( users [ attributes [ \"username\" ]] != attributes [ \"password\" ] ) halt ( 403 , \"Forbidden\" ) } get ( \"/protected/hi\" ) { ok ( \"Hello ${ attributes [ \" username \" ] } !\" ) } // After filters are ran even if request was halted before after { response . headers [ \"time\" ] = nanoTime () - attributes [ \"start\" ] as Long } } Files Example \u00b6 The following code shows how to serve resources and receive files. Here you can check the full test . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 private val server : Server = Server ( adapter ) { path ( \"/static\" ) { get ( \"/files/*\" , URL ( \"classpath:assets\" )) // Serve `assets` resources on `/html/*` get ( \"/resources/*\" , File ( directory )) // Serve `test` folder on `/pub/*` } get ( \"/html/*\" , URL ( \"classpath:assets\" )) // Serve `assets` resources on `/html/*` get ( \"/pub/*\" , File ( directory )) // Serve `test` folder on `/pub/*` get ( URL ( \"classpath:public\" )) // Serve `public` resources folder on `/*` post ( \"/multipart\" ) { ok ( request . parts . keys . joinToString ( \":\" )) } post ( \"/file\" ) { val part = request . parts . values . first () val content = part . inputStream . reader (). readText () ok ( content ) } post ( \"/form\" ) { fun serializeMap ( map : Map < String , List < String >> ): List < String > = listOf ( map . map { \" ${ it . key } : ${ it . value . joinToString ( \" , \" ) } }\" }. joinToString ( \"\\n\" ) ) val queryParams = serializeMap ( queryParametersValues ) val formParams = serializeMap ( formParametersValues ) response . headersValues [ \"queryParams\" ] = queryParams response . headersValues [ \"formParams\" ] = formParams } } CORS Example \u00b6 This example shows how to set up CORS for REST APIs used from the browser. Here you can check the full test . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 val server : Server = Server ( adapter ) { corsPath ( \"/default\" , CorsSettings ()) corsPath ( \"/example/org\" , CorsSettings ( \"example.org\" )) corsPath ( \"/no/credentials\" , CorsSettings ( supportCredentials = false )) corsPath ( \"/only/post\" , CorsSettings ( allowedMethods = setOf ( POST ))) corsPath ( \"/cache\" , CorsSettings ( preFlightMaxAge = 10 )) corsPath ( \"/exposed/headers\" , CorsSettings ( exposedHeaders = setOf ( \"head\" ))) corsPath ( \"/allowed/headers\" , CorsSettings ( allowedHeaders = setOf ( \"head\" ))) } private fun Router . corsPath ( path : String , settings : CorsSettings ) { path ( path ) { // CORS settings can change for different routes cors ( settings ) get ( \"/path\" ) { ok ( request . method ) } post ( \"/path\" ) { ok ( request . method ) } put ( \"/path\" ) { ok ( request . method ) } delete ( \"/path\" ) { ok ( request . method ) } get { ok ( request . method ) } post { ok ( request . method ) } put { ok ( request . method ) } delete { ok ( request . method ) } } } HTTPS Example \u00b6 The snippet below shows how to set up your server to use HTTPS and HTTP/2. You can check the full test . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // Key store files val identity = \"hexagonkt.p12\" val trust = \"trust.p12\" // Default passwords are file name reversed val keyStorePassword = identity . reversed () val trustStorePassword = trust . reversed () // Key stores can be set as URIs to classpath resources (the triple slash is needed) val keyStore = URL ( \"classpath:ssl/ $ identity \" ) val trustStore = URL ( \"classpath:ssl/ $ trust \" ) val sslSettings = SslSettings ( keyStore = keyStore , keyStorePassword = keyStorePassword , trustStore = trustStore , trustStorePassword = trustStorePassword , clientAuth = true // Requires a valid certificate from the client (mutual TLS) ) val serverSettings = ServerSettings ( bindPort = 0 , protocol = HTTPS , // You can also use HTTP2 sslSettings = sslSettings ) val server = serve ( serverSettings , serverAdapter ) { get ( \"/hello\" ) { // We can access the certificate used by the client from the request val subjectDn = request . certificate ?. subjectDN ?. name response . headers [ \"cert\" ] = subjectDn ok ( \"Hello World!\" ) } } // We'll use the same certificate for the client (in a real scenario it would be different) val clientSettings = ClientSettings ( sslSettings = sslSettings ) // Create a HTTP client and make a HTTPS request val client = Client ( AhcAdapter (), \"https://localhost: ${ server . runtimePort } \" , clientSettings ) client . get ( \"/hello\" ). apply { logger . debug { body } // Assure the certificate received (and returned) by the server is correct assert ( headers . require ( \"cert\" ). first (). startsWith ( \"CN=hexagonkt.com\" )) assert ( body == \"Hello World!\" ) }","title":"HTTP Server"},{"location":"examples/http_server_examples/#books-example","text":"A simple CRUD example showing how to manage book resources. Here you can check the full test . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 data class Book ( val author : String , val title : String ) private val books : MutableMap < Int , Book > = linkedMapOf ( 100 to Book ( \"Miguel de Cervantes\" , \"Don Quixote\" ), 101 to Book ( \"William Shakespeare\" , \"Hamlet\" ), 102 to Book ( \"Homer\" , \"The Odyssey\" ) ) val server : Server = Server ( adapter ) { post ( \"/books\" ) { // Require fails if parameter does not exists val author = queryParameters . require ( \"author\" ) val title = queryParameters . require ( \"title\" ) val id = ( books . keys . maxOrNull () ?: 0 ) + 1 books += id to Book ( author , title ) send ( 201 , id ) } get ( \"/books/{id}\" ) { val bookId = pathParameters . require ( \"id\" ). toInt () val book = books [ bookId ] if ( book != null ) // ok() is a shortcut to send(200) ok ( \"Title: ${ book . title } , Author: ${ book . author } \" ) else send ( 404 , \"Book not found\" ) } put ( \"/books/{id}\" ) { val bookId = pathParameters . require ( \"id\" ). toInt () val book = books [ bookId ] if ( book != null ) { books += bookId to book . copy ( author = queryParameters [ \"author\" ] ?: book . author , title = queryParameters [ \"title\" ] ?: book . title ) ok ( \"Book with id ' $ bookId ' updated\" ) } else { send ( 404 , \"Book not found\" ) } } delete ( \"/books/{id}\" ) { val bookId = pathParameters . require ( \"id\" ). toInt () val book = books [ bookId ] books -= bookId if ( book != null ) ok ( \"Book with id ' $ bookId ' deleted\" ) else send ( 404 , \"Book not found\" ) } // Matches path's requests with *any* HTTP method as a fallback (return 404 instead 405) any ( \"/books/{id}\" ) { send ( 405 ) } get ( \"/books\" ) { ok ( books . keys . joinToString ( \" \" , transform = Int :: toString )) } }","title":"Books Example"},{"location":"examples/http_server_examples/#session-example","text":"Example showing how to use sessions. Here you can check the full test . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 val server : Server = Server ( adapter , ServerSettings ( features = setOf ( SESSIONS ))) { path ( \"/session\" ) { get ( \"/id\" ) { ok ( session . id ?: \"null\" ) } get ( \"/access\" ) { ok ( session . lastAccessedTime ?. toString () ?: \"null\" ) } get ( \"/new\" ) { ok ( session . isNew ()) } path ( \"/inactive\" ) { get { ok ( session . maxInactiveInterval ?: \"null\" ) } put ( \"/{time}\" ) { session . maxInactiveInterval = pathParameters . require ( \"time\" ). toInt () } } get ( \"/creation\" ) { ok ( session . creationTime ?: \"null\" ) } post ( \"/invalidate\" ) { session . invalidate () } path ( \"/{key}\" ) { put ( \"/{value}\" ) { session . set ( pathParameters . require ( \"key\" ), pathParameters . require ( \"value\" )) } get { ok ( session . get ( pathParameters . require ( \"key\" )). toString ()) } delete { session . remove ( pathParameters . require ( \"key\" )) } } get { val attributes = session . attributes val attributeTexts = attributes . entries . map { it . key + \" : \" + it . value } response . headers [ \"attributes\" ] = attributeTexts . joinToString ( \", \" ) response . headers [ \"attribute values\" ] = attributes . values . joinToString ( \", \" ) response . headers [ \"attribute names\" ] = attributes . keys . joinToString ( \", \" ) response . headers [ \"creation\" ] = session . creationTime . toString () response . headers [ \"id\" ] = session . id ?: \"\" response . headers [ \"last access\" ] = session . lastAccessedTime . toString () response . status = 200 } } }","title":"Session Example"},{"location":"examples/http_server_examples/#cookies-example","text":"Demo server to show the use of cookies. Here you can check the full test . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 val server : Server = Server ( adapter ) { post ( \"/assertNoCookies\" ) { if ( request . cookies . isNotEmpty ()) halt ( 500 ) } post ( \"/addCookie\" ) { val name = queryParameters . require ( \"cookieName\" ) val value = queryParameters . require ( \"cookieValue\" ) response . addCookie ( Cookie ( name , value )) } post ( \"/assertHasCookie\" ) { val cookieName = queryParameters . require ( \"cookieName\" ) val cookieValue = request . cookies [ cookieName ]?. value if ( queryParameters [ \"cookieValue\" ] != cookieValue ) halt ( 500 ) } post ( \"/removeCookie\" ) { response . removeCookie ( queryParameters . require ( \"cookieName\" )) } }","title":"Cookies Example"},{"location":"examples/http_server_examples/#error-handling-example","text":"Code to show how to handle callback exceptions and HTTP error codes. Here you can check the full test . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class CustomException : IllegalArgumentException () val server : Server = Server ( adapter ) { error ( UnsupportedOperationException :: class ) { response . headers [ \"error\" ] = it . message ?: it . javaClass . name send ( 599 , \"Unsupported\" ) } error ( IllegalArgumentException :: class ) { response . headers [ \"runtimeError\" ] = it . message ?: it . javaClass . name send ( 598 , \"Runtime\" ) } // Catching `Exception` handles any unhandled exception before (it has to be the last) error ( Exception :: class ) { send ( 500 , \"Root handler\" ) } // It is possible to execute a handler upon a given status code before returning error ( 588 ) { send ( 578 , \"588 -> 578\" ) } get ( \"/exception\" ) { throw UnsupportedOperationException ( \"error message\" ) } get ( \"/baseException\" ) { throw CustomException () } get ( \"/unhandledException\" ) { error ( \"error message\" ) } get ( \"/halt\" ) { halt ( \"halted\" ) } get ( \"/588\" ) { halt ( 588 ) } }","title":"Error Handling Example"},{"location":"examples/http_server_examples/#filters-example","text":"This example shows how to add filters before and after route execution. Here you can check the full test . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 private val users : Map < String , String > = mapOf ( \"Turing\" to \"London\" , \"Dijkstra\" to \"Rotterdam\" ) private val server : Server = Server ( adapter ) { before { attributes [ \"start\" ] = nanoTime () } before ( \"/protected/*\" ) { val authorization = request . headers [ \"Authorization\" ] ?: halt ( 401 , \"Unauthorized\" ) val credentials = authorization . removePrefix ( \"Basic \" ) val userPassword = String ( Base64 . getDecoder (). decode ( credentials )). split ( \":\" ) // Parameters set in call attributes are accessible in other filters and routes attributes [ \"username\" ] = userPassword [ 0 ] attributes [ \"password\" ] = userPassword [ 1 ] } // All matching filters are run in order unless call is halted before ( \"/protected/*\" ) { if ( users [ attributes [ \"username\" ]] != attributes [ \"password\" ] ) halt ( 403 , \"Forbidden\" ) } get ( \"/protected/hi\" ) { ok ( \"Hello ${ attributes [ \" username \" ] } !\" ) } // After filters are ran even if request was halted before after { response . headers [ \"time\" ] = nanoTime () - attributes [ \"start\" ] as Long } }","title":"Filters Example"},{"location":"examples/http_server_examples/#files-example","text":"The following code shows how to serve resources and receive files. Here you can check the full test . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 private val server : Server = Server ( adapter ) { path ( \"/static\" ) { get ( \"/files/*\" , URL ( \"classpath:assets\" )) // Serve `assets` resources on `/html/*` get ( \"/resources/*\" , File ( directory )) // Serve `test` folder on `/pub/*` } get ( \"/html/*\" , URL ( \"classpath:assets\" )) // Serve `assets` resources on `/html/*` get ( \"/pub/*\" , File ( directory )) // Serve `test` folder on `/pub/*` get ( URL ( \"classpath:public\" )) // Serve `public` resources folder on `/*` post ( \"/multipart\" ) { ok ( request . parts . keys . joinToString ( \":\" )) } post ( \"/file\" ) { val part = request . parts . values . first () val content = part . inputStream . reader (). readText () ok ( content ) } post ( \"/form\" ) { fun serializeMap ( map : Map < String , List < String >> ): List < String > = listOf ( map . map { \" ${ it . key } : ${ it . value . joinToString ( \" , \" ) } }\" }. joinToString ( \"\\n\" ) ) val queryParams = serializeMap ( queryParametersValues ) val formParams = serializeMap ( formParametersValues ) response . headersValues [ \"queryParams\" ] = queryParams response . headersValues [ \"formParams\" ] = formParams } }","title":"Files Example"},{"location":"examples/http_server_examples/#cors-example","text":"This example shows how to set up CORS for REST APIs used from the browser. Here you can check the full test . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 val server : Server = Server ( adapter ) { corsPath ( \"/default\" , CorsSettings ()) corsPath ( \"/example/org\" , CorsSettings ( \"example.org\" )) corsPath ( \"/no/credentials\" , CorsSettings ( supportCredentials = false )) corsPath ( \"/only/post\" , CorsSettings ( allowedMethods = setOf ( POST ))) corsPath ( \"/cache\" , CorsSettings ( preFlightMaxAge = 10 )) corsPath ( \"/exposed/headers\" , CorsSettings ( exposedHeaders = setOf ( \"head\" ))) corsPath ( \"/allowed/headers\" , CorsSettings ( allowedHeaders = setOf ( \"head\" ))) } private fun Router . corsPath ( path : String , settings : CorsSettings ) { path ( path ) { // CORS settings can change for different routes cors ( settings ) get ( \"/path\" ) { ok ( request . method ) } post ( \"/path\" ) { ok ( request . method ) } put ( \"/path\" ) { ok ( request . method ) } delete ( \"/path\" ) { ok ( request . method ) } get { ok ( request . method ) } post { ok ( request . method ) } put { ok ( request . method ) } delete { ok ( request . method ) } } }","title":"CORS Example"},{"location":"examples/http_server_examples/#https-example","text":"The snippet below shows how to set up your server to use HTTPS and HTTP/2. You can check the full test . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // Key store files val identity = \"hexagonkt.p12\" val trust = \"trust.p12\" // Default passwords are file name reversed val keyStorePassword = identity . reversed () val trustStorePassword = trust . reversed () // Key stores can be set as URIs to classpath resources (the triple slash is needed) val keyStore = URL ( \"classpath:ssl/ $ identity \" ) val trustStore = URL ( \"classpath:ssl/ $ trust \" ) val sslSettings = SslSettings ( keyStore = keyStore , keyStorePassword = keyStorePassword , trustStore = trustStore , trustStorePassword = trustStorePassword , clientAuth = true // Requires a valid certificate from the client (mutual TLS) ) val serverSettings = ServerSettings ( bindPort = 0 , protocol = HTTPS , // You can also use HTTP2 sslSettings = sslSettings ) val server = serve ( serverSettings , serverAdapter ) { get ( \"/hello\" ) { // We can access the certificate used by the client from the request val subjectDn = request . certificate ?. subjectDN ?. name response . headers [ \"cert\" ] = subjectDn ok ( \"Hello World!\" ) } } // We'll use the same certificate for the client (in a real scenario it would be different) val clientSettings = ClientSettings ( sslSettings = sslSettings ) // Create a HTTP client and make a HTTPS request val client = Client ( AhcAdapter (), \"https://localhost: ${ server . runtimePort } \" , clientSettings ) client . get ( \"/hello\" ). apply { logger . debug { body } // Assure the certificate received (and returned) by the server is correct assert ( headers . require ( \"cert\" ). first (). startsWith ( \"CN=hexagonkt.com\" )) assert ( body == \"Hello World!\" ) }","title":"HTTPS Example"},{"location":"examples/templates_examples/","text":"Templates Example \u00b6 Simple example to show how to process templates. full test . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 data class Book ( val author : String , val title : String ) private val books : MutableMap < Int , Book > = linkedMapOf ( 100 to Book ( \"Miguel de Cervantes\" , \"Don Quixote\" ), 101 to Book ( \"William Shakespeare\" , \"Hamlet\" ), 102 to Book ( \"Homer\" , \"The Odyssey\" ) ) val server : Server = Server ( adapter ) { post ( \"/books\" ) { // Require fails if parameter does not exists val author = queryParameters . require ( \"author\" ) val title = queryParameters . require ( \"title\" ) val id = ( books . keys . maxOrNull () ?: 0 ) + 1 books += id to Book ( author , title ) send ( 201 , id ) } get ( \"/books/{id}\" ) { val bookId = pathParameters . require ( \"id\" ). toInt () val book = books [ bookId ] if ( book != null ) // ok() is a shortcut to send(200) ok ( \"Title: ${ book . title } , Author: ${ book . author } \" ) else send ( 404 , \"Book not found\" ) } put ( \"/books/{id}\" ) { val bookId = pathParameters . require ( \"id\" ). toInt () val book = books [ bookId ] if ( book != null ) { books += bookId to book . copy ( author = queryParameters [ \"author\" ] ?: book . author , title = queryParameters [ \"title\" ] ?: book . title ) ok ( \"Book with id ' $ bookId ' updated\" ) } else { send ( 404 , \"Book not found\" ) } } delete ( \"/books/{id}\" ) { val bookId = pathParameters . require ( \"id\" ). toInt () val book = books [ bookId ] books -= bookId if ( book != null ) ok ( \"Book with id ' $ bookId ' deleted\" ) else send ( 404 , \"Book not found\" ) } // Matches path's requests with *any* HTTP method as a fallback (return 404 instead 405) any ( \"/books/{id}\" ) { send ( 405 ) } get ( \"/books\" ) { ok ( books . keys . joinToString ( \" \" , transform = Int :: toString )) } }","title":"Templates Example"},{"location":"examples/templates_examples/#templates-example","text":"Simple example to show how to process templates. full test . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 data class Book ( val author : String , val title : String ) private val books : MutableMap < Int , Book > = linkedMapOf ( 100 to Book ( \"Miguel de Cervantes\" , \"Don Quixote\" ), 101 to Book ( \"William Shakespeare\" , \"Hamlet\" ), 102 to Book ( \"Homer\" , \"The Odyssey\" ) ) val server : Server = Server ( adapter ) { post ( \"/books\" ) { // Require fails if parameter does not exists val author = queryParameters . require ( \"author\" ) val title = queryParameters . require ( \"title\" ) val id = ( books . keys . maxOrNull () ?: 0 ) + 1 books += id to Book ( author , title ) send ( 201 , id ) } get ( \"/books/{id}\" ) { val bookId = pathParameters . require ( \"id\" ). toInt () val book = books [ bookId ] if ( book != null ) // ok() is a shortcut to send(200) ok ( \"Title: ${ book . title } , Author: ${ book . author } \" ) else send ( 404 , \"Book not found\" ) } put ( \"/books/{id}\" ) { val bookId = pathParameters . require ( \"id\" ). toInt () val book = books [ bookId ] if ( book != null ) { books += bookId to book . copy ( author = queryParameters [ \"author\" ] ?: book . author , title = queryParameters [ \"title\" ] ?: book . title ) ok ( \"Book with id ' $ bookId ' updated\" ) } else { send ( 404 , \"Book not found\" ) } } delete ( \"/books/{id}\" ) { val bookId = pathParameters . require ( \"id\" ). toInt () val book = books [ bookId ] books -= bookId if ( book != null ) ok ( \"Book with id ' $ bookId ' deleted\" ) else send ( 404 , \"Book not found\" ) } // Matches path's requests with *any* HTTP method as a fallback (return 404 instead 405) any ( \"/books/{id}\" ) { send ( 405 ) } get ( \"/books\" ) { ok ( books . keys . joinToString ( \" \" , transform = Int :: toString )) } }","title":"Templates Example"},{"location":"guides/mtls/","text":"mTLS in Hexagon \u00b6 Generate sample certificates Server \u00b6 Creating the service Forcing client authentication Checking client identity Client \u00b6 Trusting server certificate Setting client certificate","title":"Mtls"},{"location":"guides/mtls/#mtls-in-hexagon","text":"Generate sample certificates","title":"mTLS in Hexagon"},{"location":"guides/mtls/#server","text":"Creating the service Forcing client authentication Checking client identity","title":"Server"},{"location":"guides/mtls/#client","text":"Trusting server certificate Setting client certificate","title":"Client"},{"location":"hexagon_core/","text":"// hexagon_core hexagon_core \u00b6 [jvm] This module holds utilities used in other libraries of the toolkit. Check the packages' documentation for more details. You can find a quick recap of the main features in the sections below. Install the Dependency \u00b6 This module is not meant to be imported directly. It will be included by using any other part of the toolkit. However, if you only want to use the utilities, logging or dependency injection (i.e.: for a desktop application), you can import it with the following code: build.gradle 1 2 3 4 5 repositories { mavenCentral () } implementation ( \"com.hexagonkt:hexagon_core:$hexagonVersion\" ) pom.xml 1 2 3 4 5 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> hexagon_core </artifactId> <version> $hexagonVersion </version> </dependency> Logger \u00b6 The following code block shows the most common use cases for the Logger class: Packages \u00b6 Name com.hexagonkt com.hexagonkt.helpers com.hexagonkt.injection com.hexagonkt.logging com.hexagonkt.logging.jul com.hexagonkt.security com.hexagonkt.serialization","title":"Core"},{"location":"hexagon_core/#hexagon_core","text":"[jvm] This module holds utilities used in other libraries of the toolkit. Check the packages' documentation for more details. You can find a quick recap of the main features in the sections below.","title":"hexagon_core"},{"location":"hexagon_core/#install-the-dependency","text":"This module is not meant to be imported directly. It will be included by using any other part of the toolkit. However, if you only want to use the utilities, logging or dependency injection (i.e.: for a desktop application), you can import it with the following code: build.gradle 1 2 3 4 5 repositories { mavenCentral () } implementation ( \"com.hexagonkt:hexagon_core:$hexagonVersion\" ) pom.xml 1 2 3 4 5 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> hexagon_core </artifactId> <version> $hexagonVersion </version> </dependency>","title":"Install the Dependency"},{"location":"hexagon_core/#logger","text":"The following code block shows the most common use cases for the Logger class:","title":"Logger"},{"location":"hexagon_core/#packages","text":"Name com.hexagonkt com.hexagonkt.helpers com.hexagonkt.injection com.hexagonkt.logging com.hexagonkt.logging.jul com.hexagonkt.security com.hexagonkt.serialization","title":"Packages"},{"location":"hexagon_core/hexagon_core/","text":"Module hexagon_core \u00b6 This module holds utilities used in other libraries of the toolkit. Check the packages' documentation for more details. You can find a quick recap of the main features in the sections below. Install the Dependency \u00b6 This module is not meant to be imported directly. It will be included by using any other part of the toolkit. However, if you only want to use the utilities, logging or dependency injection (i.e.: for a desktop application), you can import it with the following code: build.gradle 1 2 3 4 5 repositories { mavenCentral () } implementation ( \"com.hexagonkt:hexagon_core:$hexagonVersion\" ) pom.xml 1 2 3 4 5 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> hexagon_core </artifactId> <version> $hexagonVersion </version> </dependency> Logger \u00b6 The following code block shows the most common use cases for the Logger class: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 val classLogger : Logger = Logger ( Runtime :: class ) // Logger for the `Runtime` class val instanceLogger : Logger = Logger ( this :: class ) // Logger for this instance's class logger . info { \"\"\" You can add a quick log without declaring a Logger with 'com.hexagonkt.helpers.logger'. It is a default logger created for the System class (same as `Logger(System::class)`). \"\"\" } classLogger . trace { \"Message only evaluated if trace enabled at ${ Jvm . id } \" } classLogger . debug { \"Message only evaluated if debug enabled at ${ Jvm . id } \" } classLogger . warn { \"Message only evaluated if warn enabled at ${ Jvm . id } \" } classLogger . info { \"Message only evaluated if info enabled at ${ Jvm . id } \" } val exception = IllegalStateException ( \"Exception\" ) classLogger . warn ( exception ) { \"Warning with exception\" } classLogger . error ( exception ) { \"Error message with exception\" } classLogger . error { \"Error without an exception\" } classLogger . time ( \"Logs the time used to run the following block of code\" ) { val message = \"Block of code to be timed\" assert ( message . isNotBlank ()) } instanceLogger . flare { \"Prints a log that stands out for ease searching\" } By default, Hexagon uses the Java Util Logging logging library, you can use any of its implementations by just adding another logging adapter as a dependency. Below you can see some alternatives: Logback SLF4J JUL TODO Add LoggingManager examples for changing logging level Dependency injection \u00b6 You can take advantage of dependency injection using the InjectionManager object. The implementation is a map of classes (with an optional tag) to provider functions (in essence: Map<KClass<*>, () -> Any> ). It is a very simple, yet complete, DI implementation. You can bind supplier functions or objects to classes. If a class is already bound, later calls to bind* methods are ignored. However, you can use the forceBind* methods if you need to override a binding (in tests for example). Check this sample to bind constructor functions or objects to classes, and inject them later: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // Bind classes to functions (create a different instance with each `inject` call) InjectionManager . bind < Date > { java . sql . Date ( System . currentTimeMillis ()) } // Bind classes to objects (returns the same instance for all `inject` calls) InjectionManager . bind < String > ( \"STR\" ) // You can use labels to inject different instances InjectionManager . bind < String > ( \"Hexagon\" , \"toolkit\" ) InjectionManager . bind < Date > ( \"+1h\" ) { java . sql . Date ( System . currentTimeMillis () + 3 _600_000 ) } val currentSqlDate = InjectionManager . inject < Date > () val currentSqlDateInferredType : Date = InjectionManager . inject () // Inject different values for a class using tags (can be any type, not only string) val nextHourSqlDate : Date = InjectionManager . inject ( \"+1h\" ) val nextHourSqlDateInferredType : Date = InjectionManager . inject ( \"+1h\" ) // Injecting classes bound to objects return always the same instance val defaultString = InjectionManager . inject < String > () val taggedString : String = InjectionManager . inject ( \"toolkit\" ) // Overriding previously bound classes is not allowed (ignored) InjectionManager . bind < String > ( \"STR Ignored\" ) val ignoredBinding = InjectionManager . inject < String > () // You can overwrite previously bound classes using `forceBind*` methods forceBind ( String :: class , \"STR Overridden\" ) val overriddenBinding = InjectionManager . inject < String > () Info Dependency Injection is not required by the toolkit. All classes and methods have versions receiving all of their dependencies, so you can use them instead relying on injection (or use another DI library of your choice). Serialization \u00b6 The core module has utilities to serialize/parse data classes to JSON and YAML. Read the following snippet for details: 1 2 3 4 5 6 7 8 SerializationManager . formats = linkedSetOf ( Json ) // Loads JSON format (using it as default) val jason = Person ( \"Jason\" , \"Jackson\" , LocalDate . of ( 1989 , 12 , 31 )) val jasonJson = jason . serialize ( Json ) // Can also be Yaml or an string: \"application/json\" val parsedJason = jasonJson . parse ( Person :: class ) // Uses default format (JSON) assert ( jason == parsedJason ) assert ( jason !== parsedJason ) Package com.hexagonkt.helpers \u00b6 JVM information, a logger class and other useful utilities. Package com.hexagonkt.injection \u00b6 Utilities to bind classes to creation closures or instances, and inject instances of those classes later. Package com.hexagonkt.logging \u00b6 Provides a logging management capabilities abstracting the application from logging libraries. Package com.hexagonkt.serialization \u00b6 Parse/serialize data in different formats to class instances.","title":"Core"},{"location":"hexagon_core/hexagon_core/#module-hexagon_core","text":"This module holds utilities used in other libraries of the toolkit. Check the packages' documentation for more details. You can find a quick recap of the main features in the sections below.","title":"Module hexagon_core"},{"location":"hexagon_core/hexagon_core/#install-the-dependency","text":"This module is not meant to be imported directly. It will be included by using any other part of the toolkit. However, if you only want to use the utilities, logging or dependency injection (i.e.: for a desktop application), you can import it with the following code: build.gradle 1 2 3 4 5 repositories { mavenCentral () } implementation ( \"com.hexagonkt:hexagon_core:$hexagonVersion\" ) pom.xml 1 2 3 4 5 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> hexagon_core </artifactId> <version> $hexagonVersion </version> </dependency>","title":"Install the Dependency"},{"location":"hexagon_core/hexagon_core/#logger","text":"The following code block shows the most common use cases for the Logger class: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 val classLogger : Logger = Logger ( Runtime :: class ) // Logger for the `Runtime` class val instanceLogger : Logger = Logger ( this :: class ) // Logger for this instance's class logger . info { \"\"\" You can add a quick log without declaring a Logger with 'com.hexagonkt.helpers.logger'. It is a default logger created for the System class (same as `Logger(System::class)`). \"\"\" } classLogger . trace { \"Message only evaluated if trace enabled at ${ Jvm . id } \" } classLogger . debug { \"Message only evaluated if debug enabled at ${ Jvm . id } \" } classLogger . warn { \"Message only evaluated if warn enabled at ${ Jvm . id } \" } classLogger . info { \"Message only evaluated if info enabled at ${ Jvm . id } \" } val exception = IllegalStateException ( \"Exception\" ) classLogger . warn ( exception ) { \"Warning with exception\" } classLogger . error ( exception ) { \"Error message with exception\" } classLogger . error { \"Error without an exception\" } classLogger . time ( \"Logs the time used to run the following block of code\" ) { val message = \"Block of code to be timed\" assert ( message . isNotBlank ()) } instanceLogger . flare { \"Prints a log that stands out for ease searching\" } By default, Hexagon uses the Java Util Logging logging library, you can use any of its implementations by just adding another logging adapter as a dependency. Below you can see some alternatives: Logback SLF4J JUL TODO Add LoggingManager examples for changing logging level","title":"Logger"},{"location":"hexagon_core/hexagon_core/#dependency-injection","text":"You can take advantage of dependency injection using the InjectionManager object. The implementation is a map of classes (with an optional tag) to provider functions (in essence: Map<KClass<*>, () -> Any> ). It is a very simple, yet complete, DI implementation. You can bind supplier functions or objects to classes. If a class is already bound, later calls to bind* methods are ignored. However, you can use the forceBind* methods if you need to override a binding (in tests for example). Check this sample to bind constructor functions or objects to classes, and inject them later: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // Bind classes to functions (create a different instance with each `inject` call) InjectionManager . bind < Date > { java . sql . Date ( System . currentTimeMillis ()) } // Bind classes to objects (returns the same instance for all `inject` calls) InjectionManager . bind < String > ( \"STR\" ) // You can use labels to inject different instances InjectionManager . bind < String > ( \"Hexagon\" , \"toolkit\" ) InjectionManager . bind < Date > ( \"+1h\" ) { java . sql . Date ( System . currentTimeMillis () + 3 _600_000 ) } val currentSqlDate = InjectionManager . inject < Date > () val currentSqlDateInferredType : Date = InjectionManager . inject () // Inject different values for a class using tags (can be any type, not only string) val nextHourSqlDate : Date = InjectionManager . inject ( \"+1h\" ) val nextHourSqlDateInferredType : Date = InjectionManager . inject ( \"+1h\" ) // Injecting classes bound to objects return always the same instance val defaultString = InjectionManager . inject < String > () val taggedString : String = InjectionManager . inject ( \"toolkit\" ) // Overriding previously bound classes is not allowed (ignored) InjectionManager . bind < String > ( \"STR Ignored\" ) val ignoredBinding = InjectionManager . inject < String > () // You can overwrite previously bound classes using `forceBind*` methods forceBind ( String :: class , \"STR Overridden\" ) val overriddenBinding = InjectionManager . inject < String > () Info Dependency Injection is not required by the toolkit. All classes and methods have versions receiving all of their dependencies, so you can use them instead relying on injection (or use another DI library of your choice).","title":"Dependency injection"},{"location":"hexagon_core/hexagon_core/#serialization","text":"The core module has utilities to serialize/parse data classes to JSON and YAML. Read the following snippet for details: 1 2 3 4 5 6 7 8 SerializationManager . formats = linkedSetOf ( Json ) // Loads JSON format (using it as default) val jason = Person ( \"Jason\" , \"Jackson\" , LocalDate . of ( 1989 , 12 , 31 )) val jasonJson = jason . serialize ( Json ) // Can also be Yaml or an string: \"application/json\" val parsedJason = jasonJson . parse ( Person :: class ) // Uses default format (JSON) assert ( jason == parsedJason ) assert ( jason !== parsedJason )","title":"Serialization"},{"location":"hexagon_core/hexagon_core/#package-comhexagonkthelpers","text":"JVM information, a logger class and other useful utilities.","title":"Package com.hexagonkt.helpers"},{"location":"hexagon_core/hexagon_core/#package-comhexagonktinjection","text":"Utilities to bind classes to creation closures or instances, and inject instances of those classes later.","title":"Package com.hexagonkt.injection"},{"location":"hexagon_core/hexagon_core/#package-comhexagonktlogging","text":"Provides a logging management capabilities abstracting the application from logging libraries.","title":"Package com.hexagonkt.logging"},{"location":"hexagon_core/hexagon_core/#package-comhexagonktserialization","text":"Parse/serialize data in different formats to class instances.","title":"Package com.hexagonkt.serialization"},{"location":"hexagon_core/com.hexagonkt/","text":"// hexagon_core / com.hexagonkt Package com.hexagonkt \u00b6 Types \u00b6 Name Summary ClasspathHandler [jvm] Content object ClasspathHandler : URLStreamHandler ResourceNotFoundException [jvm] Content class ResourceNotFoundException ( message : String ) : IOException","title":"Index"},{"location":"hexagon_core/com.hexagonkt/#package-comhexagonkt","text":"","title":"Package com.hexagonkt"},{"location":"hexagon_core/com.hexagonkt/#types","text":"Name Summary ClasspathHandler [jvm] Content object ClasspathHandler : URLStreamHandler ResourceNotFoundException [jvm] Content class ResourceNotFoundException ( message : String ) : IOException","title":"Types"},{"location":"hexagon_core/com.hexagonkt/-classpath-handler/","text":"// hexagon_core / com.hexagonkt / ClasspathHandler ClasspathHandler \u00b6 [jvm] object ClasspathHandler : URLStreamHandler Functions \u00b6 Name Summary createURLStreamHandler [jvm] Content fun createURLStreamHandler (protocol: String ): URLStreamHandler ? equals [jvm] Content open fun equals (p0: URL , p1: URL ): Boolean getDefaultPort [jvm] Content open fun getDefaultPort (): Int getHostAddress [jvm] Content open fun getHostAddress (p0: URL ): InetAddress hashCode [jvm] Content open fun hashCode (p0: URL ): Int hostsEqual [jvm] Content open fun hostsEqual (p0: URL , p1: URL ): Boolean openConnection [jvm] Content open fun openConnection (p0: URL , p1: Proxy ): URLConnection parseURL [jvm] Content open fun parseURL (p0: URL , p1: String , p2: Int , p3: Int ) registerHandler [jvm] Content fun registerHandler () sameFile [jvm] Content open fun sameFile (p0: URL , p1: URL ): Boolean setURL [jvm] Content open fun setURL ( ~ p0 ~ :~~ URL , p1~~ :~~ String , p2~~ :~~ String , p3~~ :~~ Int , p4~~ :~~ String , p5~~ :~~ String ) open fun setURL (p0: URL , p1: String , p2: String , p3: Int , p4: String , p5: String , p6: String , p7: String , p8: String ) toExternalForm [jvm] Content open fun toExternalForm (p0: URL ): String","title":"Index"},{"location":"hexagon_core/com.hexagonkt/-classpath-handler/#classpathhandler","text":"[jvm] object ClasspathHandler : URLStreamHandler","title":"ClasspathHandler"},{"location":"hexagon_core/com.hexagonkt/-classpath-handler/#functions","text":"Name Summary createURLStreamHandler [jvm] Content fun createURLStreamHandler (protocol: String ): URLStreamHandler ? equals [jvm] Content open fun equals (p0: URL , p1: URL ): Boolean getDefaultPort [jvm] Content open fun getDefaultPort (): Int getHostAddress [jvm] Content open fun getHostAddress (p0: URL ): InetAddress hashCode [jvm] Content open fun hashCode (p0: URL ): Int hostsEqual [jvm] Content open fun hostsEqual (p0: URL , p1: URL ): Boolean openConnection [jvm] Content open fun openConnection (p0: URL , p1: Proxy ): URLConnection parseURL [jvm] Content open fun parseURL (p0: URL , p1: String , p2: Int , p3: Int ) registerHandler [jvm] Content fun registerHandler () sameFile [jvm] Content open fun sameFile (p0: URL , p1: URL ): Boolean setURL [jvm] Content open fun setURL ( ~ p0 ~ :~~ URL , p1~~ :~~ String , p2~~ :~~ String , p3~~ :~~ Int , p4~~ :~~ String , p5~~ :~~ String ) open fun setURL (p0: URL , p1: String , p2: String , p3: Int , p4: String , p5: String , p6: String , p7: String , p8: String ) toExternalForm [jvm] Content open fun toExternalForm (p0: URL ): String","title":"Functions"},{"location":"hexagon_core/com.hexagonkt/-classpath-handler/create-u-r-l-stream-handler/","text":"// hexagon_core / com.hexagonkt / ClasspathHandler / createURLStreamHandler createURLStreamHandler \u00b6 [jvm] Content fun createURLStreamHandler (protocol: String ): URLStreamHandler ?","title":"Create u r l stream handler"},{"location":"hexagon_core/com.hexagonkt/-classpath-handler/create-u-r-l-stream-handler/#createurlstreamhandler","text":"[jvm] Content fun createURLStreamHandler (protocol: String ): URLStreamHandler ?","title":"createURLStreamHandler"},{"location":"hexagon_core/com.hexagonkt/-classpath-handler/register-handler/","text":"// hexagon_core / com.hexagonkt / ClasspathHandler / registerHandler registerHandler \u00b6 [jvm] Content fun registerHandler ()","title":"Register handler"},{"location":"hexagon_core/com.hexagonkt/-classpath-handler/register-handler/#registerhandler","text":"[jvm] Content fun registerHandler ()","title":"registerHandler"},{"location":"hexagon_core/com.hexagonkt/-resource-not-found-exception/","text":"// hexagon_core / com.hexagonkt / ResourceNotFoundException ResourceNotFoundException \u00b6 [jvm] class ResourceNotFoundException ( message : String ) : IOException Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"hexagon_core/com.hexagonkt/-resource-not-found-exception/#resourcenotfoundexception","text":"[jvm] class ResourceNotFoundException ( message : String ) : IOException","title":"ResourceNotFoundException"},{"location":"hexagon_core/com.hexagonkt/-resource-not-found-exception/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"hexagon_core/com.hexagonkt/-resource-not-found-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"hexagon_core/com.hexagonkt/-resource-not-found-exception/-resource-not-found-exception/","text":"// hexagon_core / com.hexagonkt / ResourceNotFoundException / ResourceNotFoundException ResourceNotFoundException \u00b6 [jvm] Content fun ResourceNotFoundException (message: String )","title":" resource not found exception"},{"location":"hexagon_core/com.hexagonkt/-resource-not-found-exception/-resource-not-found-exception/#resourcenotfoundexception","text":"[jvm] Content fun ResourceNotFoundException (message: String )","title":"ResourceNotFoundException"},{"location":"hexagon_core/com.hexagonkt.helpers/","text":"// hexagon_core / com.hexagonkt.helpers Package com.hexagonkt.helpers \u00b6 [jvm] JVM information, a logger class and other useful utilities. Types \u00b6 Name Summary Ansi [jvm] Content object Ansi More info Constants for console formatting with ANSI codes. CodedException [jvm] Content class CodedException ( code : Int , message : String , cause : Throwable ?) : RuntimeException More info Exception with a numeric code. Jvm [jvm] Content object Jvm More info Object with utilities to gather information about the running JVM. MultipleException [jvm] Content class MultipleException ( causes : List < Throwable >, message : String ) : RuntimeException More info Exception with a list of causes. Functions \u00b6 Name Summary banner [jvm] Content fun String . banner (bannerDelimiter: String = \"*\"): String More info Format the string as a banner with a delimiter above and below text. bytes [jvm] Content fun UUID . bytes (): ByteArray More info TODO . camelToSnake [jvm] Content fun String . camelToSnake (): String More info Transform the target string from camel case to snake case. check [jvm] Content fun check (message: String = \"Multiple exceptions\", vararg blocks: () -> Unit ) More info TODO . ensureSize [jvm] Content fun < Z > Collection < Z >. ensureSize (count: IntRange ): Collection < Z > More info TODO . exec [jvm] Content fun String . exec (workingDirectory: File = File(System.getProperty(\"user.dir\")), timeout: Long = Long.MAX_VALUE, fail: Boolean = false): String More info TODO Add use case and example in documentation. [jvm] Content fun List < String >. exec (workingDirectory: File = File(System.getProperty(\"user.dir\")), timeout: Long = Long.MAX_VALUE, fail: Boolean = false): String More info TODO . filter [jvm] Content fun String . filter (prefix: String , suffix: String , vararg parameters: Pair < String , String >): String More info TODO . filterEmpty [jvm] Content fun < V > List < V ?>. filterEmpty (): List < V > fun < K , V > Map < K , V ?>. filterEmpty (): Map < K , V > More info TODO . filterStackTrace [jvm] Content fun Throwable . filterStackTrace (prefix: String ): Array StackTraceElement > More info Return the stack trace array of the frames that starts with the given prefix. filterVars [jvm] Content fun String . filterVars (vararg parameters: Pair < , >): String More info TODO . [jvm] Content fun String . filterVars (parameters: Map < , >): String More info Filter the target string substituting each key by its value. findGroups [jvm] Content fun Regex . findGroups (text: String ): List < MatchGroup > More info TODO . freePort [jvm] Content fun freePort (): Int More info Return a random free port (not used by any other local process). get [jvm] Content operator fun Map < , >. get (vararg keys: Any ): Any ? More info TODO . globToRegex [jvm] Content fun String . globToRegex (): Regex More info TODO . isPortOpened [jvm] Content fun isPortOpened (port: Int ): Boolean More info Check if a port is already opened. notEmpty [jvm] Content fun < V > notEmpty (value: V ?): Boolean More info TODO . prependIndent [jvm] Content fun String . prependIndent (count: Int = 4, pad: String = \" \"): String More info TODO . println [jvm] Content fun < T > T . println (prefix: String = \"\"): T More info Print receiver to stdout. require [jvm] Content fun < K , V > Map < K , V >. require (name: K ): V More info TODO . requireKeys [jvm] Content fun < T : Any > Map < , >. requireKeys (vararg name: Any ): T More info TODO . retry [jvm] Content fun < T > retry (times: Int , delay: Long , block: () -> T ): T More info Execute a lambda until no exception is thrown or a number of times is reached. snakeToCamel [jvm] Content fun String . snakeToCamel (): String More info Transform the target string from snake case to camel case. stripAccents [jvm] Content fun String . stripAccents (): String More info TODO . toBase64 [jvm] Content fun UUID . toBase64 (): String More info TODO . toDate [jvm] Content fun LocalDate . toDate (): Date More info Convert a local date to a date. [jvm] Content fun LocalDateTime . toDate (): Date More info Convert a local date time to a date. [jvm] Content fun ZonedDateTime . toDate (): Date More info Convert a zoned date time to a date. toLocalDate [jvm] Content fun Date . toLocalDate (): LocalDate More info Convert a date to a local date. [jvm] Content fun Int . toLocalDate (): LocalDate More info Parse a date from a formatted integer with this format: YYYYMMDD. toLocalDateTime [jvm] Content fun Date . toLocalDateTime (): LocalDateTime More info Convert a date to a local date time. [jvm] Content fun Long . toLocalDateTime (): LocalDateTime More info Parse a date time from a formatted number with this format: YYYYMMDDHHmmss. toLocalTime [jvm] Content fun Int . toLocalTime (): LocalTime More info Parse a time from a formatted integer with this format: HHmmssSSS. toNumber [jvm] Content fun LocalDate . toNumber (): Int More info Convert a date to an integer with the following format: YYYYMMDD. [jvm] Content fun LocalDateTime . toNumber (): Long More info Convert a date time to a number with the following format: YYYYMMDDHHmmss. [jvm] Content fun LocalTime . toNumber (): Int More info Convert a time to an integer with the following format: HHmmssSSS. toStream [jvm] Content fun String . toStream (): InputStream More info TODO . toText [jvm] Content fun Throwable . toText (prefix: String = \"\"): String More info Return this throwable as a text. trace [jvm] Content fun < T > T . trace (prefix: String = \"\"): T More info TODO . utf8 [jvm] Content fun utf8 (vararg bytes: Int ): String More info TODO . uuid [jvm] Content fun uuid (bytes: ByteArray ): UUID fun uuid (text: String ): UUID More info TODO . withZone [jvm] Content fun LocalDateTime . withZone (zoneId: ZoneId = Jvm.timeZone.toZoneId()): ZonedDateTime More info Return the date time in a given time zone for a local date time. Properties \u00b6 Name Summary eol [jvm] val eol : String Runtime specific end of line. fail [jvm] val fail : Nothing Syntax sugar to throw errors. logger [jvm] val logger : Logger Default logger for when you feel too lazy to declare one.","title":"Index"},{"location":"hexagon_core/com.hexagonkt.helpers/#package-comhexagonkthelpers","text":"[jvm] JVM information, a logger class and other useful utilities.","title":"Package com.hexagonkt.helpers"},{"location":"hexagon_core/com.hexagonkt.helpers/#types","text":"Name Summary Ansi [jvm] Content object Ansi More info Constants for console formatting with ANSI codes. CodedException [jvm] Content class CodedException ( code : Int , message : String , cause : Throwable ?) : RuntimeException More info Exception with a numeric code. Jvm [jvm] Content object Jvm More info Object with utilities to gather information about the running JVM. MultipleException [jvm] Content class MultipleException ( causes : List < Throwable >, message : String ) : RuntimeException More info Exception with a list of causes.","title":"Types"},{"location":"hexagon_core/com.hexagonkt.helpers/#functions","text":"Name Summary banner [jvm] Content fun String . banner (bannerDelimiter: String = \"*\"): String More info Format the string as a banner with a delimiter above and below text. bytes [jvm] Content fun UUID . bytes (): ByteArray More info TODO . camelToSnake [jvm] Content fun String . camelToSnake (): String More info Transform the target string from camel case to snake case. check [jvm] Content fun check (message: String = \"Multiple exceptions\", vararg blocks: () -> Unit ) More info TODO . ensureSize [jvm] Content fun < Z > Collection < Z >. ensureSize (count: IntRange ): Collection < Z > More info TODO . exec [jvm] Content fun String . exec (workingDirectory: File = File(System.getProperty(\"user.dir\")), timeout: Long = Long.MAX_VALUE, fail: Boolean = false): String More info TODO Add use case and example in documentation. [jvm] Content fun List < String >. exec (workingDirectory: File = File(System.getProperty(\"user.dir\")), timeout: Long = Long.MAX_VALUE, fail: Boolean = false): String More info TODO . filter [jvm] Content fun String . filter (prefix: String , suffix: String , vararg parameters: Pair < String , String >): String More info TODO . filterEmpty [jvm] Content fun < V > List < V ?>. filterEmpty (): List < V > fun < K , V > Map < K , V ?>. filterEmpty (): Map < K , V > More info TODO . filterStackTrace [jvm] Content fun Throwable . filterStackTrace (prefix: String ): Array StackTraceElement > More info Return the stack trace array of the frames that starts with the given prefix. filterVars [jvm] Content fun String . filterVars (vararg parameters: Pair < , >): String More info TODO . [jvm] Content fun String . filterVars (parameters: Map < , >): String More info Filter the target string substituting each key by its value. findGroups [jvm] Content fun Regex . findGroups (text: String ): List < MatchGroup > More info TODO . freePort [jvm] Content fun freePort (): Int More info Return a random free port (not used by any other local process). get [jvm] Content operator fun Map < , >. get (vararg keys: Any ): Any ? More info TODO . globToRegex [jvm] Content fun String . globToRegex (): Regex More info TODO . isPortOpened [jvm] Content fun isPortOpened (port: Int ): Boolean More info Check if a port is already opened. notEmpty [jvm] Content fun < V > notEmpty (value: V ?): Boolean More info TODO . prependIndent [jvm] Content fun String . prependIndent (count: Int = 4, pad: String = \" \"): String More info TODO . println [jvm] Content fun < T > T . println (prefix: String = \"\"): T More info Print receiver to stdout. require [jvm] Content fun < K , V > Map < K , V >. require (name: K ): V More info TODO . requireKeys [jvm] Content fun < T : Any > Map < , >. requireKeys (vararg name: Any ): T More info TODO . retry [jvm] Content fun < T > retry (times: Int , delay: Long , block: () -> T ): T More info Execute a lambda until no exception is thrown or a number of times is reached. snakeToCamel [jvm] Content fun String . snakeToCamel (): String More info Transform the target string from snake case to camel case. stripAccents [jvm] Content fun String . stripAccents (): String More info TODO . toBase64 [jvm] Content fun UUID . toBase64 (): String More info TODO . toDate [jvm] Content fun LocalDate . toDate (): Date More info Convert a local date to a date. [jvm] Content fun LocalDateTime . toDate (): Date More info Convert a local date time to a date. [jvm] Content fun ZonedDateTime . toDate (): Date More info Convert a zoned date time to a date. toLocalDate [jvm] Content fun Date . toLocalDate (): LocalDate More info Convert a date to a local date. [jvm] Content fun Int . toLocalDate (): LocalDate More info Parse a date from a formatted integer with this format: YYYYMMDD. toLocalDateTime [jvm] Content fun Date . toLocalDateTime (): LocalDateTime More info Convert a date to a local date time. [jvm] Content fun Long . toLocalDateTime (): LocalDateTime More info Parse a date time from a formatted number with this format: YYYYMMDDHHmmss. toLocalTime [jvm] Content fun Int . toLocalTime (): LocalTime More info Parse a time from a formatted integer with this format: HHmmssSSS. toNumber [jvm] Content fun LocalDate . toNumber (): Int More info Convert a date to an integer with the following format: YYYYMMDD. [jvm] Content fun LocalDateTime . toNumber (): Long More info Convert a date time to a number with the following format: YYYYMMDDHHmmss. [jvm] Content fun LocalTime . toNumber (): Int More info Convert a time to an integer with the following format: HHmmssSSS. toStream [jvm] Content fun String . toStream (): InputStream More info TODO . toText [jvm] Content fun Throwable . toText (prefix: String = \"\"): String More info Return this throwable as a text. trace [jvm] Content fun < T > T . trace (prefix: String = \"\"): T More info TODO . utf8 [jvm] Content fun utf8 (vararg bytes: Int ): String More info TODO . uuid [jvm] Content fun uuid (bytes: ByteArray ): UUID fun uuid (text: String ): UUID More info TODO . withZone [jvm] Content fun LocalDateTime . withZone (zoneId: ZoneId = Jvm.timeZone.toZoneId()): ZonedDateTime More info Return the date time in a given time zone for a local date time.","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.helpers/#properties","text":"Name Summary eol [jvm] val eol : String Runtime specific end of line. fail [jvm] val fail : Nothing Syntax sugar to throw errors. logger [jvm] val logger : Logger Default logger for when you feel too lazy to declare one.","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.helpers/banner/","text":"// hexagon_core / com.hexagonkt.helpers / banner banner \u00b6 [jvm] Content fun String . banner (bannerDelimiter: String = \"*\"): String More info Format the string as a banner with a delimiter above and below text. The character used to render the delimiter is defined. Parameters \u00b6 jvm bannerDelimiter Delimiter char for banners.","title":"Banner"},{"location":"hexagon_core/com.hexagonkt.helpers/banner/#banner","text":"[jvm] Content fun String . banner (bannerDelimiter: String = \"*\"): String More info Format the string as a banner with a delimiter above and below text. The character used to render the delimiter is defined.","title":"banner"},{"location":"hexagon_core/com.hexagonkt.helpers/banner/#parameters","text":"jvm bannerDelimiter Delimiter char for banners.","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/bytes/","text":"// hexagon_core / com.hexagonkt.helpers / bytes bytes \u00b6 [jvm] Content fun UUID . bytes (): ByteArray More info TODO . Return \u00b6 .","title":"Bytes"},{"location":"hexagon_core/com.hexagonkt.helpers/bytes/#bytes","text":"[jvm] Content fun UUID . bytes (): ByteArray More info TODO .","title":"bytes"},{"location":"hexagon_core/com.hexagonkt.helpers/bytes/#return","text":".","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/camel-to-snake/","text":"// hexagon_core / com.hexagonkt.helpers / camelToSnake camelToSnake \u00b6 [jvm] Content fun String . camelToSnake (): String More info Transform the target string from camel case to snake case.","title":"Camel to snake"},{"location":"hexagon_core/com.hexagonkt.helpers/camel-to-snake/#cameltosnake","text":"[jvm] Content fun String . camelToSnake (): String More info Transform the target string from camel case to snake case.","title":"camelToSnake"},{"location":"hexagon_core/com.hexagonkt.helpers/check/","text":"// hexagon_core / com.hexagonkt.helpers / check check \u00b6 [jvm] Content fun check (message: String = \"Multiple exceptions\", vararg blocks: () -> Unit ) More info TODO .","title":"Check"},{"location":"hexagon_core/com.hexagonkt.helpers/check/#check","text":"[jvm] Content fun check (message: String = \"Multiple exceptions\", vararg blocks: () -> Unit ) More info TODO .","title":"check"},{"location":"hexagon_core/com.hexagonkt.helpers/ensure-size/","text":"// hexagon_core / com.hexagonkt.helpers / ensureSize ensureSize \u00b6 [jvm] Content fun < Z > Collection < Z >. ensureSize (count: IntRange ): Collection < Z > More info TODO . Return \u00b6 . Parameters \u00b6 jvm . count .","title":"Ensure size"},{"location":"hexagon_core/com.hexagonkt.helpers/ensure-size/#ensuresize","text":"[jvm] Content fun < Z > Collection < Z >. ensureSize (count: IntRange ): Collection < Z > More info TODO .","title":"ensureSize"},{"location":"hexagon_core/com.hexagonkt.helpers/ensure-size/#return","text":".","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/ensure-size/#parameters","text":"jvm . count .","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/eol/","text":"// hexagon_core / com.hexagonkt.helpers / eol eol \u00b6 [jvm] Content val eol : String More info Runtime specific end of line.","title":"Eol"},{"location":"hexagon_core/com.hexagonkt.helpers/eol/#eol","text":"[jvm] Content val eol : String More info Runtime specific end of line.","title":"eol"},{"location":"hexagon_core/com.hexagonkt.helpers/exec/","text":"// hexagon_core / com.hexagonkt.helpers / exec exec \u00b6 [jvm] Content fun List < String >. exec (workingDirectory: File = File(System.getProperty(\"user.dir\")), timeout: Long = Long.MAX_VALUE, fail: Boolean = false): String More info TODO . TODO Assure JVM closes properly after process execution (dispose process resources, etc.) [jvm] Content fun String . exec (workingDirectory: File = File(System.getProperty(\"user.dir\")), timeout: Long = Long.MAX_VALUE, fail: Boolean = false): String More info TODO Add use case and example in documentation. TODO Support multiple words parameters by processing \" and ' Run the receiver's text as a process in the host operating system. The command can have multiple lines and may or may not contain the shell continuation string (\\n). Return \u00b6 The output of the command. Parameters \u00b6 jvm String holding the command to be executed. workingDirectory Directory on which the process will be executed. Defaults to current directory. timeout Maximum number of seconds allowed for process execution. Defaults to the maximum long value. It must be greater than zero. fail If true Raise an exception if the result code is different than zero. The default value is false. Throws \u00b6 com.hexagonkt.helpers.CodedException Thrown if the process return an error code (the actual code is passed inside CodedException.code and the command output is set at CodedException.message . kotlin.IllegalStateException If the command doesn't end within the allowed time or the command string is blank, an exception will be thrown.","title":"Exec"},{"location":"hexagon_core/com.hexagonkt.helpers/exec/#exec","text":"[jvm] Content fun List < String >. exec (workingDirectory: File = File(System.getProperty(\"user.dir\")), timeout: Long = Long.MAX_VALUE, fail: Boolean = false): String More info TODO . TODO Assure JVM closes properly after process execution (dispose process resources, etc.) [jvm] Content fun String . exec (workingDirectory: File = File(System.getProperty(\"user.dir\")), timeout: Long = Long.MAX_VALUE, fail: Boolean = false): String More info TODO Add use case and example in documentation. TODO Support multiple words parameters by processing \" and ' Run the receiver's text as a process in the host operating system. The command can have multiple lines and may or may not contain the shell continuation string (\\n).","title":"exec"},{"location":"hexagon_core/com.hexagonkt.helpers/exec/#return","text":"The output of the command.","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/exec/#parameters","text":"jvm String holding the command to be executed. workingDirectory Directory on which the process will be executed. Defaults to current directory. timeout Maximum number of seconds allowed for process execution. Defaults to the maximum long value. It must be greater than zero. fail If true Raise an exception if the result code is different than zero. The default value is false.","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/exec/#throws","text":"com.hexagonkt.helpers.CodedException Thrown if the process return an error code (the actual code is passed inside CodedException.code and the command output is set at CodedException.message . kotlin.IllegalStateException If the command doesn't end within the allowed time or the command string is blank, an exception will be thrown.","title":"Throws"},{"location":"hexagon_core/com.hexagonkt.helpers/fail/","text":"// hexagon_core / com.hexagonkt.helpers / fail fail \u00b6 [jvm] Content val fail : Nothing More info Syntax sugar to throw errors.","title":"Fail"},{"location":"hexagon_core/com.hexagonkt.helpers/fail/#fail","text":"[jvm] Content val fail : Nothing More info Syntax sugar to throw errors.","title":"fail"},{"location":"hexagon_core/com.hexagonkt.helpers/filter-empty/","text":"// hexagon_core / com.hexagonkt.helpers / filterEmpty filterEmpty \u00b6 [jvm] Content fun < K , V > Map < K , V ?>. filterEmpty (): Map < K , V > fun < V > List < V ?>. filterEmpty (): List < V > More info TODO . Return \u00b6 .","title":"Filter empty"},{"location":"hexagon_core/com.hexagonkt.helpers/filter-empty/#filterempty","text":"[jvm] Content fun < K , V > Map < K , V ?>. filterEmpty (): Map < K , V > fun < V > List < V ?>. filterEmpty (): List < V > More info TODO .","title":"filterEmpty"},{"location":"hexagon_core/com.hexagonkt.helpers/filter-empty/#return","text":".","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/filter-stack-trace/","text":"// hexagon_core / com.hexagonkt.helpers / filterStackTrace filterStackTrace \u00b6 [jvm] Content fun Throwable . filterStackTrace (prefix: String ): Array StackTraceElement > More info Return the stack trace array of the frames that starts with the given prefix. Return \u00b6 Array with the frames of the throwable whose classes start with the given prefix. Parameters \u00b6 jvm Throwable which stack trace will be filtered. prefix Prefix used to filter stack trace elements (applied to class names).","title":"Filter stack trace"},{"location":"hexagon_core/com.hexagonkt.helpers/filter-stack-trace/#filterstacktrace","text":"[jvm] Content fun Throwable . filterStackTrace (prefix: String ): Array StackTraceElement > More info Return the stack trace array of the frames that starts with the given prefix.","title":"filterStackTrace"},{"location":"hexagon_core/com.hexagonkt.helpers/filter-stack-trace/#return","text":"Array with the frames of the throwable whose classes start with the given prefix.","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/filter-stack-trace/#parameters","text":"jvm Throwable which stack trace will be filtered. prefix Prefix used to filter stack trace elements (applied to class names).","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/filter-vars/","text":"// hexagon_core / com.hexagonkt.helpers / filterVars filterVars \u00b6 [jvm] Content fun String . filterVars (parameters: Map < , >): String More info Filter the target string substituting each key by its value. The keys format is: #{key} and all occurrences are replaced by the supplied value. If a variable does not have a parameter, it is left as it is. Return \u00b6 The filtered text or the same string if no values are passed or found in the text. Samples \u00b6 [jvm] import org.junit.jupiter.api.Test fun main() { //sampleStart val template = \"User #{user}\" val parameters = mapOf (\"user\" to \"John\") assert (template.filterVars(parameters) == \"User John\") assert (template.filterVars() == template) //sampleEnd } Parameters \u00b6 jvm parameters The map with the list of key/value tuples. [jvm] Content fun String . filterVars (vararg parameters: Pair < , >): String More info TODO . Return \u00b6 . Parameters \u00b6 jvm . parameters .","title":"Filter vars"},{"location":"hexagon_core/com.hexagonkt.helpers/filter-vars/#filtervars","text":"[jvm] Content fun String . filterVars (parameters: Map < , >): String More info Filter the target string substituting each key by its value. The keys format is: #{key} and all occurrences are replaced by the supplied value. If a variable does not have a parameter, it is left as it is.","title":"filterVars"},{"location":"hexagon_core/com.hexagonkt.helpers/filter-vars/#return","text":"The filtered text or the same string if no values are passed or found in the text.","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/filter-vars/#samples","text":"[jvm] import org.junit.jupiter.api.Test fun main() { //sampleStart val template = \"User #{user}\" val parameters = mapOf (\"user\" to \"John\") assert (template.filterVars(parameters) == \"User John\") assert (template.filterVars() == template) //sampleEnd }","title":"Samples"},{"location":"hexagon_core/com.hexagonkt.helpers/filter-vars/#parameters","text":"jvm parameters The map with the list of key/value tuples. [jvm] Content fun String . filterVars (vararg parameters: Pair < , >): String More info TODO .","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/filter-vars/#return_1","text":".","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/filter-vars/#parameters_1","text":"jvm . parameters .","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/filter/","text":"// hexagon_core / com.hexagonkt.helpers / filter filter \u00b6 [jvm] Content fun String . filter (prefix: String , suffix: String , vararg parameters: Pair < String , String >): String More info TODO . Return \u00b6 . Parameters \u00b6 jvm . prefix . suffix . parameters .","title":"Filter"},{"location":"hexagon_core/com.hexagonkt.helpers/filter/#filter","text":"[jvm] Content fun String . filter (prefix: String , suffix: String , vararg parameters: Pair < String , String >): String More info TODO .","title":"filter"},{"location":"hexagon_core/com.hexagonkt.helpers/filter/#return","text":".","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/filter/#parameters","text":"jvm . prefix . suffix . parameters .","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/find-groups/","text":"// hexagon_core / com.hexagonkt.helpers / findGroups findGroups \u00b6 [jvm] Content fun Regex . findGroups (text: String ): List < MatchGroup > More info TODO . Return \u00b6 . Parameters \u00b6 jvm . text .","title":"Find groups"},{"location":"hexagon_core/com.hexagonkt.helpers/find-groups/#findgroups","text":"[jvm] Content fun Regex . findGroups (text: String ): List < MatchGroup > More info TODO .","title":"findGroups"},{"location":"hexagon_core/com.hexagonkt.helpers/find-groups/#return","text":".","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/find-groups/#parameters","text":"jvm . text .","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/free-port/","text":"// hexagon_core / com.hexagonkt.helpers / freePort freePort \u00b6 [jvm] Content fun freePort (): Int More info Return a random free port (not used by any other local process). Return \u00b6 Random free port number.","title":"Free port"},{"location":"hexagon_core/com.hexagonkt.helpers/free-port/#freeport","text":"[jvm] Content fun freePort (): Int More info Return a random free port (not used by any other local process).","title":"freePort"},{"location":"hexagon_core/com.hexagonkt.helpers/free-port/#return","text":"Random free port number.","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/get/","text":"// hexagon_core / com.hexagonkt.helpers / get get \u00b6 [jvm] Content operator fun Map < , >. get (vararg keys: Any ): Any ? More info TODO . Return \u00b6 . Parameters \u00b6 jvm . keys .","title":"Get"},{"location":"hexagon_core/com.hexagonkt.helpers/get/#get","text":"[jvm] Content operator fun Map < , >. get (vararg keys: Any ): Any ? More info TODO .","title":"get"},{"location":"hexagon_core/com.hexagonkt.helpers/get/#return","text":".","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/get/#parameters","text":"jvm . keys .","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/glob-to-regex/","text":"// hexagon_core / com.hexagonkt.helpers / globToRegex globToRegex \u00b6 [jvm] Content fun String . globToRegex (): Regex More info TODO . Return \u00b6 .","title":"Glob to regex"},{"location":"hexagon_core/com.hexagonkt.helpers/glob-to-regex/#globtoregex","text":"[jvm] Content fun String . globToRegex (): Regex More info TODO .","title":"globToRegex"},{"location":"hexagon_core/com.hexagonkt.helpers/glob-to-regex/#return","text":".","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/is-port-opened/","text":"// hexagon_core / com.hexagonkt.helpers / isPortOpened isPortOpened \u00b6 [jvm] Content fun isPortOpened (port: Int ): Boolean More info Check if a port is already opened. Return \u00b6 True if the port is open, false otherwise. Parameters \u00b6 jvm port Port number to check.","title":"Is port opened"},{"location":"hexagon_core/com.hexagonkt.helpers/is-port-opened/#isportopened","text":"[jvm] Content fun isPortOpened (port: Int ): Boolean More info Check if a port is already opened.","title":"isPortOpened"},{"location":"hexagon_core/com.hexagonkt.helpers/is-port-opened/#return","text":"True if the port is open, false otherwise.","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/is-port-opened/#parameters","text":"jvm port Port number to check.","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/logger/","text":"// hexagon_core / com.hexagonkt.helpers / logger logger \u00b6 [jvm] Content val logger : Logger More info Default logger for when you feel too lazy to declare one.","title":"Logger"},{"location":"hexagon_core/com.hexagonkt.helpers/logger/#logger","text":"[jvm] Content val logger : Logger More info Default logger for when you feel too lazy to declare one.","title":"logger"},{"location":"hexagon_core/com.hexagonkt.helpers/not-empty/","text":"// hexagon_core / com.hexagonkt.helpers / notEmpty notEmpty \u00b6 [jvm] Content fun < V > notEmpty (value: V ?): Boolean More info TODO . Return \u00b6 . Parameters \u00b6 jvm value .","title":"Not empty"},{"location":"hexagon_core/com.hexagonkt.helpers/not-empty/#notempty","text":"[jvm] Content fun < V > notEmpty (value: V ?): Boolean More info TODO .","title":"notEmpty"},{"location":"hexagon_core/com.hexagonkt.helpers/not-empty/#return","text":".","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/not-empty/#parameters","text":"jvm value .","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/prepend-indent/","text":"// hexagon_core / com.hexagonkt.helpers / prependIndent prependIndent \u00b6 [jvm] Content fun String . prependIndent (count: Int = 4, pad: String = \" \"): String More info TODO . Return \u00b6 . Parameters \u00b6 jvm . count . pad .","title":"Prepend indent"},{"location":"hexagon_core/com.hexagonkt.helpers/prepend-indent/#prependindent","text":"[jvm] Content fun String . prependIndent (count: Int = 4, pad: String = \" \"): String More info TODO .","title":"prependIndent"},{"location":"hexagon_core/com.hexagonkt.helpers/prepend-indent/#return","text":".","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/prepend-indent/#parameters","text":"jvm . count . pad .","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/println/","text":"// hexagon_core / com.hexagonkt.helpers / println println \u00b6 [jvm] Content fun < T > T . println (prefix: String = \"\"): T More info Print receiver to stdout. Convenient utility to debug variables quickly. Return \u00b6 Receiver's reference. Returned to allow method call chaining. Parameters \u00b6 jvm Reference to the object to print. Can be null. prefix String to print before the actual object information. Empty string by default.","title":"Println"},{"location":"hexagon_core/com.hexagonkt.helpers/println/#println","text":"[jvm] Content fun < T > T . println (prefix: String = \"\"): T More info Print receiver to stdout. Convenient utility to debug variables quickly.","title":"println"},{"location":"hexagon_core/com.hexagonkt.helpers/println/#return","text":"Receiver's reference. Returned to allow method call chaining.","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/println/#parameters","text":"jvm Reference to the object to print. Can be null. prefix String to print before the actual object information. Empty string by default.","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/require-keys/","text":"// hexagon_core / com.hexagonkt.helpers / requireKeys requireKeys \u00b6 [jvm] Content fun < T : Any > Map < , >. requireKeys (vararg name: Any ): T More info TODO . Return \u00b6 . Parameters \u00b6 jvm . name .","title":"Require keys"},{"location":"hexagon_core/com.hexagonkt.helpers/require-keys/#requirekeys","text":"[jvm] Content fun < T : Any > Map < , >. requireKeys (vararg name: Any ): T More info TODO .","title":"requireKeys"},{"location":"hexagon_core/com.hexagonkt.helpers/require-keys/#return","text":".","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/require-keys/#parameters","text":"jvm . name .","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/require/","text":"// hexagon_core / com.hexagonkt.helpers / require require \u00b6 [jvm] Content fun < K , V > Map < K , V >. require (name: K ): V More info TODO . Return \u00b6 . Parameters \u00b6 jvm . name .","title":"Require"},{"location":"hexagon_core/com.hexagonkt.helpers/require/#require","text":"[jvm] Content fun < K , V > Map < K , V >. require (name: K ): V More info TODO .","title":"require"},{"location":"hexagon_core/com.hexagonkt.helpers/require/#return","text":".","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/require/#parameters","text":"jvm . name .","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/retry/","text":"// hexagon_core / com.hexagonkt.helpers / retry retry \u00b6 [jvm] Content fun < T > retry (times: Int , delay: Long , block: () -> T ): T More info Execute a lambda until no exception is thrown or a number of times is reached. Return \u00b6 Callback's result if succeed. Parameters \u00b6 jvm times Number of times to try to execute the callback. Must be greater than 0. delay Milliseconds to wait to next execution if there was an error. Must be 0 or greater. block Code to be executed. Throws \u00b6 com.hexagonkt.helpers.MultipleException if the callback didn't succeed in the given times.","title":"Retry"},{"location":"hexagon_core/com.hexagonkt.helpers/retry/#retry","text":"[jvm] Content fun < T > retry (times: Int , delay: Long , block: () -> T ): T More info Execute a lambda until no exception is thrown or a number of times is reached.","title":"retry"},{"location":"hexagon_core/com.hexagonkt.helpers/retry/#return","text":"Callback's result if succeed.","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/retry/#parameters","text":"jvm times Number of times to try to execute the callback. Must be greater than 0. delay Milliseconds to wait to next execution if there was an error. Must be 0 or greater. block Code to be executed.","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/retry/#throws","text":"com.hexagonkt.helpers.MultipleException if the callback didn't succeed in the given times.","title":"Throws"},{"location":"hexagon_core/com.hexagonkt.helpers/snake-to-camel/","text":"// hexagon_core / com.hexagonkt.helpers / snakeToCamel snakeToCamel \u00b6 [jvm] Content fun String . snakeToCamel (): String More info Transform the target string from snake case to camel case.","title":"Snake to camel"},{"location":"hexagon_core/com.hexagonkt.helpers/snake-to-camel/#snaketocamel","text":"[jvm] Content fun String . snakeToCamel (): String More info Transform the target string from snake case to camel case.","title":"snakeToCamel"},{"location":"hexagon_core/com.hexagonkt.helpers/strip-accents/","text":"// hexagon_core / com.hexagonkt.helpers / stripAccents stripAccents \u00b6 [jvm] Content fun String . stripAccents (): String More info TODO . Return \u00b6 .","title":"Strip accents"},{"location":"hexagon_core/com.hexagonkt.helpers/strip-accents/#stripaccents","text":"[jvm] Content fun String . stripAccents (): String More info TODO .","title":"stripAccents"},{"location":"hexagon_core/com.hexagonkt.helpers/strip-accents/#return","text":".","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/to-base64/","text":"// hexagon_core / com.hexagonkt.helpers / toBase64 toBase64 \u00b6 [jvm] Content fun UUID . toBase64 (): String More info TODO . Return \u00b6 .","title":"To base64"},{"location":"hexagon_core/com.hexagonkt.helpers/to-base64/#tobase64","text":"[jvm] Content fun UUID . toBase64 (): String More info TODO .","title":"toBase64"},{"location":"hexagon_core/com.hexagonkt.helpers/to-base64/#return","text":".","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/to-date/","text":"// hexagon_core / com.hexagonkt.helpers / toDate toDate \u00b6 [jvm] Content fun ZonedDateTime . toDate (): Date More info Convert a zoned date time to a date. Return \u00b6 Date representation of the given zoned date time. [jvm] Content fun LocalDateTime . toDate (): Date More info Convert a local date time to a date. Return \u00b6 Date representation of the given local date time. [jvm] Content fun LocalDate . toDate (): Date More info Convert a local date to a date. Return \u00b6 Date representation of the given local date.","title":"To date"},{"location":"hexagon_core/com.hexagonkt.helpers/to-date/#todate","text":"[jvm] Content fun ZonedDateTime . toDate (): Date More info Convert a zoned date time to a date.","title":"toDate"},{"location":"hexagon_core/com.hexagonkt.helpers/to-date/#return","text":"Date representation of the given zoned date time. [jvm] Content fun LocalDateTime . toDate (): Date More info Convert a local date time to a date.","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/to-date/#return_1","text":"Date representation of the given local date time. [jvm] Content fun LocalDate . toDate (): Date More info Convert a local date to a date.","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/to-date/#return_2","text":"Date representation of the given local date.","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/to-local-date-time/","text":"// hexagon_core / com.hexagonkt.helpers / toLocalDateTime toLocalDateTime \u00b6 [jvm] Content fun Long . toLocalDateTime (): LocalDateTime More info Parse a date time from a formatted number with this format: YYYYMMDDHHmmss. Return \u00b6 Local date time representation of the given number. [jvm] Content fun Date . toLocalDateTime (): LocalDateTime More info Convert a date to a local date time. Return \u00b6 Local date time representation of the given date.","title":"To local date time"},{"location":"hexagon_core/com.hexagonkt.helpers/to-local-date-time/#tolocaldatetime","text":"[jvm] Content fun Long . toLocalDateTime (): LocalDateTime More info Parse a date time from a formatted number with this format: YYYYMMDDHHmmss.","title":"toLocalDateTime"},{"location":"hexagon_core/com.hexagonkt.helpers/to-local-date-time/#return","text":"Local date time representation of the given number. [jvm] Content fun Date . toLocalDateTime (): LocalDateTime More info Convert a date to a local date time.","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/to-local-date-time/#return_1","text":"Local date time representation of the given date.","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/to-local-date/","text":"// hexagon_core / com.hexagonkt.helpers / toLocalDate toLocalDate \u00b6 [jvm] Content fun Int . toLocalDate (): LocalDate More info Parse a date from a formatted integer with this format: YYYYMMDD. Return \u00b6 Local date representation of the given number. [jvm] Content fun Date . toLocalDate (): LocalDate More info Convert a date to a local date. Return \u00b6 Local date representation of the given date.","title":"To local date"},{"location":"hexagon_core/com.hexagonkt.helpers/to-local-date/#tolocaldate","text":"[jvm] Content fun Int . toLocalDate (): LocalDate More info Parse a date from a formatted integer with this format: YYYYMMDD.","title":"toLocalDate"},{"location":"hexagon_core/com.hexagonkt.helpers/to-local-date/#return","text":"Local date representation of the given number. [jvm] Content fun Date . toLocalDate (): LocalDate More info Convert a date to a local date.","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/to-local-date/#return_1","text":"Local date representation of the given date.","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/to-local-time/","text":"// hexagon_core / com.hexagonkt.helpers / toLocalTime toLocalTime \u00b6 [jvm] Content fun Int . toLocalTime (): LocalTime More info Parse a time from a formatted integer with this format: HHmmssSSS. Return \u00b6 Local time representation of the given number.","title":"To local time"},{"location":"hexagon_core/com.hexagonkt.helpers/to-local-time/#tolocaltime","text":"[jvm] Content fun Int . toLocalTime (): LocalTime More info Parse a time from a formatted integer with this format: HHmmssSSS.","title":"toLocalTime"},{"location":"hexagon_core/com.hexagonkt.helpers/to-local-time/#return","text":"Local time representation of the given number.","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/to-number/","text":"// hexagon_core / com.hexagonkt.helpers / toNumber toNumber \u00b6 [jvm] Content fun LocalDateTime . toNumber (): Long More info Convert a date time to a number with the following format: YYYYMMDDHHmmss. Return \u00b6 Numeric representation of the given date. [jvm] Content fun LocalDate . toNumber (): Int More info Convert a date to an integer with the following format: YYYYMMDD. Return \u00b6 Numeric representation of the given date. [jvm] Content fun LocalTime . toNumber (): Int More info Convert a time to an integer with the following format: HHmmssSSS. Return \u00b6 Numeric representation of the given time.","title":"To number"},{"location":"hexagon_core/com.hexagonkt.helpers/to-number/#tonumber","text":"[jvm] Content fun LocalDateTime . toNumber (): Long More info Convert a date time to a number with the following format: YYYYMMDDHHmmss.","title":"toNumber"},{"location":"hexagon_core/com.hexagonkt.helpers/to-number/#return","text":"Numeric representation of the given date. [jvm] Content fun LocalDate . toNumber (): Int More info Convert a date to an integer with the following format: YYYYMMDD.","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/to-number/#return_1","text":"Numeric representation of the given date. [jvm] Content fun LocalTime . toNumber (): Int More info Convert a time to an integer with the following format: HHmmssSSS.","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/to-number/#return_2","text":"Numeric representation of the given time.","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/to-stream/","text":"// hexagon_core / com.hexagonkt.helpers / toStream toStream \u00b6 [jvm] Content fun String . toStream (): InputStream More info TODO . Return \u00b6 .","title":"To stream"},{"location":"hexagon_core/com.hexagonkt.helpers/to-stream/#tostream","text":"[jvm] Content fun String . toStream (): InputStream More info TODO .","title":"toStream"},{"location":"hexagon_core/com.hexagonkt.helpers/to-stream/#return","text":".","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/to-text/","text":"// hexagon_core / com.hexagonkt.helpers / toText toText \u00b6 [jvm] Content fun Throwable . toText (prefix: String = \"\"): String More info Return this throwable as a text. Return \u00b6 The filtered (if filter is provided) Throwable as a string. Parameters \u00b6 jvm Throwable to be printed to a string. prefix Optional prefix to filter stack trace elements.","title":"To text"},{"location":"hexagon_core/com.hexagonkt.helpers/to-text/#totext","text":"[jvm] Content fun Throwable . toText (prefix: String = \"\"): String More info Return this throwable as a text.","title":"toText"},{"location":"hexagon_core/com.hexagonkt.helpers/to-text/#return","text":"The filtered (if filter is provided) Throwable as a string.","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/to-text/#parameters","text":"jvm Throwable to be printed to a string. prefix Optional prefix to filter stack trace elements.","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/trace/","text":"// hexagon_core / com.hexagonkt.helpers / trace trace \u00b6 [jvm] Content fun < T > T . trace (prefix: String = \"\"): T More info TODO . com.hexagonkt.logging.Logger must have TRACE level TODO Add use case and example in documentation. Return \u00b6 . Parameters \u00b6 jvm . prefix .","title":"Trace"},{"location":"hexagon_core/com.hexagonkt.helpers/trace/#trace","text":"[jvm] Content fun < T > T . trace (prefix: String = \"\"): T More info TODO . com.hexagonkt.logging.Logger must have TRACE level TODO Add use case and example in documentation.","title":"trace"},{"location":"hexagon_core/com.hexagonkt.helpers/trace/#return","text":".","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/trace/#parameters","text":"jvm . prefix .","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/utf8/","text":"// hexagon_core / com.hexagonkt.helpers / utf8 utf8 \u00b6 [jvm] Content fun utf8 (vararg bytes: Int ): String More info TODO . Return \u00b6 . Parameters \u00b6 jvm bytes .","title":"Utf8"},{"location":"hexagon_core/com.hexagonkt.helpers/utf8/#utf8","text":"[jvm] Content fun utf8 (vararg bytes: Int ): String More info TODO .","title":"utf8"},{"location":"hexagon_core/com.hexagonkt.helpers/utf8/#return","text":".","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/utf8/#parameters","text":"jvm bytes .","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/uuid/","text":"// hexagon_core / com.hexagonkt.helpers / uuid uuid \u00b6 [jvm] Content fun uuid (text: String ): UUID More info TODO . Return \u00b6 . Parameters \u00b6 jvm text . [jvm] Content fun uuid (bytes: ByteArray ): UUID More info TODO . Return \u00b6 . Parameters \u00b6 jvm bytes .","title":"Uuid"},{"location":"hexagon_core/com.hexagonkt.helpers/uuid/#uuid","text":"[jvm] Content fun uuid (text: String ): UUID More info TODO .","title":"uuid"},{"location":"hexagon_core/com.hexagonkt.helpers/uuid/#return","text":".","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/uuid/#parameters","text":"jvm text . [jvm] Content fun uuid (bytes: ByteArray ): UUID More info TODO .","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/uuid/#return_1","text":".","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/uuid/#parameters_1","text":"jvm bytes .","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/with-zone/","text":"// hexagon_core / com.hexagonkt.helpers / withZone withZone \u00b6 [jvm] Content fun LocalDateTime . withZone (zoneId: ZoneId = Jvm.timeZone.toZoneId()): ZonedDateTime More info Return the date time in a given time zone for a local date time. Return \u00b6 Received date time at the given zoneId . Parameters \u00b6 jvm Local date time to be moved to another time zone. zoneId Id of the target zone of the passed local date time.","title":"With zone"},{"location":"hexagon_core/com.hexagonkt.helpers/with-zone/#withzone","text":"[jvm] Content fun LocalDateTime . withZone (zoneId: ZoneId = Jvm.timeZone.toZoneId()): ZonedDateTime More info Return the date time in a given time zone for a local date time.","title":"withZone"},{"location":"hexagon_core/com.hexagonkt.helpers/with-zone/#return","text":"Received date time at the given zoneId .","title":"Return"},{"location":"hexagon_core/com.hexagonkt.helpers/with-zone/#parameters","text":"jvm Local date time to be moved to another time zone. zoneId Id of the target zone of the passed local date time.","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi Ansi \u00b6 [jvm] object Ansi Constants for console formatting with ANSI codes. TODO . Properties \u00b6 Name Summary BLACK [jvm] const val BLACK : String BLACK_BG [jvm] const val BLACK_BG : String BLINK [jvm] const val BLINK : String BLINK_OFF [jvm] const val BLINK_OFF : String BLUE [jvm] const val BLUE : String BLUE_BG [jvm] const val BLUE_BG : String BOLD [jvm] const val BOLD : String BOLD_OFF [jvm] const val BOLD_OFF : String BRIGHT_BLACK [jvm] const val BRIGHT_BLACK : String BRIGHT_BLACK_BG [jvm] const val BRIGHT_BLACK_BG : String BRIGHT_BLUE [jvm] const val BRIGHT_BLUE : String BRIGHT_BLUE_BG [jvm] const val BRIGHT_BLUE_BG : String BRIGHT_CYAN [jvm] const val BRIGHT_CYAN : String BRIGHT_CYAN_BG [jvm] const val BRIGHT_CYAN_BG : String BRIGHT_GREEN [jvm] const val BRIGHT_GREEN : String BRIGHT_GREEN_BG [jvm] const val BRIGHT_GREEN_BG : String BRIGHT_MAGENTA [jvm] const val BRIGHT_MAGENTA : String BRIGHT_MAGENTA_BG [jvm] const val BRIGHT_MAGENTA_BG : String BRIGHT_RED [jvm] const val BRIGHT_RED : String BRIGHT_RED_BG [jvm] const val BRIGHT_RED_BG : String BRIGHT_WHITE [jvm] const val BRIGHT_WHITE : String BRIGHT_WHITE_BG [jvm] const val BRIGHT_WHITE_BG : String BRIGHT_YELLOW [jvm] const val BRIGHT_YELLOW : String BRIGHT_YELLOW_BG [jvm] const val BRIGHT_YELLOW_BG : String CYAN [jvm] const val CYAN : String CYAN_BG [jvm] const val CYAN_BG : String DEFAULT [jvm] const val DEFAULT : String DEFAULT_BG [jvm] const val DEFAULT_BG : String GREEN [jvm] const val GREEN : String GREEN_BG [jvm] const val GREEN_BG : String INVERSE [jvm] const val INVERSE : String INVERSE_OFF [jvm] const val INVERSE_OFF : String MAGENTA [jvm] const val MAGENTA : String MAGENTA_BG [jvm] const val MAGENTA_BG : String RED [jvm] const val RED : String RED_BG [jvm] const val RED_BG : String RESET [jvm] const val RESET : String UNDERLINE [jvm] const val UNDERLINE : String UNDERLINE_OFF [jvm] const val UNDERLINE_OFF : String WHITE [jvm] const val WHITE : String WHITE_BG [jvm] const val WHITE_BG : String YELLOW [jvm] const val YELLOW : String YELLOW_BG [jvm] const val YELLOW_BG : String","title":"Index"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/#ansi","text":"[jvm] object Ansi Constants for console formatting with ANSI codes. TODO .","title":"Ansi"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/#properties","text":"Name Summary BLACK [jvm] const val BLACK : String BLACK_BG [jvm] const val BLACK_BG : String BLINK [jvm] const val BLINK : String BLINK_OFF [jvm] const val BLINK_OFF : String BLUE [jvm] const val BLUE : String BLUE_BG [jvm] const val BLUE_BG : String BOLD [jvm] const val BOLD : String BOLD_OFF [jvm] const val BOLD_OFF : String BRIGHT_BLACK [jvm] const val BRIGHT_BLACK : String BRIGHT_BLACK_BG [jvm] const val BRIGHT_BLACK_BG : String BRIGHT_BLUE [jvm] const val BRIGHT_BLUE : String BRIGHT_BLUE_BG [jvm] const val BRIGHT_BLUE_BG : String BRIGHT_CYAN [jvm] const val BRIGHT_CYAN : String BRIGHT_CYAN_BG [jvm] const val BRIGHT_CYAN_BG : String BRIGHT_GREEN [jvm] const val BRIGHT_GREEN : String BRIGHT_GREEN_BG [jvm] const val BRIGHT_GREEN_BG : String BRIGHT_MAGENTA [jvm] const val BRIGHT_MAGENTA : String BRIGHT_MAGENTA_BG [jvm] const val BRIGHT_MAGENTA_BG : String BRIGHT_RED [jvm] const val BRIGHT_RED : String BRIGHT_RED_BG [jvm] const val BRIGHT_RED_BG : String BRIGHT_WHITE [jvm] const val BRIGHT_WHITE : String BRIGHT_WHITE_BG [jvm] const val BRIGHT_WHITE_BG : String BRIGHT_YELLOW [jvm] const val BRIGHT_YELLOW : String BRIGHT_YELLOW_BG [jvm] const val BRIGHT_YELLOW_BG : String CYAN [jvm] const val CYAN : String CYAN_BG [jvm] const val CYAN_BG : String DEFAULT [jvm] const val DEFAULT : String DEFAULT_BG [jvm] const val DEFAULT_BG : String GREEN [jvm] const val GREEN : String GREEN_BG [jvm] const val GREEN_BG : String INVERSE [jvm] const val INVERSE : String INVERSE_OFF [jvm] const val INVERSE_OFF : String MAGENTA [jvm] const val MAGENTA : String MAGENTA_BG [jvm] const val MAGENTA_BG : String RED [jvm] const val RED : String RED_BG [jvm] const val RED_BG : String RESET [jvm] const val RESET : String UNDERLINE [jvm] const val UNDERLINE : String UNDERLINE_OFF [jvm] const val UNDERLINE_OFF : String WHITE [jvm] const val WHITE : String WHITE_BG [jvm] const val WHITE_BG : String YELLOW [jvm] const val YELLOW : String YELLOW_BG [jvm] const val YELLOW_BG : String","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-l-a-c-k/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BLACK BLACK \u00b6 [jvm] Content const val BLACK : String","title":" b l a c k"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-l-a-c-k/#black","text":"[jvm] Content const val BLACK : String","title":"BLACK"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-l-a-c-k_-b-g/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BLACK_BG BLACK_BG \u00b6 [jvm] Content const val BLACK_BG : String","title":" b l a c k  b g"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-l-a-c-k_-b-g/#black_bg","text":"[jvm] Content const val BLACK_BG : String","title":"BLACK_BG"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-l-i-n-k/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BLINK BLINK \u00b6 [jvm] Content const val BLINK : String","title":" b l i n k"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-l-i-n-k/#blink","text":"[jvm] Content const val BLINK : String","title":"BLINK"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-l-i-n-k_-o-f-f/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BLINK_OFF BLINK_OFF \u00b6 [jvm] Content const val BLINK_OFF : String","title":" b l i n k  o f f"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-l-i-n-k_-o-f-f/#blink_off","text":"[jvm] Content const val BLINK_OFF : String","title":"BLINK_OFF"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-l-u-e/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BLUE BLUE \u00b6 [jvm] Content const val BLUE : String","title":" b l u e"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-l-u-e/#blue","text":"[jvm] Content const val BLUE : String","title":"BLUE"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-l-u-e_-b-g/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BLUE_BG BLUE_BG \u00b6 [jvm] Content const val BLUE_BG : String","title":" b l u e  b g"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-l-u-e_-b-g/#blue_bg","text":"[jvm] Content const val BLUE_BG : String","title":"BLUE_BG"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-o-l-d/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BOLD BOLD \u00b6 [jvm] Content const val BOLD : String","title":" b o l d"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-o-l-d/#bold","text":"[jvm] Content const val BOLD : String","title":"BOLD"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-o-l-d_-o-f-f/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BOLD_OFF BOLD_OFF \u00b6 [jvm] Content const val BOLD_OFF : String","title":" b o l d  o f f"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-o-l-d_-o-f-f/#bold_off","text":"[jvm] Content const val BOLD_OFF : String","title":"BOLD_OFF"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-b-l-a-c-k/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BRIGHT_BLACK BRIGHT_BLACK \u00b6 [jvm] Content const val BRIGHT_BLACK : String","title":" b r i g h t  b l a c k"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-b-l-a-c-k/#bright_black","text":"[jvm] Content const val BRIGHT_BLACK : String","title":"BRIGHT_BLACK"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-b-l-a-c-k_-b-g/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BRIGHT_BLACK_BG BRIGHT_BLACK_BG \u00b6 [jvm] Content const val BRIGHT_BLACK_BG : String","title":" b r i g h t  b l a c k  b g"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-b-l-a-c-k_-b-g/#bright_black_bg","text":"[jvm] Content const val BRIGHT_BLACK_BG : String","title":"BRIGHT_BLACK_BG"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-b-l-u-e/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BRIGHT_BLUE BRIGHT_BLUE \u00b6 [jvm] Content const val BRIGHT_BLUE : String","title":" b r i g h t  b l u e"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-b-l-u-e/#bright_blue","text":"[jvm] Content const val BRIGHT_BLUE : String","title":"BRIGHT_BLUE"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-b-l-u-e_-b-g/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BRIGHT_BLUE_BG BRIGHT_BLUE_BG \u00b6 [jvm] Content const val BRIGHT_BLUE_BG : String","title":" b r i g h t  b l u e  b g"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-b-l-u-e_-b-g/#bright_blue_bg","text":"[jvm] Content const val BRIGHT_BLUE_BG : String","title":"BRIGHT_BLUE_BG"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-c-y-a-n/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BRIGHT_CYAN BRIGHT_CYAN \u00b6 [jvm] Content const val BRIGHT_CYAN : String","title":" b r i g h t  c y a n"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-c-y-a-n/#bright_cyan","text":"[jvm] Content const val BRIGHT_CYAN : String","title":"BRIGHT_CYAN"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-c-y-a-n_-b-g/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BRIGHT_CYAN_BG BRIGHT_CYAN_BG \u00b6 [jvm] Content const val BRIGHT_CYAN_BG : String","title":" b r i g h t  c y a n  b g"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-c-y-a-n_-b-g/#bright_cyan_bg","text":"[jvm] Content const val BRIGHT_CYAN_BG : String","title":"BRIGHT_CYAN_BG"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-g-r-e-e-n/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BRIGHT_GREEN BRIGHT_GREEN \u00b6 [jvm] Content const val BRIGHT_GREEN : String","title":" b r i g h t  g r e e n"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-g-r-e-e-n/#bright_green","text":"[jvm] Content const val BRIGHT_GREEN : String","title":"BRIGHT_GREEN"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-g-r-e-e-n_-b-g/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BRIGHT_GREEN_BG BRIGHT_GREEN_BG \u00b6 [jvm] Content const val BRIGHT_GREEN_BG : String","title":" b r i g h t  g r e e n  b g"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-g-r-e-e-n_-b-g/#bright_green_bg","text":"[jvm] Content const val BRIGHT_GREEN_BG : String","title":"BRIGHT_GREEN_BG"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-m-a-g-e-n-t-a/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BRIGHT_MAGENTA BRIGHT_MAGENTA \u00b6 [jvm] Content const val BRIGHT_MAGENTA : String","title":" b r i g h t  m a g e n t a"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-m-a-g-e-n-t-a/#bright_magenta","text":"[jvm] Content const val BRIGHT_MAGENTA : String","title":"BRIGHT_MAGENTA"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-m-a-g-e-n-t-a_-b-g/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BRIGHT_MAGENTA_BG BRIGHT_MAGENTA_BG \u00b6 [jvm] Content const val BRIGHT_MAGENTA_BG : String","title":" b r i g h t  m a g e n t a  b g"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-m-a-g-e-n-t-a_-b-g/#bright_magenta_bg","text":"[jvm] Content const val BRIGHT_MAGENTA_BG : String","title":"BRIGHT_MAGENTA_BG"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-r-e-d/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BRIGHT_RED BRIGHT_RED \u00b6 [jvm] Content const val BRIGHT_RED : String","title":" b r i g h t  r e d"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-r-e-d/#bright_red","text":"[jvm] Content const val BRIGHT_RED : String","title":"BRIGHT_RED"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-r-e-d_-b-g/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BRIGHT_RED_BG BRIGHT_RED_BG \u00b6 [jvm] Content const val BRIGHT_RED_BG : String","title":" b r i g h t  r e d  b g"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-r-e-d_-b-g/#bright_red_bg","text":"[jvm] Content const val BRIGHT_RED_BG : String","title":"BRIGHT_RED_BG"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-w-h-i-t-e/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BRIGHT_WHITE BRIGHT_WHITE \u00b6 [jvm] Content const val BRIGHT_WHITE : String","title":" b r i g h t  w h i t e"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-w-h-i-t-e/#bright_white","text":"[jvm] Content const val BRIGHT_WHITE : String","title":"BRIGHT_WHITE"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-w-h-i-t-e_-b-g/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BRIGHT_WHITE_BG BRIGHT_WHITE_BG \u00b6 [jvm] Content const val BRIGHT_WHITE_BG : String","title":" b r i g h t  w h i t e  b g"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-w-h-i-t-e_-b-g/#bright_white_bg","text":"[jvm] Content const val BRIGHT_WHITE_BG : String","title":"BRIGHT_WHITE_BG"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-y-e-l-l-o-w/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BRIGHT_YELLOW BRIGHT_YELLOW \u00b6 [jvm] Content const val BRIGHT_YELLOW : String","title":" b r i g h t  y e l l o w"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-y-e-l-l-o-w/#bright_yellow","text":"[jvm] Content const val BRIGHT_YELLOW : String","title":"BRIGHT_YELLOW"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-y-e-l-l-o-w_-b-g/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / BRIGHT_YELLOW_BG BRIGHT_YELLOW_BG \u00b6 [jvm] Content const val BRIGHT_YELLOW_BG : String","title":" b r i g h t  y e l l o w  b g"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-b-r-i-g-h-t_-y-e-l-l-o-w_-b-g/#bright_yellow_bg","text":"[jvm] Content const val BRIGHT_YELLOW_BG : String","title":"BRIGHT_YELLOW_BG"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-c-y-a-n/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / CYAN CYAN \u00b6 [jvm] Content const val CYAN : String","title":" c y a n"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-c-y-a-n/#cyan","text":"[jvm] Content const val CYAN : String","title":"CYAN"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-c-y-a-n_-b-g/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / CYAN_BG CYAN_BG \u00b6 [jvm] Content const val CYAN_BG : String","title":" c y a n  b g"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-c-y-a-n_-b-g/#cyan_bg","text":"[jvm] Content const val CYAN_BG : String","title":"CYAN_BG"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-d-e-f-a-u-l-t/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / DEFAULT DEFAULT \u00b6 [jvm] Content const val DEFAULT : String","title":" d e f a u l t"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-d-e-f-a-u-l-t/#default","text":"[jvm] Content const val DEFAULT : String","title":"DEFAULT"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-d-e-f-a-u-l-t_-b-g/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / DEFAULT_BG DEFAULT_BG \u00b6 [jvm] Content const val DEFAULT_BG : String","title":" d e f a u l t  b g"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-d-e-f-a-u-l-t_-b-g/#default_bg","text":"[jvm] Content const val DEFAULT_BG : String","title":"DEFAULT_BG"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-g-r-e-e-n/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / GREEN GREEN \u00b6 [jvm] Content const val GREEN : String","title":" g r e e n"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-g-r-e-e-n/#green","text":"[jvm] Content const val GREEN : String","title":"GREEN"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-g-r-e-e-n_-b-g/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / GREEN_BG GREEN_BG \u00b6 [jvm] Content const val GREEN_BG : String","title":" g r e e n  b g"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-g-r-e-e-n_-b-g/#green_bg","text":"[jvm] Content const val GREEN_BG : String","title":"GREEN_BG"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-i-n-v-e-r-s-e/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / INVERSE INVERSE \u00b6 [jvm] Content const val INVERSE : String","title":" i n v e r s e"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-i-n-v-e-r-s-e/#inverse","text":"[jvm] Content const val INVERSE : String","title":"INVERSE"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-i-n-v-e-r-s-e_-o-f-f/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / INVERSE_OFF INVERSE_OFF \u00b6 [jvm] Content const val INVERSE_OFF : String","title":" i n v e r s e  o f f"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-i-n-v-e-r-s-e_-o-f-f/#inverse_off","text":"[jvm] Content const val INVERSE_OFF : String","title":"INVERSE_OFF"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-m-a-g-e-n-t-a/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / MAGENTA MAGENTA \u00b6 [jvm] Content const val MAGENTA : String","title":" m a g e n t a"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-m-a-g-e-n-t-a/#magenta","text":"[jvm] Content const val MAGENTA : String","title":"MAGENTA"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-m-a-g-e-n-t-a_-b-g/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / MAGENTA_BG MAGENTA_BG \u00b6 [jvm] Content const val MAGENTA_BG : String","title":" m a g e n t a  b g"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-m-a-g-e-n-t-a_-b-g/#magenta_bg","text":"[jvm] Content const val MAGENTA_BG : String","title":"MAGENTA_BG"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-r-e-d/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / RED RED \u00b6 [jvm] Content const val RED : String","title":" r e d"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-r-e-d/#red","text":"[jvm] Content const val RED : String","title":"RED"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-r-e-d_-b-g/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / RED_BG RED_BG \u00b6 [jvm] Content const val RED_BG : String","title":" r e d  b g"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-r-e-d_-b-g/#red_bg","text":"[jvm] Content const val RED_BG : String","title":"RED_BG"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-r-e-s-e-t/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / RESET RESET \u00b6 [jvm] Content const val RESET : String","title":" r e s e t"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-r-e-s-e-t/#reset","text":"[jvm] Content const val RESET : String","title":"RESET"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-u-n-d-e-r-l-i-n-e/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / UNDERLINE UNDERLINE \u00b6 [jvm] Content const val UNDERLINE : String","title":" u n d e r l i n e"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-u-n-d-e-r-l-i-n-e/#underline","text":"[jvm] Content const val UNDERLINE : String","title":"UNDERLINE"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-u-n-d-e-r-l-i-n-e_-o-f-f/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / UNDERLINE_OFF UNDERLINE_OFF \u00b6 [jvm] Content const val UNDERLINE_OFF : String","title":" u n d e r l i n e  o f f"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-u-n-d-e-r-l-i-n-e_-o-f-f/#underline_off","text":"[jvm] Content const val UNDERLINE_OFF : String","title":"UNDERLINE_OFF"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-w-h-i-t-e/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / WHITE WHITE \u00b6 [jvm] Content const val WHITE : String","title":" w h i t e"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-w-h-i-t-e/#white","text":"[jvm] Content const val WHITE : String","title":"WHITE"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-w-h-i-t-e_-b-g/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / WHITE_BG WHITE_BG \u00b6 [jvm] Content const val WHITE_BG : String","title":" w h i t e  b g"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-w-h-i-t-e_-b-g/#white_bg","text":"[jvm] Content const val WHITE_BG : String","title":"WHITE_BG"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-y-e-l-l-o-w/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / YELLOW YELLOW \u00b6 [jvm] Content const val YELLOW : String","title":" y e l l o w"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-y-e-l-l-o-w/#yellow","text":"[jvm] Content const val YELLOW : String","title":"YELLOW"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-y-e-l-l-o-w_-b-g/","text":"// hexagon_core / com.hexagonkt.helpers / Ansi / YELLOW_BG YELLOW_BG \u00b6 [jvm] Content const val YELLOW_BG : String","title":" y e l l o w  b g"},{"location":"hexagon_core/com.hexagonkt.helpers/-ansi/-y-e-l-l-o-w_-b-g/#yellow_bg","text":"[jvm] Content const val YELLOW_BG : String","title":"YELLOW_BG"},{"location":"hexagon_core/com.hexagonkt.helpers/-coded-exception/","text":"// hexagon_core / com.hexagonkt.helpers / CodedException CodedException \u00b6 [jvm] class CodedException ( code : Int , message : String , cause : Throwable ?) : RuntimeException Exception with a numeric code. TODO . Constructors \u00b6 CodedException [jvm] fun CodedException (code: Int , message: String = \"\", cause: Throwable ? = null) Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int . message [jvm] open val message : String ?","title":"Index"},{"location":"hexagon_core/com.hexagonkt.helpers/-coded-exception/#codedexception","text":"[jvm] class CodedException ( code : Int , message : String , cause : Throwable ?) : RuntimeException Exception with a numeric code. TODO .","title":"CodedException"},{"location":"hexagon_core/com.hexagonkt.helpers/-coded-exception/#constructors","text":"CodedException [jvm] fun CodedException (code: Int , message: String = \"\", cause: Throwable ? = null)","title":"Constructors"},{"location":"hexagon_core/com.hexagonkt.helpers/-coded-exception/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.helpers/-coded-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? code [jvm] val code : Int . message [jvm] open val message : String ?","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.helpers/-coded-exception/-coded-exception/","text":"// hexagon_core / com.hexagonkt.helpers / CodedException / CodedException CodedException \u00b6 [jvm] Content fun CodedException (code: Int , message: String = \"\", cause: Throwable ? = null)","title":" coded exception"},{"location":"hexagon_core/com.hexagonkt.helpers/-coded-exception/-coded-exception/#codedexception","text":"[jvm] Content fun CodedException (code: Int , message: String = \"\", cause: Throwable ? = null)","title":"CodedException"},{"location":"hexagon_core/com.hexagonkt.helpers/-coded-exception/code/","text":"// hexagon_core / com.hexagonkt.helpers / CodedException / code code \u00b6 [jvm] Content val code : Int","title":"Code"},{"location":"hexagon_core/com.hexagonkt.helpers/-coded-exception/code/#code","text":"[jvm] Content val code : Int","title":"code"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/","text":"// hexagon_core / com.hexagonkt.helpers / Jvm Jvm \u00b6 [jvm] object Jvm Object with utilities to gather information about the running JVM. TODO . Functions \u00b6 Name Summary initialMemory [jvm] Content fun initialMemory (): String systemSetting [jvm] Content fun systemSetting (name: String ): String ? fun systemSetting (name: String , default: String ): String uptime [jvm] Content fun uptime (): String usedMemory [jvm] Content fun usedMemory (): String Properties \u00b6 Name Summary charset [jvm] val charset : Charset Default character set. cpuCount [jvm] val cpuCount : Int hostname [jvm] val hostname : String The hostname of the machine running this program. id [jvm] val id : String ip [jvm] val ip : String The IP address of the machine running this program. locale [jvm] val locale : String name [jvm] val name : String timeZone [jvm] val timeZone : TimeZone Default timezone. timezone [jvm] val timezone : String version [jvm] val version : String","title":"Index"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/#jvm","text":"[jvm] object Jvm Object with utilities to gather information about the running JVM. TODO .","title":"Jvm"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/#functions","text":"Name Summary initialMemory [jvm] Content fun initialMemory (): String systemSetting [jvm] Content fun systemSetting (name: String ): String ? fun systemSetting (name: String , default: String ): String uptime [jvm] Content fun uptime (): String usedMemory [jvm] Content fun usedMemory (): String","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/#properties","text":"Name Summary charset [jvm] val charset : Charset Default character set. cpuCount [jvm] val cpuCount : Int hostname [jvm] val hostname : String The hostname of the machine running this program. id [jvm] val id : String ip [jvm] val ip : String The IP address of the machine running this program. locale [jvm] val locale : String name [jvm] val name : String timeZone [jvm] val timeZone : TimeZone Default timezone. timezone [jvm] val timezone : String version [jvm] val version : String","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/charset/","text":"// hexagon_core / com.hexagonkt.helpers / Jvm / charset charset \u00b6 [jvm] Content val charset : Charset More info Default character set.","title":"Charset"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/charset/#charset","text":"[jvm] Content val charset : Charset More info Default character set.","title":"charset"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/cpu-count/","text":"// hexagon_core / com.hexagonkt.helpers / Jvm / cpuCount cpuCount \u00b6 [jvm] Content val cpuCount : Int","title":"Cpu count"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/cpu-count/#cpucount","text":"[jvm] Content val cpuCount : Int","title":"cpuCount"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/hostname/","text":"// hexagon_core / com.hexagonkt.helpers / Jvm / hostname hostname \u00b6 [jvm] Content val hostname : String More info The hostname of the machine running this program.","title":"Hostname"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/hostname/#hostname","text":"[jvm] Content val hostname : String More info The hostname of the machine running this program.","title":"hostname"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/id/","text":"// hexagon_core / com.hexagonkt.helpers / Jvm / id id \u00b6 [jvm] Content val id : String","title":"Id"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/id/#id","text":"[jvm] Content val id : String","title":"id"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/initial-memory/","text":"// hexagon_core / com.hexagonkt.helpers / Jvm / initialMemory initialMemory \u00b6 [jvm] Content fun initialMemory (): String","title":"Initial memory"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/initial-memory/#initialmemory","text":"[jvm] Content fun initialMemory (): String","title":"initialMemory"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/ip/","text":"// hexagon_core / com.hexagonkt.helpers / Jvm / ip ip \u00b6 [jvm] Content val ip : String More info The IP address of the machine running this program.","title":"Ip"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/ip/#ip","text":"[jvm] Content val ip : String More info The IP address of the machine running this program.","title":"ip"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/locale/","text":"// hexagon_core / com.hexagonkt.helpers / Jvm / locale locale \u00b6 [jvm] Content val locale : String","title":"Locale"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/locale/#locale","text":"[jvm] Content val locale : String","title":"locale"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/name/","text":"// hexagon_core / com.hexagonkt.helpers / Jvm / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/system-setting/","text":"// hexagon_core / com.hexagonkt.helpers / Jvm / systemSetting systemSetting \u00b6 [jvm] Content fun systemSetting (name: String ): String ? fun systemSetting (name: String , default: String ): String","title":"System setting"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/system-setting/#systemsetting","text":"[jvm] Content fun systemSetting (name: String ): String ? fun systemSetting (name: String , default: String ): String","title":"systemSetting"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/time-zone/","text":"// hexagon_core / com.hexagonkt.helpers / Jvm / timeZone timeZone \u00b6 [jvm] Content val timeZone : TimeZone More info Default timezone. TODO Defining this lazily fails in macOS","title":"Time zone"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/time-zone/#timezone","text":"[jvm] Content val timeZone : TimeZone More info Default timezone. TODO Defining this lazily fails in macOS","title":"timeZone"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/timezone/","text":"// hexagon_core / com.hexagonkt.helpers / Jvm / timezone timezone \u00b6 [jvm] Content val timezone : String","title":"Timezone"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/timezone/#timezone","text":"[jvm] Content val timezone : String","title":"timezone"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/uptime/","text":"// hexagon_core / com.hexagonkt.helpers / Jvm / uptime uptime \u00b6 [jvm] Content fun uptime (): String","title":"Uptime"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/uptime/#uptime","text":"[jvm] Content fun uptime (): String","title":"uptime"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/used-memory/","text":"// hexagon_core / com.hexagonkt.helpers / Jvm / usedMemory usedMemory \u00b6 [jvm] Content fun usedMemory (): String","title":"Used memory"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/used-memory/#usedmemory","text":"[jvm] Content fun usedMemory (): String","title":"usedMemory"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/version/","text":"// hexagon_core / com.hexagonkt.helpers / Jvm / version version \u00b6 [jvm] Content val version : String","title":"Version"},{"location":"hexagon_core/com.hexagonkt.helpers/-jvm/version/#version","text":"[jvm] Content val version : String","title":"version"},{"location":"hexagon_core/com.hexagonkt.helpers/-multiple-exception/","text":"// hexagon_core / com.hexagonkt.helpers / MultipleException MultipleException \u00b6 [jvm] class MultipleException ( causes : List < Throwable >, message : String ) : RuntimeException Exception with a list of causes. Cause is null as it can't be tell which one of the list is the cause. A coded multiple exception should be created this way: CodedException(400, \"Many errors\", MultipleException()) To pass a list of causes CodedException (500, \"Error\", *list) TODO . Constructors \u00b6 MultipleException [jvm] fun MultipleException (vararg causes: Throwable ) MultipleException [jvm] fun MultipleException (message: String , causes: List < Throwable >) MultipleException [jvm] fun MultipleException (message: String , vararg causes: Throwable ) MultipleException [jvm] fun MultipleException (causes: List < Throwable >, message: String = \"\") Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? causes [jvm] val causes : List < Throwable >. message [jvm] open val message : String ?","title":"Index"},{"location":"hexagon_core/com.hexagonkt.helpers/-multiple-exception/#multipleexception","text":"[jvm] class MultipleException ( causes : List < Throwable >, message : String ) : RuntimeException Exception with a list of causes. Cause is null as it can't be tell which one of the list is the cause. A coded multiple exception should be created this way: CodedException(400, \"Many errors\", MultipleException()) To pass a list of causes CodedException (500, \"Error\", *list) TODO .","title":"MultipleException"},{"location":"hexagon_core/com.hexagonkt.helpers/-multiple-exception/#constructors","text":"MultipleException [jvm] fun MultipleException (vararg causes: Throwable ) MultipleException [jvm] fun MultipleException (message: String , causes: List < Throwable >) MultipleException [jvm] fun MultipleException (message: String , vararg causes: Throwable ) MultipleException [jvm] fun MultipleException (causes: List < Throwable >, message: String = \"\")","title":"Constructors"},{"location":"hexagon_core/com.hexagonkt.helpers/-multiple-exception/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.helpers/-multiple-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? causes [jvm] val causes : List < Throwable >. message [jvm] open val message : String ?","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.helpers/-multiple-exception/-multiple-exception/","text":"// hexagon_core / com.hexagonkt.helpers / MultipleException / MultipleException MultipleException \u00b6 [jvm] Content fun MultipleException (vararg causes: Throwable ) fun MultipleException (message: String , causes: List < Throwable >) fun MultipleException (message: String , vararg causes: Throwable ) fun MultipleException (causes: List < Throwable >, message: String = \"\")","title":" multiple exception"},{"location":"hexagon_core/com.hexagonkt.helpers/-multiple-exception/-multiple-exception/#multipleexception","text":"[jvm] Content fun MultipleException (vararg causes: Throwable ) fun MultipleException (message: String , causes: List < Throwable >) fun MultipleException (message: String , vararg causes: Throwable ) fun MultipleException (causes: List < Throwable >, message: String = \"\")","title":"MultipleException"},{"location":"hexagon_core/com.hexagonkt.helpers/-multiple-exception/causes/","text":"// hexagon_core / com.hexagonkt.helpers / MultipleException / causes causes \u00b6 [jvm] Content val causes : List < Throwable >","title":"Causes"},{"location":"hexagon_core/com.hexagonkt.helpers/-multiple-exception/causes/#causes","text":"[jvm] Content val causes : List < Throwable >","title":"causes"},{"location":"hexagon_core/com.hexagonkt.injection/","text":"// hexagon_core / com.hexagonkt.injection Package com.hexagonkt.injection \u00b6 [jvm] Utilities to bind classes to creation closures or instances, and inject instances of those classes later. Types \u00b6 Name Summary Generator [jvm] Content data class Generator T : Any >( generator : () -> T ) : Provider < T > InjectionManager [jvm] Content object InjectionManager More info Generators registry and utilities. Instance [jvm] Content data class Instance T : Any >( instance : T ) : Provider < T > Provider [jvm] Content sealed class Provider T : Any > Target [jvm] Content data class Target < T : Any >( type : KClass < T >, tag : Any ) Functions \u00b6 Name Summary forceBind [jvm] Content fun < T : Any , R : T > forceBind (type: KClass < T >, instance: R ) fun < T : Any , R : T > forceBind (type: KClass < T >, provider: Provider < R >, tag: Any = Unit) fun < T : Any , R : T > forceBind (type: KClass < T >, tag: Any , instance: R ) fun < T : Any , R : T > forceBind (type: KClass < T >, tag: Any = Unit, provider: () -> R ) forceBindSet [jvm] Content fun < T : Any , R : T > forceBindSet (type: KClass < T >, instances: List < Provider < R >>) fun < T : Any , R : T > forceBindSet (type: KClass < T >, providers: Map < Any , Provider < R >>)","title":"Index"},{"location":"hexagon_core/com.hexagonkt.injection/#package-comhexagonktinjection","text":"[jvm] Utilities to bind classes to creation closures or instances, and inject instances of those classes later.","title":"Package com.hexagonkt.injection"},{"location":"hexagon_core/com.hexagonkt.injection/#types","text":"Name Summary Generator [jvm] Content data class Generator T : Any >( generator : () -> T ) : Provider < T > InjectionManager [jvm] Content object InjectionManager More info Generators registry and utilities. Instance [jvm] Content data class Instance T : Any >( instance : T ) : Provider < T > Provider [jvm] Content sealed class Provider T : Any > Target [jvm] Content data class Target < T : Any >( type : KClass < T >, tag : Any )","title":"Types"},{"location":"hexagon_core/com.hexagonkt.injection/#functions","text":"Name Summary forceBind [jvm] Content fun < T : Any , R : T > forceBind (type: KClass < T >, instance: R ) fun < T : Any , R : T > forceBind (type: KClass < T >, provider: Provider < R >, tag: Any = Unit) fun < T : Any , R : T > forceBind (type: KClass < T >, tag: Any , instance: R ) fun < T : Any , R : T > forceBind (type: KClass < T >, tag: Any = Unit, provider: () -> R ) forceBindSet [jvm] Content fun < T : Any , R : T > forceBindSet (type: KClass < T >, instances: List < Provider < R >>) fun < T : Any , R : T > forceBindSet (type: KClass < T >, providers: Map < Any , Provider < R >>)","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.injection/force-bind-set/","text":"// hexagon_core / com.hexagonkt.injection / forceBindSet forceBindSet \u00b6 [jvm] Content fun < T : Any , R : T > forceBindSet (type: KClass < T >, instances: List < Provider < R >>) fun < T : Any , R : T > forceBindSet (type: KClass < T >, providers: Map < Any , Provider < R >>)","title":"Force bind set"},{"location":"hexagon_core/com.hexagonkt.injection/force-bind-set/#forcebindset","text":"[jvm] Content fun < T : Any , R : T > forceBindSet (type: KClass < T >, instances: List < Provider < R >>) fun < T : Any , R : T > forceBindSet (type: KClass < T >, providers: Map < Any , Provider < R >>)","title":"forceBindSet"},{"location":"hexagon_core/com.hexagonkt.injection/force-bind/","text":"// hexagon_core / com.hexagonkt.injection / forceBind forceBind \u00b6 [jvm] Content fun < T : Any , R : T > forceBind (type: KClass < T >, provider: Provider < R >, tag: Any = Unit) fun < T : Any , R : T > forceBind (type: KClass < T >, tag: Any = Unit, provider: () -> R ) fun < T : Any , R : T > forceBind (type: KClass < T >, tag: Any , instance: R ) fun < T : Any , R : T > forceBind (type: KClass < T >, instance: R )","title":"Force bind"},{"location":"hexagon_core/com.hexagonkt.injection/force-bind/#forcebind","text":"[jvm] Content fun < T : Any , R : T > forceBind (type: KClass < T >, provider: Provider < R >, tag: Any = Unit) fun < T : Any , R : T > forceBind (type: KClass < T >, tag: Any = Unit, provider: () -> R ) fun < T : Any , R : T > forceBind (type: KClass < T >, tag: Any , instance: R ) fun < T : Any , R : T > forceBind (type: KClass < T >, instance: R )","title":"forceBind"},{"location":"hexagon_core/com.hexagonkt.injection/-generator/","text":"// hexagon_core / com.hexagonkt.injection / Generator Generator \u00b6 [jvm] data class Generator T : Any >( generator : () -> T ) : Provider < T > Functions \u00b6 Name Summary provide [jvm] Content open override fun provide (): T Properties \u00b6 Name Summary generator [jvm] val generator : () -> T","title":"Index"},{"location":"hexagon_core/com.hexagonkt.injection/-generator/#generator","text":"[jvm] data class Generator T : Any >( generator : () -> T ) : Provider < T >","title":"Generator"},{"location":"hexagon_core/com.hexagonkt.injection/-generator/#functions","text":"Name Summary provide [jvm] Content open override fun provide (): T","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.injection/-generator/#properties","text":"Name Summary generator [jvm] val generator : () -> T","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.injection/-generator/-generator/","text":"// hexagon_core / com.hexagonkt.injection / Generator / Generator Generator \u00b6 [jvm] Content fun T : Any > Generator (generator: () -> T )","title":" generator"},{"location":"hexagon_core/com.hexagonkt.injection/-generator/-generator/#generator","text":"[jvm] Content fun T : Any > Generator (generator: () -> T )","title":"Generator"},{"location":"hexagon_core/com.hexagonkt.injection/-generator/generator/","text":"// hexagon_core / com.hexagonkt.injection / Generator / generator generator \u00b6 [jvm] Content val generator : () -> T","title":"Generator"},{"location":"hexagon_core/com.hexagonkt.injection/-generator/generator/#generator","text":"[jvm] Content val generator : () -> T","title":"generator"},{"location":"hexagon_core/com.hexagonkt.injection/-generator/provide/","text":"// hexagon_core / com.hexagonkt.injection / Generator / provide provide \u00b6 [jvm] Content open override fun provide (): T","title":"Provide"},{"location":"hexagon_core/com.hexagonkt.injection/-generator/provide/#provide","text":"[jvm] Content open override fun provide (): T","title":"provide"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/","text":"// hexagon_core / com.hexagonkt.injection / InjectionManager InjectionManager \u00b6 [jvm] object InjectionManager Generators registry and utilities. This object keep tracks of supplier functions or specific objects bound to classes. Different suppliers can be bound to the same type using 'tags'. Functions \u00b6 Name Summary bind [jvm] Content inline fun < T : Any > bind (noinline provider: () -> T ) inline fun < T : Any > bind (providers: List <() -> T >) inline fun < T : Any > bind (providers: Map < Any , () -> T >) inline fun < T : Any > bind (instance: T , tag: Any = Unit) inline fun < T : Any > bind (tag: Any , noinline provider: () -> T ) fun < T : Any , R : T > bind (type: KClass < T >, instance: R ) fun < T : Any , R : T > bind (type: KClass < T >, provider: () -> R ) fun < T : Any , R : T > bind (type: KClass < T >, providers: List <() -> R >) fun < T : Any , R : T > bind (type: KClass < T >, providers: Map < Any , () -> R >) fun < T : Any , R : T > bind (type: KClass < T >, instance: R , tag: Any = Unit) fun < T : Any , R : T > bind (type: KClass < T >, provider: Provider < R >, tag: Any = Unit) fun < T : Any , R : T > bind (type: KClass < T >, tag: Any = Unit, provider: () -> R ) bindSet [jvm] Content inline fun < T : Any > bindSet (instances: List < T >) inline fun < T : Any > bindSet (instances: Map < Any , T >) fun < T : Any , R : T > bindSet (type: KClass < T >, instances: List < R >) fun < T : Any , R : T > bindSet (type: KClass < T >, instances: Map < Any , R >) inject [jvm] Content inline fun < T : Any > inject (): T inline fun < T : Any > inject (tag: Any ): T fun < T : Any > inject (type: KClass < T >): T fun < T : Any > inject (type: KClass < T >, tag: Any ): T injectList [jvm] Content fun < T : Any > injectList (type: KClass < T >): List < T > injectMap [jvm] Content fun < T : Any > injectMap (type: KClass < T >): Map < Any , T > injectOrNull [jvm] Content inline fun < T : Any > injectOrNull (): T ? inline fun < T : Any > injectOrNull (tag: Any ): T ? fun < T : Any > injectOrNull (type: KClass < T >): T ? fun < T : Any > injectOrNull (type: KClass < T >, tag: Any ): T ? toString [jvm] Content open override fun toString (): String","title":"Index"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/#injectionmanager","text":"[jvm] object InjectionManager Generators registry and utilities. This object keep tracks of supplier functions or specific objects bound to classes. Different suppliers can be bound to the same type using 'tags'.","title":"InjectionManager"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/#functions","text":"Name Summary bind [jvm] Content inline fun < T : Any > bind (noinline provider: () -> T ) inline fun < T : Any > bind (providers: List <() -> T >) inline fun < T : Any > bind (providers: Map < Any , () -> T >) inline fun < T : Any > bind (instance: T , tag: Any = Unit) inline fun < T : Any > bind (tag: Any , noinline provider: () -> T ) fun < T : Any , R : T > bind (type: KClass < T >, instance: R ) fun < T : Any , R : T > bind (type: KClass < T >, provider: () -> R ) fun < T : Any , R : T > bind (type: KClass < T >, providers: List <() -> R >) fun < T : Any , R : T > bind (type: KClass < T >, providers: Map < Any , () -> R >) fun < T : Any , R : T > bind (type: KClass < T >, instance: R , tag: Any = Unit) fun < T : Any , R : T > bind (type: KClass < T >, provider: Provider < R >, tag: Any = Unit) fun < T : Any , R : T > bind (type: KClass < T >, tag: Any = Unit, provider: () -> R ) bindSet [jvm] Content inline fun < T : Any > bindSet (instances: List < T >) inline fun < T : Any > bindSet (instances: Map < Any , T >) fun < T : Any , R : T > bindSet (type: KClass < T >, instances: List < R >) fun < T : Any , R : T > bindSet (type: KClass < T >, instances: Map < Any , R >) inject [jvm] Content inline fun < T : Any > inject (): T inline fun < T : Any > inject (tag: Any ): T fun < T : Any > inject (type: KClass < T >): T fun < T : Any > inject (type: KClass < T >, tag: Any ): T injectList [jvm] Content fun < T : Any > injectList (type: KClass < T >): List < T > injectMap [jvm] Content fun < T : Any > injectMap (type: KClass < T >): Map < Any , T > injectOrNull [jvm] Content inline fun < T : Any > injectOrNull (): T ? inline fun < T : Any > injectOrNull (tag: Any ): T ? fun < T : Any > injectOrNull (type: KClass < T >): T ? fun < T : Any > injectOrNull (type: KClass < T >, tag: Any ): T ? toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/bind-set/","text":"// hexagon_core / com.hexagonkt.injection / InjectionManager / bindSet bindSet \u00b6 [jvm] Content fun < T : Any , R : T > bindSet (type: KClass < T >, instances: List < R >) inline fun < T : Any > bindSet (instances: List < T >) fun < T : Any , R : T > bindSet (type: KClass < T >, instances: Map < Any , R >) inline fun < T : Any > bindSet (instances: Map < Any , T >)","title":"Bind set"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/bind-set/#bindset","text":"[jvm] Content fun < T : Any , R : T > bindSet (type: KClass < T >, instances: List < R >) inline fun < T : Any > bindSet (instances: List < T >) fun < T : Any , R : T > bindSet (type: KClass < T >, instances: Map < Any , R >) inline fun < T : Any > bindSet (instances: Map < Any , T >)","title":"bindSet"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/bind/","text":"// hexagon_core / com.hexagonkt.injection / InjectionManager / bind bind \u00b6 [jvm] Content fun < T : Any , R : T > bind (type: KClass < T >, provider: Provider < R >, tag: Any = Unit) fun < T : Any , R : T > bind (type: KClass < T >, tag: Any = Unit, provider: () -> R ) fun < T : Any , R : T > bind (type: KClass < T >, provider: () -> R ) fun < T : Any , R : T > bind (type: KClass < T >, instance: R , tag: Any = Unit) fun < T : Any , R : T > bind (type: KClass < T >, instance: R ) inline fun < T : Any > bind (tag: Any , noinline provider: () -> T ) inline fun < T : Any > bind (noinline provider: () -> T ) inline fun < T : Any > bind (instance: T , tag: Any = Unit) fun < T : Any , R : T > bind (type: KClass < T >, providers: List <() -> R >) inline fun < T : Any > bind (providers: List <() -> T >) fun < T : Any , R : T > bind (type: KClass < T >, providers: Map < Any , () -> R >) inline fun < T : Any > bind (providers: Map < Any , () -> T >)","title":"Bind"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/bind/#bind","text":"[jvm] Content fun < T : Any , R : T > bind (type: KClass < T >, provider: Provider < R >, tag: Any = Unit) fun < T : Any , R : T > bind (type: KClass < T >, tag: Any = Unit, provider: () -> R ) fun < T : Any , R : T > bind (type: KClass < T >, provider: () -> R ) fun < T : Any , R : T > bind (type: KClass < T >, instance: R , tag: Any = Unit) fun < T : Any , R : T > bind (type: KClass < T >, instance: R ) inline fun < T : Any > bind (tag: Any , noinline provider: () -> T ) inline fun < T : Any > bind (noinline provider: () -> T ) inline fun < T : Any > bind (instance: T , tag: Any = Unit) fun < T : Any , R : T > bind (type: KClass < T >, providers: List <() -> R >) inline fun < T : Any > bind (providers: List <() -> T >) fun < T : Any , R : T > bind (type: KClass < T >, providers: Map < Any , () -> R >) inline fun < T : Any > bind (providers: Map < Any , () -> T >)","title":"bind"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/inject-list/","text":"// hexagon_core / com.hexagonkt.injection / InjectionManager / injectList injectList \u00b6 [jvm] Content fun < T : Any > injectList (type: KClass < T >): List < T >","title":"Inject list"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/inject-list/#injectlist","text":"[jvm] Content fun < T : Any > injectList (type: KClass < T >): List < T >","title":"injectList"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/inject-map/","text":"// hexagon_core / com.hexagonkt.injection / InjectionManager / injectMap injectMap \u00b6 [jvm] Content fun < T : Any > injectMap (type: KClass < T >): Map < Any , T >","title":"Inject map"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/inject-map/#injectmap","text":"[jvm] Content fun < T : Any > injectMap (type: KClass < T >): Map < Any , T >","title":"injectMap"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/inject-or-null/","text":"// hexagon_core / com.hexagonkt.injection / InjectionManager / injectOrNull injectOrNull \u00b6 [jvm] Content fun < T : Any > injectOrNull (type: KClass < T >, tag: Any ): T ? inline fun < T : Any > injectOrNull (tag: Any ): T ? fun < T : Any > injectOrNull (type: KClass < T >): T ? inline fun < T : Any > injectOrNull (): T ?","title":"Inject or null"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/inject-or-null/#injectornull","text":"[jvm] Content fun < T : Any > injectOrNull (type: KClass < T >, tag: Any ): T ? inline fun < T : Any > injectOrNull (tag: Any ): T ? fun < T : Any > injectOrNull (type: KClass < T >): T ? inline fun < T : Any > injectOrNull (): T ?","title":"injectOrNull"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/inject/","text":"// hexagon_core / com.hexagonkt.injection / InjectionManager / inject inject \u00b6 [jvm] Content fun < T : Any > inject (type: KClass < T >, tag: Any ): T inline fun < T : Any > inject (tag: Any ): T fun < T : Any > inject (type: KClass < T >): T inline fun < T : Any > inject (): T","title":"Inject"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/inject/#inject","text":"[jvm] Content fun < T : Any > inject (type: KClass < T >, tag: Any ): T inline fun < T : Any > inject (tag: Any ): T fun < T : Any > inject (type: KClass < T >): T inline fun < T : Any > inject (): T","title":"inject"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/to-string/","text":"// hexagon_core / com.hexagonkt.injection / InjectionManager / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"hexagon_core/com.hexagonkt.injection/-injection-manager/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"hexagon_core/com.hexagonkt.injection/-instance/","text":"// hexagon_core / com.hexagonkt.injection / Instance Instance \u00b6 [jvm] data class Instance T : Any >( instance : T ) : Provider < T > Functions \u00b6 Name Summary provide [jvm] Content open override fun provide (): T Properties \u00b6 Name Summary instance [jvm] val instance : T","title":"Index"},{"location":"hexagon_core/com.hexagonkt.injection/-instance/#instance","text":"[jvm] data class Instance T : Any >( instance : T ) : Provider < T >","title":"Instance"},{"location":"hexagon_core/com.hexagonkt.injection/-instance/#functions","text":"Name Summary provide [jvm] Content open override fun provide (): T","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.injection/-instance/#properties","text":"Name Summary instance [jvm] val instance : T","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.injection/-instance/-instance/","text":"// hexagon_core / com.hexagonkt.injection / Instance / Instance Instance \u00b6 [jvm] Content fun T : Any > Instance (instance: T )","title":" instance"},{"location":"hexagon_core/com.hexagonkt.injection/-instance/-instance/#instance","text":"[jvm] Content fun T : Any > Instance (instance: T )","title":"Instance"},{"location":"hexagon_core/com.hexagonkt.injection/-instance/instance/","text":"// hexagon_core / com.hexagonkt.injection / Instance / instance instance \u00b6 [jvm] Content val instance : T","title":"Instance"},{"location":"hexagon_core/com.hexagonkt.injection/-instance/instance/#instance","text":"[jvm] Content val instance : T","title":"instance"},{"location":"hexagon_core/com.hexagonkt.injection/-instance/provide/","text":"// hexagon_core / com.hexagonkt.injection / Instance / provide provide \u00b6 [jvm] Content open override fun provide (): T","title":"Provide"},{"location":"hexagon_core/com.hexagonkt.injection/-instance/provide/#provide","text":"[jvm] Content open override fun provide (): T","title":"provide"},{"location":"hexagon_core/com.hexagonkt.injection/-provider/","text":"// hexagon_core / com.hexagonkt.injection / Provider Provider \u00b6 [jvm] sealed class Provider T : Any > Functions \u00b6 Name Summary provide [jvm] Content abstract fun provide (): T Inheritors \u00b6 Name Generator Instance","title":"Index"},{"location":"hexagon_core/com.hexagonkt.injection/-provider/#provider","text":"[jvm] sealed class Provider T : Any >","title":"Provider"},{"location":"hexagon_core/com.hexagonkt.injection/-provider/#functions","text":"Name Summary provide [jvm] Content abstract fun provide (): T","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.injection/-provider/#inheritors","text":"Name Generator Instance","title":"Inheritors"},{"location":"hexagon_core/com.hexagonkt.injection/-provider/provide/","text":"// hexagon_core / com.hexagonkt.injection / Provider / provide provide \u00b6 [jvm] Content abstract fun provide (): T","title":"Provide"},{"location":"hexagon_core/com.hexagonkt.injection/-provider/provide/#provide","text":"[jvm] Content abstract fun provide (): T","title":"provide"},{"location":"hexagon_core/com.hexagonkt.injection/-target/","text":"// hexagon_core / com.hexagonkt.injection / Target Target \u00b6 [jvm] data class Target < T : Any >( type : KClass < T >, tag : Any ) Properties \u00b6 Name Summary tag [jvm] val tag : Any type [jvm] val type : KClass < T >","title":"Index"},{"location":"hexagon_core/com.hexagonkt.injection/-target/#target","text":"[jvm] data class Target < T : Any >( type : KClass < T >, tag : Any )","title":"Target"},{"location":"hexagon_core/com.hexagonkt.injection/-target/#properties","text":"Name Summary tag [jvm] val tag : Any type [jvm] val type : KClass < T >","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.injection/-target/-target/","text":"// hexagon_core / com.hexagonkt.injection / Target / Target Target \u00b6 [jvm] Content fun < T : Any > Target (type: KClass < T >, tag: Any = Unit)","title":" target"},{"location":"hexagon_core/com.hexagonkt.injection/-target/-target/#target","text":"[jvm] Content fun < T : Any > Target (type: KClass < T >, tag: Any = Unit)","title":"Target"},{"location":"hexagon_core/com.hexagonkt.injection/-target/tag/","text":"// hexagon_core / com.hexagonkt.injection / Target / tag tag \u00b6 [jvm] Content val tag : Any","title":"Tag"},{"location":"hexagon_core/com.hexagonkt.injection/-target/tag/#tag","text":"[jvm] Content val tag : Any","title":"tag"},{"location":"hexagon_core/com.hexagonkt.injection/-target/type/","text":"// hexagon_core / com.hexagonkt.injection / Target / type type \u00b6 [jvm] Content val type : KClass < T >","title":"Type"},{"location":"hexagon_core/com.hexagonkt.injection/-target/type/#type","text":"[jvm] Content val type : KClass < T >","title":"type"},{"location":"hexagon_core/com.hexagonkt.logging/","text":"// hexagon_core / com.hexagonkt.logging Package com.hexagonkt.logging \u00b6 [jvm] Provides a logging management capabilities abstracting the application from logging libraries. Types \u00b6 Name Summary Logger [jvm] Content class Logger ( name : String ) More info Logger class with Kotlin improvements like lazy evaluation. LoggerPort [jvm] Content interface LoggerPort LoggingLevel [jvm] Content enum LoggingLevel : Enum < LoggingLevel > LoggingManager [jvm] Content object LoggingManager More info TODO . LoggingPort [jvm] Content interface LoggingPort","title":"Index"},{"location":"hexagon_core/com.hexagonkt.logging/#package-comhexagonktlogging","text":"[jvm] Provides a logging management capabilities abstracting the application from logging libraries.","title":"Package com.hexagonkt.logging"},{"location":"hexagon_core/com.hexagonkt.logging/#types","text":"Name Summary Logger [jvm] Content class Logger ( name : String ) More info Logger class with Kotlin improvements like lazy evaluation. LoggerPort [jvm] Content interface LoggerPort LoggingLevel [jvm] Content enum LoggingLevel : Enum < LoggingLevel > LoggingManager [jvm] Content object LoggingManager More info TODO . LoggingPort [jvm] Content interface LoggingPort","title":"Types"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/","text":"// hexagon_core / com.hexagonkt.logging / Logger Logger \u00b6 [jvm] class Logger ( name : String ) Logger class with Kotlin improvements like lazy evaluation. It is backed by a SLF4J compatible logger. Usage example: Samples \u00b6 [jvm] import com.hexagonkt.helpers.Jvm import com.hexagonkt.helpers.logger import com.hexagonkt.injection.InjectionManager import com.hexagonkt.injection.forceBind import com.hexagonkt.logging.Logger import com.hexagonkt.serialization.Json import com.hexagonkt.serialization.SerializationManager import com.hexagonkt.serialization.parse import com.hexagonkt.serialization.serialize import org.junit.jupiter.api.Test import java.time.LocalDate import java.util.Date fun main() { //sampleStart // logger val classLogger: Logger = Logger(Runtime::class) // Logger for the Runtime class val instanceLogger: Logger = Logger(this::class) // Logger for this instance's class logger.info { \"\"\" You can add a quick log without declaring a Logger with 'com.hexagonkt.helpers.logger'. It is a default logger created for the System class (same as Logger(System::class) ). \"\"\" } classLogger.trace { \"Message only evaluated if trace enabled at ${Jvm.id}\" } classLogger.debug { \"Message only evaluated if debug enabled at ${Jvm.id}\" } classLogger.warn { \"Message only evaluated if warn enabled at ${Jvm.id}\" } classLogger.info { \"Message only evaluated if info enabled at ${Jvm.id}\" } val exception = IllegalStateException(\"Exception\") classLogger.warn(exception) { \"Warning with exception\" } classLogger.error(exception) { \"Error message with exception\" } classLogger.error { \"Error without an exception\" } classLogger.time(\"Logs the time used to run the following block of code\") { val message = \"Block of code to be timed\" assert(message.isNotBlank()) } instanceLogger.flare { \"Prints a log that stands out for ease searching\" } // logger //sampleEnd } Parameters \u00b6 jvm name Logger name. It is shown in the logs messages and used for log filtering. Constructors \u00b6 Logger [jvm] fun Logger (type: KClass <*>)Logger class with Kotlin improvements like lazy evaluation. Logger [jvm] fun Logger (name: String )Logger name. Functions \u00b6 Name Summary debug [jvm] Content fun debug (message: () -> Any ?) error [jvm] Content fun error (message: () -> Any ?) fun < E : Throwable > error (exception: E , message: ( E ) -> Any ?) flare [jvm] Content fun flare (message: () -> Any ? = { \"\" }) info [jvm] Content fun info (message: () -> Any ?) time [jvm] Content fun < T > time (message: Any ?, block: () -> T ): T fun < T > time (message: () -> Any ? = { null }, block: () -> T ): T fun time (startNanos: Long , message: () -> Any ? = { \"\" }) trace [jvm] Content fun trace (message: () -> Any ?) warn [jvm] Content fun warn (message: () -> Any ?) fun < E : Throwable > warn (exception: E , message: ( E ) -> Any ?) Properties \u00b6 Name Summary name [jvm] val name : String Logger name.","title":"Index"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/#logger","text":"[jvm] class Logger ( name : String ) Logger class with Kotlin improvements like lazy evaluation. It is backed by a SLF4J compatible logger. Usage example:","title":"Logger"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/#samples","text":"[jvm] import com.hexagonkt.helpers.Jvm import com.hexagonkt.helpers.logger import com.hexagonkt.injection.InjectionManager import com.hexagonkt.injection.forceBind import com.hexagonkt.logging.Logger import com.hexagonkt.serialization.Json import com.hexagonkt.serialization.SerializationManager import com.hexagonkt.serialization.parse import com.hexagonkt.serialization.serialize import org.junit.jupiter.api.Test import java.time.LocalDate import java.util.Date fun main() { //sampleStart // logger val classLogger: Logger = Logger(Runtime::class) // Logger for the Runtime class val instanceLogger: Logger = Logger(this::class) // Logger for this instance's class logger.info { \"\"\" You can add a quick log without declaring a Logger with 'com.hexagonkt.helpers.logger'. It is a default logger created for the System class (same as Logger(System::class) ). \"\"\" } classLogger.trace { \"Message only evaluated if trace enabled at ${Jvm.id}\" } classLogger.debug { \"Message only evaluated if debug enabled at ${Jvm.id}\" } classLogger.warn { \"Message only evaluated if warn enabled at ${Jvm.id}\" } classLogger.info { \"Message only evaluated if info enabled at ${Jvm.id}\" } val exception = IllegalStateException(\"Exception\") classLogger.warn(exception) { \"Warning with exception\" } classLogger.error(exception) { \"Error message with exception\" } classLogger.error { \"Error without an exception\" } classLogger.time(\"Logs the time used to run the following block of code\") { val message = \"Block of code to be timed\" assert(message.isNotBlank()) } instanceLogger.flare { \"Prints a log that stands out for ease searching\" } // logger //sampleEnd }","title":"Samples"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/#parameters","text":"jvm name Logger name. It is shown in the logs messages and used for log filtering.","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/#constructors","text":"Logger [jvm] fun Logger (type: KClass <*>)Logger class with Kotlin improvements like lazy evaluation. Logger [jvm] fun Logger (name: String )Logger name.","title":"Constructors"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/#functions","text":"Name Summary debug [jvm] Content fun debug (message: () -> Any ?) error [jvm] Content fun error (message: () -> Any ?) fun < E : Throwable > error (exception: E , message: ( E ) -> Any ?) flare [jvm] Content fun flare (message: () -> Any ? = { \"\" }) info [jvm] Content fun info (message: () -> Any ?) time [jvm] Content fun < T > time (message: Any ?, block: () -> T ): T fun < T > time (message: () -> Any ? = { null }, block: () -> T ): T fun time (startNanos: Long , message: () -> Any ? = { \"\" }) trace [jvm] Content fun trace (message: () -> Any ?) warn [jvm] Content fun warn (message: () -> Any ?) fun < E : Throwable > warn (exception: E , message: ( E ) -> Any ?)","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/#properties","text":"Name Summary name [jvm] val name : String Logger name.","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/-logger/","text":"// hexagon_core / com.hexagonkt.logging / Logger / Logger Logger \u00b6 [jvm] Content fun Logger (type: KClass <*>) More info Logger class with Kotlin improvements like lazy evaluation. Parameters \u00b6 jvm type Logger type. It is shown in the logs messages and used for log filtering. [jvm] Content fun Logger (name: String ) More info Parameters \u00b6 jvm name Logger name. It is shown in the logs messages and used for log filtering.","title":" logger"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/-logger/#logger","text":"[jvm] Content fun Logger (type: KClass <*>) More info Logger class with Kotlin improvements like lazy evaluation.","title":"Logger"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/-logger/#parameters","text":"jvm type Logger type. It is shown in the logs messages and used for log filtering. [jvm] Content fun Logger (name: String ) More info","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/-logger/#parameters_1","text":"jvm name Logger name. It is shown in the logs messages and used for log filtering.","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/debug/","text":"// hexagon_core / com.hexagonkt.logging / Logger / debug debug \u00b6 [jvm] Content fun debug (message: () -> Any ?)","title":"Debug"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/debug/#debug","text":"[jvm] Content fun debug (message: () -> Any ?)","title":"debug"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/error/","text":"// hexagon_core / com.hexagonkt.logging / Logger / error error \u00b6 [jvm] Content fun error (message: () -> Any ?) fun < E : Throwable > error (exception: E , message: ( E ) -> Any ?)","title":"Error"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/error/#error","text":"[jvm] Content fun error (message: () -> Any ?) fun < E : Throwable > error (exception: E , message: ( E ) -> Any ?)","title":"error"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/flare/","text":"// hexagon_core / com.hexagonkt.logging / Logger / flare flare \u00b6 [jvm] Content fun flare (message: () -> Any ? = { \"\" })","title":"Flare"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/flare/#flare","text":"[jvm] Content fun flare (message: () -> Any ? = { \"\" })","title":"flare"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/info/","text":"// hexagon_core / com.hexagonkt.logging / Logger / info info \u00b6 [jvm] Content fun info (message: () -> Any ?)","title":"Info"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/info/#info","text":"[jvm] Content fun info (message: () -> Any ?)","title":"info"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/name/","text":"// hexagon_core / com.hexagonkt.logging / Logger / name name \u00b6 [jvm] Content val name : String More info Parameters \u00b6 jvm name Logger name. It is shown in the logs messages and used for log filtering.","title":"Name"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/name/#name","text":"[jvm] Content val name : String More info","title":"name"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/name/#parameters","text":"jvm name Logger name. It is shown in the logs messages and used for log filtering.","title":"Parameters"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/time/","text":"// hexagon_core / com.hexagonkt.logging / Logger / time time \u00b6 [jvm] Content fun time (startNanos: Long , message: () -> Any ? = { \"\" }) fun < T > time (message: () -> Any ? = { null }, block: () -> T ): T fun < T > time (message: Any ?, block: () -> T ): T","title":"Time"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/time/#time","text":"[jvm] Content fun time (startNanos: Long , message: () -> Any ? = { \"\" }) fun < T > time (message: () -> Any ? = { null }, block: () -> T ): T fun < T > time (message: Any ?, block: () -> T ): T","title":"time"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/trace/","text":"// hexagon_core / com.hexagonkt.logging / Logger / trace trace \u00b6 [jvm] Content fun trace (message: () -> Any ?)","title":"Trace"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/trace/#trace","text":"[jvm] Content fun trace (message: () -> Any ?)","title":"trace"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/warn/","text":"// hexagon_core / com.hexagonkt.logging / Logger / warn warn \u00b6 [jvm] Content fun warn (message: () -> Any ?) fun < E : Throwable > warn (exception: E , message: ( E ) -> Any ?)","title":"Warn"},{"location":"hexagon_core/com.hexagonkt.logging/-logger/warn/#warn","text":"[jvm] Content fun warn (message: () -> Any ?) fun < E : Throwable > warn (exception: E , message: ( E ) -> Any ?)","title":"warn"},{"location":"hexagon_core/com.hexagonkt.logging/-logger-port/","text":"// hexagon_core / com.hexagonkt.logging / LoggerPort LoggerPort \u00b6 [jvm] interface LoggerPort Functions \u00b6 Name Summary log [jvm] Content abstract fun log (level: LoggingLevel , message: () -> Any ?) abstract fun < E : Throwable > log (level: LoggingLevel , exception: E , message: ( E ) -> Any ?)","title":"Index"},{"location":"hexagon_core/com.hexagonkt.logging/-logger-port/#loggerport","text":"[jvm] interface LoggerPort","title":"LoggerPort"},{"location":"hexagon_core/com.hexagonkt.logging/-logger-port/#functions","text":"Name Summary log [jvm] Content abstract fun log (level: LoggingLevel , message: () -> Any ?) abstract fun < E : Throwable > log (level: LoggingLevel , exception: E , message: ( E ) -> Any ?)","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.logging/-logger-port/log/","text":"// hexagon_core / com.hexagonkt.logging / LoggerPort / log log \u00b6 [jvm] Content abstract fun < E : Throwable > log (level: LoggingLevel , exception: E , message: ( E ) -> Any ?) abstract fun log (level: LoggingLevel , message: () -> Any ?)","title":"Log"},{"location":"hexagon_core/com.hexagonkt.logging/-logger-port/log/#log","text":"[jvm] Content abstract fun < E : Throwable > log (level: LoggingLevel , exception: E , message: ( E ) -> Any ?) abstract fun log (level: LoggingLevel , message: () -> Any ?)","title":"log"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/","text":"// hexagon_core / com.hexagonkt.logging / LoggingLevel LoggingLevel \u00b6 [jvm] enum LoggingLevel : Enum < LoggingLevel > Entries \u00b6 ERROR [jvm] ERROR () WARN [jvm] WARN () INFO [jvm] INFO () DEBUG [jvm] DEBUG () TRACE [jvm] TRACE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/#logginglevel","text":"[jvm] enum LoggingLevel : Enum < LoggingLevel >","title":"LoggingLevel"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/#entries","text":"ERROR [jvm] ERROR () WARN [jvm] WARN () INFO [jvm] INFO () DEBUG [jvm] DEBUG () TRACE [jvm] TRACE ()","title":"Entries"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-d-e-b-u-g/","text":"// hexagon_core / com.hexagonkt.logging / LoggingLevel / DEBUG DEBUG \u00b6 [jvm] DEBUG () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-d-e-b-u-g/#debug","text":"[jvm] DEBUG ()","title":"DEBUG"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-d-e-b-u-g/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-d-e-b-u-g/name/","text":"// hexagon_core / com.hexagonkt.logging / LoggingLevel / DEBUG / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-d-e-b-u-g/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-d-e-b-u-g/ordinal/","text":"// hexagon_core / com.hexagonkt.logging / LoggingLevel / DEBUG / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-d-e-b-u-g/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-e-r-r-o-r/","text":"// hexagon_core / com.hexagonkt.logging / LoggingLevel / ERROR ERROR \u00b6 [jvm] ERROR () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-e-r-r-o-r/#error","text":"[jvm] ERROR ()","title":"ERROR"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-e-r-r-o-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-e-r-r-o-r/name/","text":"// hexagon_core / com.hexagonkt.logging / LoggingLevel / ERROR / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-e-r-r-o-r/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-e-r-r-o-r/ordinal/","text":"// hexagon_core / com.hexagonkt.logging / LoggingLevel / ERROR / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-e-r-r-o-r/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-i-n-f-o/","text":"// hexagon_core / com.hexagonkt.logging / LoggingLevel / INFO INFO \u00b6 [jvm] INFO () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-i-n-f-o/#info","text":"[jvm] INFO ()","title":"INFO"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-i-n-f-o/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-i-n-f-o/name/","text":"// hexagon_core / com.hexagonkt.logging / LoggingLevel / INFO / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-i-n-f-o/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-i-n-f-o/ordinal/","text":"// hexagon_core / com.hexagonkt.logging / LoggingLevel / INFO / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-i-n-f-o/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-t-r-a-c-e/","text":"// hexagon_core / com.hexagonkt.logging / LoggingLevel / TRACE TRACE \u00b6 [jvm] TRACE () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-t-r-a-c-e/#trace","text":"[jvm] TRACE ()","title":"TRACE"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-t-r-a-c-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-t-r-a-c-e/name/","text":"// hexagon_core / com.hexagonkt.logging / LoggingLevel / TRACE / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-t-r-a-c-e/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-t-r-a-c-e/ordinal/","text":"// hexagon_core / com.hexagonkt.logging / LoggingLevel / TRACE / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-t-r-a-c-e/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-w-a-r-n/","text":"// hexagon_core / com.hexagonkt.logging / LoggingLevel / WARN WARN \u00b6 [jvm] WARN () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-w-a-r-n/#warn","text":"[jvm] WARN ()","title":"WARN"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-w-a-r-n/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-w-a-r-n/name/","text":"// hexagon_core / com.hexagonkt.logging / LoggingLevel / WARN / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-w-a-r-n/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-w-a-r-n/ordinal/","text":"// hexagon_core / com.hexagonkt.logging / LoggingLevel / WARN / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-level/-w-a-r-n/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-manager/","text":"// hexagon_core / com.hexagonkt.logging / LoggingManager LoggingManager \u00b6 [jvm] object LoggingManager TODO . Functions \u00b6 Name Summary setLoggerLevel [jvm] Content fun setLoggerLevel (level: LoggingLevel ) fun setLoggerLevel (instance: Any , level: LoggingLevel ) fun setLoggerLevel (name: String , level: LoggingLevel ) fun setLoggerLevel (type: KClass <*>, level: LoggingLevel ) Properties \u00b6 Name Summary adapter [jvm] var adapter : LoggingPort","title":"Index"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-manager/#loggingmanager","text":"[jvm] object LoggingManager TODO .","title":"LoggingManager"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-manager/#functions","text":"Name Summary setLoggerLevel [jvm] Content fun setLoggerLevel (level: LoggingLevel ) fun setLoggerLevel (instance: Any , level: LoggingLevel ) fun setLoggerLevel (name: String , level: LoggingLevel ) fun setLoggerLevel (type: KClass <*>, level: LoggingLevel )","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-manager/#properties","text":"Name Summary adapter [jvm] var adapter : LoggingPort","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-manager/adapter/","text":"// hexagon_core / com.hexagonkt.logging / LoggingManager / adapter adapter \u00b6 [jvm] Content var adapter : LoggingPort","title":"Adapter"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-manager/adapter/#adapter","text":"[jvm] Content var adapter : LoggingPort","title":"adapter"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-manager/set-logger-level/","text":"// hexagon_core / com.hexagonkt.logging / LoggingManager / setLoggerLevel setLoggerLevel \u00b6 [jvm] Content fun setLoggerLevel (name: String , level: LoggingLevel ) fun setLoggerLevel (instance: Any , level: LoggingLevel ) fun setLoggerLevel (type: KClass <*>, level: LoggingLevel ) fun setLoggerLevel (level: LoggingLevel )","title":"Set logger level"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-manager/set-logger-level/#setloggerlevel","text":"[jvm] Content fun setLoggerLevel (name: String , level: LoggingLevel ) fun setLoggerLevel (instance: Any , level: LoggingLevel ) fun setLoggerLevel (type: KClass <*>, level: LoggingLevel ) fun setLoggerLevel (level: LoggingLevel )","title":"setLoggerLevel"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-port/","text":"// hexagon_core / com.hexagonkt.logging / LoggingPort LoggingPort \u00b6 [jvm] interface LoggingPort Functions \u00b6 Name Summary createLogger [jvm] Content abstract fun createLogger (name: String ): LoggerPort setLoggerLevel [jvm] Content abstract fun setLoggerLevel (name: String , level: LoggingLevel ) Inheritors \u00b6 Name JulLoggingAdapter","title":"Index"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-port/#loggingport","text":"[jvm] interface LoggingPort","title":"LoggingPort"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-port/#functions","text":"Name Summary createLogger [jvm] Content abstract fun createLogger (name: String ): LoggerPort setLoggerLevel [jvm] Content abstract fun setLoggerLevel (name: String , level: LoggingLevel )","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-port/#inheritors","text":"Name JulLoggingAdapter","title":"Inheritors"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-port/create-logger/","text":"// hexagon_core / com.hexagonkt.logging / LoggingPort / createLogger createLogger \u00b6 [jvm] Content abstract fun createLogger (name: String ): LoggerPort","title":"Create logger"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-port/create-logger/#createlogger","text":"[jvm] Content abstract fun createLogger (name: String ): LoggerPort","title":"createLogger"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-port/set-logger-level/","text":"// hexagon_core / com.hexagonkt.logging / LoggingPort / setLoggerLevel setLoggerLevel \u00b6 [jvm] Content abstract fun setLoggerLevel (name: String , level: LoggingLevel )","title":"Set logger level"},{"location":"hexagon_core/com.hexagonkt.logging/-logging-port/set-logger-level/#setloggerlevel","text":"[jvm] Content abstract fun setLoggerLevel (name: String , level: LoggingLevel )","title":"setLoggerLevel"},{"location":"hexagon_core/com.hexagonkt.logging.jul/","text":"// hexagon_core / com.hexagonkt.logging.jul Package com.hexagonkt.logging.jul \u00b6 Types \u00b6 Name Summary JulLoggingAdapter [jvm] Content object JulLoggingAdapter : LoggingPort PatternFormat [jvm] Content class PatternFormat ( useColor : Boolean ) : Formatter SystemOutHandler [jvm] Content class SystemOutHandler ( handlerFormatter : Formatter ) : StreamHandler","title":"Index"},{"location":"hexagon_core/com.hexagonkt.logging.jul/#package-comhexagonktloggingjul","text":"","title":"Package com.hexagonkt.logging.jul"},{"location":"hexagon_core/com.hexagonkt.logging.jul/#types","text":"Name Summary JulLoggingAdapter [jvm] Content object JulLoggingAdapter : LoggingPort PatternFormat [jvm] Content class PatternFormat ( useColor : Boolean ) : Formatter SystemOutHandler [jvm] Content class SystemOutHandler ( handlerFormatter : Formatter ) : StreamHandler","title":"Types"},{"location":"hexagon_core/com.hexagonkt.logging.jul/-jul-logging-adapter/","text":"// hexagon_core / com.hexagonkt.logging.jul / JulLoggingAdapter JulLoggingAdapter \u00b6 [jvm] object JulLoggingAdapter : LoggingPort Functions \u00b6 Name Summary createLogger [jvm] Content open override fun createLogger (name: String ): LoggerPort setLoggerLevel [jvm] Content open override fun setLoggerLevel (name: String , level: LoggingLevel )","title":"Index"},{"location":"hexagon_core/com.hexagonkt.logging.jul/-jul-logging-adapter/#julloggingadapter","text":"[jvm] object JulLoggingAdapter : LoggingPort","title":"JulLoggingAdapter"},{"location":"hexagon_core/com.hexagonkt.logging.jul/-jul-logging-adapter/#functions","text":"Name Summary createLogger [jvm] Content open override fun createLogger (name: String ): LoggerPort setLoggerLevel [jvm] Content open override fun setLoggerLevel (name: String , level: LoggingLevel )","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.logging.jul/-jul-logging-adapter/create-logger/","text":"// hexagon_core / com.hexagonkt.logging.jul / JulLoggingAdapter / createLogger createLogger \u00b6 [jvm] Content open override fun createLogger (name: String ): LoggerPort","title":"Create logger"},{"location":"hexagon_core/com.hexagonkt.logging.jul/-jul-logging-adapter/create-logger/#createlogger","text":"[jvm] Content open override fun createLogger (name: String ): LoggerPort","title":"createLogger"},{"location":"hexagon_core/com.hexagonkt.logging.jul/-jul-logging-adapter/set-logger-level/","text":"// hexagon_core / com.hexagonkt.logging.jul / JulLoggingAdapter / setLoggerLevel setLoggerLevel \u00b6 [jvm] Content open override fun setLoggerLevel (name: String , level: LoggingLevel )","title":"Set logger level"},{"location":"hexagon_core/com.hexagonkt.logging.jul/-jul-logging-adapter/set-logger-level/#setloggerlevel","text":"[jvm] Content open override fun setLoggerLevel (name: String , level: LoggingLevel )","title":"setLoggerLevel"},{"location":"hexagon_core/com.hexagonkt.logging.jul/-pattern-format/","text":"// hexagon_core / com.hexagonkt.logging.jul / PatternFormat PatternFormat \u00b6 [jvm] class PatternFormat ( useColor : Boolean ) : Formatter Functions \u00b6 Name Summary format [jvm] Content open override fun format (record: LogRecord ): String formatMessage [jvm] Content open fun formatMessage (p0: LogRecord ): String getHead [jvm] Content open fun getHead (p0: Handler ): String getTail [jvm] Content open fun getTail (p0: Handler ): String","title":"Index"},{"location":"hexagon_core/com.hexagonkt.logging.jul/-pattern-format/#patternformat","text":"[jvm] class PatternFormat ( useColor : Boolean ) : Formatter","title":"PatternFormat"},{"location":"hexagon_core/com.hexagonkt.logging.jul/-pattern-format/#functions","text":"Name Summary format [jvm] Content open override fun format (record: LogRecord ): String formatMessage [jvm] Content open fun formatMessage (p0: LogRecord ): String getHead [jvm] Content open fun getHead (p0: Handler ): String getTail [jvm] Content open fun getTail (p0: Handler ): String","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.logging.jul/-pattern-format/-pattern-format/","text":"// hexagon_core / com.hexagonkt.logging.jul / PatternFormat / PatternFormat PatternFormat \u00b6 [jvm] Content fun PatternFormat (useColor: Boolean = true)","title":" pattern format"},{"location":"hexagon_core/com.hexagonkt.logging.jul/-pattern-format/-pattern-format/#patternformat","text":"[jvm] Content fun PatternFormat (useColor: Boolean = true)","title":"PatternFormat"},{"location":"hexagon_core/com.hexagonkt.logging.jul/-pattern-format/format/","text":"// hexagon_core / com.hexagonkt.logging.jul / PatternFormat / format format \u00b6 [jvm] Content open override fun format (record: LogRecord ): String","title":"Format"},{"location":"hexagon_core/com.hexagonkt.logging.jul/-pattern-format/format/#format","text":"[jvm] Content open override fun format (record: LogRecord ): String","title":"format"},{"location":"hexagon_core/com.hexagonkt.logging.jul/-system-out-handler/","text":"// hexagon_core / com.hexagonkt.logging.jul / SystemOutHandler SystemOutHandler \u00b6 [jvm] class SystemOutHandler ( handlerFormatter : Formatter ) : StreamHandler Functions \u00b6 Name Summary checkPermission [jvm] Content open fun checkPermission () close [jvm] Content open override fun close () flush [jvm] Content open override fun flush () getEncoding [jvm] Content open fun getEncoding (): String getErrorManager [jvm] Content open fun getErrorManager (): ErrorManager getFilter [jvm] Content open fun getFilter (): Filter getFormatter [jvm] Content open fun getFormatter (): Formatter getLevel [jvm] Content open fun getLevel (): Level isLoggable [jvm] Content open override fun isLoggable (p0: LogRecord ): Boolean publish [jvm] Content open override fun publish (record: LogRecord ) reportError [jvm] Content open fun reportError (p0: String , p1: Exception , p2: Int ) setEncoding [jvm] Content open override fun setEncoding (p0: String ) setErrorManager [jvm] Content open fun setErrorManager (p0: ErrorManager ) setFilter [jvm] Content open fun setFilter (p0: Filter ) setFormatter [jvm] Content open fun setFormatter (p0: Formatter ) setLevel [jvm] Content open fun setLevel (p0: Level ) setOutputStream [jvm] Content open fun setOutputStream (p0: OutputStream ) setOutputStreamPrivileged [jvm] Content fun setOutputStreamPrivileged (p0: OutputStream )","title":"Index"},{"location":"hexagon_core/com.hexagonkt.logging.jul/-system-out-handler/#systemouthandler","text":"[jvm] class SystemOutHandler ( handlerFormatter : Formatter ) : StreamHandler","title":"SystemOutHandler"},{"location":"hexagon_core/com.hexagonkt.logging.jul/-system-out-handler/#functions","text":"Name Summary checkPermission [jvm] Content open fun checkPermission () close [jvm] Content open override fun close () flush [jvm] Content open override fun flush () getEncoding [jvm] Content open fun getEncoding (): String getErrorManager [jvm] Content open fun getErrorManager (): ErrorManager getFilter [jvm] Content open fun getFilter (): Filter getFormatter [jvm] Content open fun getFormatter (): Formatter getLevel [jvm] Content open fun getLevel (): Level isLoggable [jvm] Content open override fun isLoggable (p0: LogRecord ): Boolean publish [jvm] Content open override fun publish (record: LogRecord ) reportError [jvm] Content open fun reportError (p0: String , p1: Exception , p2: Int ) setEncoding [jvm] Content open override fun setEncoding (p0: String ) setErrorManager [jvm] Content open fun setErrorManager (p0: ErrorManager ) setFilter [jvm] Content open fun setFilter (p0: Filter ) setFormatter [jvm] Content open fun setFormatter (p0: Formatter ) setLevel [jvm] Content open fun setLevel (p0: Level ) setOutputStream [jvm] Content open fun setOutputStream (p0: OutputStream ) setOutputStreamPrivileged [jvm] Content fun setOutputStreamPrivileged (p0: OutputStream )","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.logging.jul/-system-out-handler/-system-out-handler/","text":"// hexagon_core / com.hexagonkt.logging.jul / SystemOutHandler / SystemOutHandler SystemOutHandler \u00b6 [jvm] Content fun SystemOutHandler (handlerFormatter: Formatter = PatternFormat())","title":" system out handler"},{"location":"hexagon_core/com.hexagonkt.logging.jul/-system-out-handler/-system-out-handler/#systemouthandler","text":"[jvm] Content fun SystemOutHandler (handlerFormatter: Formatter = PatternFormat())","title":"SystemOutHandler"},{"location":"hexagon_core/com.hexagonkt.logging.jul/-system-out-handler/publish/","text":"// hexagon_core / com.hexagonkt.logging.jul / SystemOutHandler / publish publish \u00b6 [jvm] Content open override fun publish (record: LogRecord )","title":"Publish"},{"location":"hexagon_core/com.hexagonkt.logging.jul/-system-out-handler/publish/#publish","text":"[jvm] Content open override fun publish (record: LogRecord )","title":"publish"},{"location":"hexagon_core/com.hexagonkt.security/","text":"// hexagon_core / com.hexagonkt.security Package com.hexagonkt.security \u00b6 Functions \u00b6 Name Summary chainHmac [jvm] Content fun chainHmac (algorithm: String , vararg fields: String ): ByteArray hash [jvm] Content fun hash (algorithm: String , data: ByteArray ): ByteArray fun hash (algorithm: String , data: String ): ByteArray hmac [jvm] Content fun hmac (algorithm: String , data: ByteArray , key: ByteArray ): ByteArray sign [jvm] Content fun sign (algorithm: String , data: String , key: ByteArray ): ByteArray","title":"Index"},{"location":"hexagon_core/com.hexagonkt.security/#package-comhexagonktsecurity","text":"","title":"Package com.hexagonkt.security"},{"location":"hexagon_core/com.hexagonkt.security/#functions","text":"Name Summary chainHmac [jvm] Content fun chainHmac (algorithm: String , vararg fields: String ): ByteArray hash [jvm] Content fun hash (algorithm: String , data: ByteArray ): ByteArray fun hash (algorithm: String , data: String ): ByteArray hmac [jvm] Content fun hmac (algorithm: String , data: ByteArray , key: ByteArray ): ByteArray sign [jvm] Content fun sign (algorithm: String , data: String , key: ByteArray ): ByteArray","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.security/chain-hmac/","text":"// hexagon_core / com.hexagonkt.security / chainHmac chainHmac \u00b6 [jvm] Content fun chainHmac (algorithm: String , vararg fields: String ): ByteArray","title":"Chain hmac"},{"location":"hexagon_core/com.hexagonkt.security/chain-hmac/#chainhmac","text":"[jvm] Content fun chainHmac (algorithm: String , vararg fields: String ): ByteArray","title":"chainHmac"},{"location":"hexagon_core/com.hexagonkt.security/hash/","text":"// hexagon_core / com.hexagonkt.security / hash hash \u00b6 [jvm] Content fun hash (algorithm: String , data: ByteArray ): ByteArray fun hash (algorithm: String , data: String ): ByteArray","title":"Hash"},{"location":"hexagon_core/com.hexagonkt.security/hash/#hash","text":"[jvm] Content fun hash (algorithm: String , data: ByteArray ): ByteArray fun hash (algorithm: String , data: String ): ByteArray","title":"hash"},{"location":"hexagon_core/com.hexagonkt.security/hmac/","text":"// hexagon_core / com.hexagonkt.security / hmac hmac \u00b6 [jvm] Content fun hmac (algorithm: String , data: ByteArray , key: ByteArray ): ByteArray","title":"Hmac"},{"location":"hexagon_core/com.hexagonkt.security/hmac/#hmac","text":"[jvm] Content fun hmac (algorithm: String , data: ByteArray , key: ByteArray ): ByteArray","title":"hmac"},{"location":"hexagon_core/com.hexagonkt.security/sign/","text":"// hexagon_core / com.hexagonkt.security / sign sign \u00b6 [jvm] Content fun sign (algorithm: String , data: String , key: ByteArray ): ByteArray","title":"Sign"},{"location":"hexagon_core/com.hexagonkt.security/sign/#sign","text":"[jvm] Content fun sign (algorithm: String , data: String , key: ByteArray ): ByteArray","title":"sign"},{"location":"hexagon_core/com.hexagonkt.serialization/","text":"// hexagon_core / com.hexagonkt.serialization Package com.hexagonkt.serialization \u00b6 [jvm] Parse/serialize data in different formats to class instances. Types \u00b6 Name Summary ContentType [jvm] Content data class ContentType ( format : SerializationFormat , charset : Charset ?) Mapper [jvm] Content interface Mapper ParseException [jvm] Content class ParseException ( field : String , cause : Throwable ?) : RuntimeException SerializationFormat [jvm] Content interface SerializationFormat SerializationManager [jvm] Content object SerializationManager More info TODOCan be a Serializer immutable class and:object SerializationManager : Serializer(mimeTypesResource, formats) SerializationTest [jvm] Content abstract class SerializationTest T : Any >( type : KClass < T >) Functions \u00b6 Name Summary convertToMap [jvm] Content fun Any . convertToMap (): Map < , > convertToObject [jvm] Content inline fun < T : Any > Map < , >. convertToObject (): T fun < T : Any > Map < , >. convertToObject (type: KClass < T >): T convertToObjects [jvm] Content inline fun < T : Any > List < Map < , >>. convertToObjects (): List < T > fun < T : Any > List < Map < , >>. convertToObjects (type: KClass < T >): List < T > parse [jvm] Content inline fun < T : Any > File . parse (): T inline fun < T : Any > URL . parse (): T fun < T : Any > File . parse (type: KClass < T >): T inline fun < T : Any > InputStream . parse (format: SerializationFormat = requireDefaultFormat()): T fun < T : Any > URL . parse (type: KClass < T >): T inline fun < T : Any > String . parse (format: SerializationFormat = requireDefaultFormat()): T fun < T : Any > InputStream . parse (type: KClass < T >, format: SerializationFormat = requireDefaultFormat()): T fun < T : Any > String . parse (type: KClass < T >, format: SerializationFormat = requireDefaultFormat()): T parseObjects [jvm] Content inline fun < T : Any > File . parseObjects (): List < T > inline fun < T : Any > URL . parseObjects (): List < T > fun < T : Any > File . parseObjects (type: KClass < T >): List < T > inline fun < T : Any > InputStream . parseObjects (format: SerializationFormat = requireDefaultFormat()): List < T > fun < T : Any > URL . parseObjects (type: KClass < T >): List < T > inline fun < T : Any > String . parseObjects (format: SerializationFormat = requireDefaultFormat()): List < T > fun < T : Any > InputStream . parseObjects (type: KClass < T >, format: SerializationFormat = requireDefaultFormat()): List < T > fun < T : Any > String . parseObjects (type: KClass < T >, format: SerializationFormat = requireDefaultFormat()): List < T > serialize [jvm] Content fun Any . serialize (format: SerializationFormat = requireDefaultFormat()): String fun Any . serialize (contentType: String ): String","title":"Index"},{"location":"hexagon_core/com.hexagonkt.serialization/#package-comhexagonktserialization","text":"[jvm] Parse/serialize data in different formats to class instances.","title":"Package com.hexagonkt.serialization"},{"location":"hexagon_core/com.hexagonkt.serialization/#types","text":"Name Summary ContentType [jvm] Content data class ContentType ( format : SerializationFormat , charset : Charset ?) Mapper [jvm] Content interface Mapper ParseException [jvm] Content class ParseException ( field : String , cause : Throwable ?) : RuntimeException SerializationFormat [jvm] Content interface SerializationFormat SerializationManager [jvm] Content object SerializationManager More info TODOCan be a Serializer immutable class and:object SerializationManager : Serializer(mimeTypesResource, formats) SerializationTest [jvm] Content abstract class SerializationTest T : Any >( type : KClass < T >)","title":"Types"},{"location":"hexagon_core/com.hexagonkt.serialization/#functions","text":"Name Summary convertToMap [jvm] Content fun Any . convertToMap (): Map < , > convertToObject [jvm] Content inline fun < T : Any > Map < , >. convertToObject (): T fun < T : Any > Map < , >. convertToObject (type: KClass < T >): T convertToObjects [jvm] Content inline fun < T : Any > List < Map < , >>. convertToObjects (): List < T > fun < T : Any > List < Map < , >>. convertToObjects (type: KClass < T >): List < T > parse [jvm] Content inline fun < T : Any > File . parse (): T inline fun < T : Any > URL . parse (): T fun < T : Any > File . parse (type: KClass < T >): T inline fun < T : Any > InputStream . parse (format: SerializationFormat = requireDefaultFormat()): T fun < T : Any > URL . parse (type: KClass < T >): T inline fun < T : Any > String . parse (format: SerializationFormat = requireDefaultFormat()): T fun < T : Any > InputStream . parse (type: KClass < T >, format: SerializationFormat = requireDefaultFormat()): T fun < T : Any > String . parse (type: KClass < T >, format: SerializationFormat = requireDefaultFormat()): T parseObjects [jvm] Content inline fun < T : Any > File . parseObjects (): List < T > inline fun < T : Any > URL . parseObjects (): List < T > fun < T : Any > File . parseObjects (type: KClass < T >): List < T > inline fun < T : Any > InputStream . parseObjects (format: SerializationFormat = requireDefaultFormat()): List < T > fun < T : Any > URL . parseObjects (type: KClass < T >): List < T > inline fun < T : Any > String . parseObjects (format: SerializationFormat = requireDefaultFormat()): List < T > fun < T : Any > InputStream . parseObjects (type: KClass < T >, format: SerializationFormat = requireDefaultFormat()): List < T > fun < T : Any > String . parseObjects (type: KClass < T >, format: SerializationFormat = requireDefaultFormat()): List < T > serialize [jvm] Content fun Any . serialize (format: SerializationFormat = requireDefaultFormat()): String fun Any . serialize (contentType: String ): String","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.serialization/convert-to-map/","text":"// hexagon_core / com.hexagonkt.serialization / convertToMap convertToMap \u00b6 [jvm] Content fun Any . convertToMap (): Map < , >","title":"Convert to map"},{"location":"hexagon_core/com.hexagonkt.serialization/convert-to-map/#converttomap","text":"[jvm] Content fun Any . convertToMap (): Map < , >","title":"convertToMap"},{"location":"hexagon_core/com.hexagonkt.serialization/convert-to-object/","text":"// hexagon_core / com.hexagonkt.serialization / convertToObject convertToObject \u00b6 [jvm] Content fun < T : Any > Map < , >. convertToObject (type: KClass < T >): T inline fun < T : Any > Map < , >. convertToObject (): T","title":"Convert to object"},{"location":"hexagon_core/com.hexagonkt.serialization/convert-to-object/#converttoobject","text":"[jvm] Content fun < T : Any > Map < , >. convertToObject (type: KClass < T >): T inline fun < T : Any > Map < , >. convertToObject (): T","title":"convertToObject"},{"location":"hexagon_core/com.hexagonkt.serialization/convert-to-objects/","text":"// hexagon_core / com.hexagonkt.serialization / convertToObjects convertToObjects \u00b6 [jvm] Content fun < T : Any > List < Map < , >>. convertToObjects (type: KClass < T >): List < T > inline fun < T : Any > List < Map < , >>. convertToObjects (): List < T >","title":"Convert to objects"},{"location":"hexagon_core/com.hexagonkt.serialization/convert-to-objects/#converttoobjects","text":"[jvm] Content fun < T : Any > List < Map < , >>. convertToObjects (type: KClass < T >): List < T > inline fun < T : Any > List < Map < , >>. convertToObjects (): List < T >","title":"convertToObjects"},{"location":"hexagon_core/com.hexagonkt.serialization/parse-objects/","text":"// hexagon_core / com.hexagonkt.serialization / parseObjects parseObjects \u00b6 [jvm] Content fun < T : Any > InputStream . parseObjects (type: KClass < T >, format: SerializationFormat = requireDefaultFormat()): List < T > inline fun < T : Any > InputStream . parseObjects (format: SerializationFormat = requireDefaultFormat()): List < T > fun < T : Any > String . parseObjects (type: KClass < T >, format: SerializationFormat = requireDefaultFormat()): List < T > inline fun < T : Any > String . parseObjects (format: SerializationFormat = requireDefaultFormat()): List < T > fun < T : Any > File . parseObjects (type: KClass < T >): List < T > inline fun < T : Any > File . parseObjects (): List < T > fun < T : Any > URL . parseObjects (type: KClass < T >): List < T > inline fun < T : Any > URL . parseObjects (): List < T >","title":"Parse objects"},{"location":"hexagon_core/com.hexagonkt.serialization/parse-objects/#parseobjects","text":"[jvm] Content fun < T : Any > InputStream . parseObjects (type: KClass < T >, format: SerializationFormat = requireDefaultFormat()): List < T > inline fun < T : Any > InputStream . parseObjects (format: SerializationFormat = requireDefaultFormat()): List < T > fun < T : Any > String . parseObjects (type: KClass < T >, format: SerializationFormat = requireDefaultFormat()): List < T > inline fun < T : Any > String . parseObjects (format: SerializationFormat = requireDefaultFormat()): List < T > fun < T : Any > File . parseObjects (type: KClass < T >): List < T > inline fun < T : Any > File . parseObjects (): List < T > fun < T : Any > URL . parseObjects (type: KClass < T >): List < T > inline fun < T : Any > URL . parseObjects (): List < T >","title":"parseObjects"},{"location":"hexagon_core/com.hexagonkt.serialization/parse/","text":"// hexagon_core / com.hexagonkt.serialization / parse parse \u00b6 [jvm] Content fun < T : Any > InputStream . parse (type: KClass < T >, format: SerializationFormat = requireDefaultFormat()): T inline fun < T : Any > InputStream . parse (format: SerializationFormat = requireDefaultFormat()): T fun < T : Any > String . parse (type: KClass < T >, format: SerializationFormat = requireDefaultFormat()): T inline fun < T : Any > String . parse (format: SerializationFormat = requireDefaultFormat()): T fun < T : Any > File . parse (type: KClass < T >): T inline fun < T : Any > File . parse (): T fun < T : Any > URL . parse (type: KClass < T >): T inline fun < T : Any > URL . parse (): T","title":"Parse"},{"location":"hexagon_core/com.hexagonkt.serialization/parse/#parse","text":"[jvm] Content fun < T : Any > InputStream . parse (type: KClass < T >, format: SerializationFormat = requireDefaultFormat()): T inline fun < T : Any > InputStream . parse (format: SerializationFormat = requireDefaultFormat()): T fun < T : Any > String . parse (type: KClass < T >, format: SerializationFormat = requireDefaultFormat()): T inline fun < T : Any > String . parse (format: SerializationFormat = requireDefaultFormat()): T fun < T : Any > File . parse (type: KClass < T >): T inline fun < T : Any > File . parse (): T fun < T : Any > URL . parse (type: KClass < T >): T inline fun < T : Any > URL . parse (): T","title":"parse"},{"location":"hexagon_core/com.hexagonkt.serialization/serialize/","text":"// hexagon_core / com.hexagonkt.serialization / serialize serialize \u00b6 [jvm] Content fun Any . serialize (format: SerializationFormat = requireDefaultFormat()): String fun Any . serialize (contentType: String ): String","title":"Serialize"},{"location":"hexagon_core/com.hexagonkt.serialization/serialize/#serialize","text":"[jvm] Content fun Any . serialize (format: SerializationFormat = requireDefaultFormat()): String fun Any . serialize (contentType: String ): String","title":"serialize"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/","text":"// hexagon_core / com.hexagonkt.serialization / ContentType ContentType \u00b6 [jvm] data class ContentType ( format : SerializationFormat , charset : Charset ?) Functions \u00b6 Name Summary toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary charset [jvm] val charset : Charset ? = null format [jvm] val format : SerializationFormat","title":"Index"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/#contenttype","text":"[jvm] data class ContentType ( format : SerializationFormat , charset : Charset ?)","title":"ContentType"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/#functions","text":"Name Summary toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/#properties","text":"Name Summary charset [jvm] val charset : Charset ? = null format [jvm] val format : SerializationFormat","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/-content-type/","text":"// hexagon_core / com.hexagonkt.serialization / ContentType / ContentType ContentType \u00b6 [jvm] Content fun ContentType (format: SerializationFormat , charset: Charset ? = null)","title":" content type"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/-content-type/#contenttype","text":"[jvm] Content fun ContentType (format: SerializationFormat , charset: Charset ? = null)","title":"ContentType"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/charset/","text":"// hexagon_core / com.hexagonkt.serialization / ContentType / charset charset \u00b6 [jvm] Content val charset : Charset ? = null","title":"Charset"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/charset/#charset","text":"[jvm] Content val charset : Charset ? = null","title":"charset"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/format/","text":"// hexagon_core / com.hexagonkt.serialization / ContentType / format format \u00b6 [jvm] Content val format : SerializationFormat","title":"Format"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/format/#format","text":"[jvm] Content val format : SerializationFormat","title":"format"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/to-string/","text":"// hexagon_core / com.hexagonkt.serialization / ContentType / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"hexagon_core/com.hexagonkt.serialization/-content-type/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"hexagon_core/com.hexagonkt.serialization/-mapper/","text":"// hexagon_core / com.hexagonkt.serialization / Mapper Mapper \u00b6 [jvm] interface Mapper Functions \u00b6 Name Summary convertToMap [jvm] Content abstract fun convertToMap (instance: Any ): Map < , > convertToObject [jvm] Content abstract fun < T : Any > convertToObject (map: Map < , >, type: KClass < T >): T","title":"Index"},{"location":"hexagon_core/com.hexagonkt.serialization/-mapper/#mapper","text":"[jvm] interface Mapper","title":"Mapper"},{"location":"hexagon_core/com.hexagonkt.serialization/-mapper/#functions","text":"Name Summary convertToMap [jvm] Content abstract fun convertToMap (instance: Any ): Map < , > convertToObject [jvm] Content abstract fun < T : Any > convertToObject (map: Map < , >, type: KClass < T >): T","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.serialization/-mapper/convert-to-map/","text":"// hexagon_core / com.hexagonkt.serialization / Mapper / convertToMap convertToMap \u00b6 [jvm] Content abstract fun convertToMap (instance: Any ): Map < , >","title":"Convert to map"},{"location":"hexagon_core/com.hexagonkt.serialization/-mapper/convert-to-map/#converttomap","text":"[jvm] Content abstract fun convertToMap (instance: Any ): Map < , >","title":"convertToMap"},{"location":"hexagon_core/com.hexagonkt.serialization/-mapper/convert-to-object/","text":"// hexagon_core / com.hexagonkt.serialization / Mapper / convertToObject convertToObject \u00b6 [jvm] Content abstract fun < T : Any > convertToObject (map: Map < , >, type: KClass < T >): T","title":"Convert to object"},{"location":"hexagon_core/com.hexagonkt.serialization/-mapper/convert-to-object/#converttoobject","text":"[jvm] Content abstract fun < T : Any > convertToObject (map: Map < , >, type: KClass < T >): T","title":"convertToObject"},{"location":"hexagon_core/com.hexagonkt.serialization/-parse-exception/","text":"// hexagon_core / com.hexagonkt.serialization / ParseException ParseException \u00b6 [jvm] class ParseException ( field : String , cause : Throwable ?) : RuntimeException Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? field [jvm] val field : String message [jvm] open val message : String ?","title":"Index"},{"location":"hexagon_core/com.hexagonkt.serialization/-parse-exception/#parseexception","text":"[jvm] class ParseException ( field : String , cause : Throwable ?) : RuntimeException","title":"ParseException"},{"location":"hexagon_core/com.hexagonkt.serialization/-parse-exception/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.serialization/-parse-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? field [jvm] val field : String message [jvm] open val message : String ?","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.serialization/-parse-exception/-parse-exception/","text":"// hexagon_core / com.hexagonkt.serialization / ParseException / ParseException ParseException \u00b6 [jvm] Content fun ParseException (field: String , cause: Throwable ? = null)","title":" parse exception"},{"location":"hexagon_core/com.hexagonkt.serialization/-parse-exception/-parse-exception/#parseexception","text":"[jvm] Content fun ParseException (field: String , cause: Throwable ? = null)","title":"ParseException"},{"location":"hexagon_core/com.hexagonkt.serialization/-parse-exception/field/","text":"// hexagon_core / com.hexagonkt.serialization / ParseException / field field \u00b6 [jvm] Content val field : String","title":"Field"},{"location":"hexagon_core/com.hexagonkt.serialization/-parse-exception/field/#field","text":"[jvm] Content val field : String","title":"field"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/","text":"// hexagon_core / com.hexagonkt.serialization / SerializationFormat SerializationFormat \u00b6 [jvm] interface SerializationFormat Functions \u00b6 Name Summary parse [jvm] Content abstract fun < T : Any > parse (input: InputStream , type: KClass < T >): T parseObjects [jvm] Content abstract fun < T : Any > parseObjects (input: InputStream , type: KClass < T >): List < T > serialize [jvm] Content open fun serialize (obj: Any ): String abstract fun serialize (obj: Any , output: OutputStream ) Properties \u00b6 Name Summary contentType [jvm] abstract val contentType : String extensions [jvm] abstract val extensions : Set < String > isBinary [jvm] abstract val isBinary : Boolean","title":"Index"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/#serializationformat","text":"[jvm] interface SerializationFormat","title":"SerializationFormat"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/#functions","text":"Name Summary parse [jvm] Content abstract fun < T : Any > parse (input: InputStream , type: KClass < T >): T parseObjects [jvm] Content abstract fun < T : Any > parseObjects (input: InputStream , type: KClass < T >): List < T > serialize [jvm] Content open fun serialize (obj: Any ): String abstract fun serialize (obj: Any , output: OutputStream )","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/#properties","text":"Name Summary contentType [jvm] abstract val contentType : String extensions [jvm] abstract val extensions : Set < String > isBinary [jvm] abstract val isBinary : Boolean","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/content-type/","text":"// hexagon_core / com.hexagonkt.serialization / SerializationFormat / contentType contentType \u00b6 [jvm] Content abstract val contentType : String","title":"Content type"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/content-type/#contenttype","text":"[jvm] Content abstract val contentType : String","title":"contentType"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/extensions/","text":"// hexagon_core / com.hexagonkt.serialization / SerializationFormat / extensions extensions \u00b6 [jvm] Content abstract val extensions : Set < String >","title":"Extensions"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/extensions/#extensions","text":"[jvm] Content abstract val extensions : Set < String >","title":"extensions"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/is-binary/","text":"// hexagon_core / com.hexagonkt.serialization / SerializationFormat / isBinary isBinary \u00b6 [jvm] Content abstract val isBinary : Boolean","title":"Is binary"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/is-binary/#isbinary","text":"[jvm] Content abstract val isBinary : Boolean","title":"isBinary"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/parse-objects/","text":"// hexagon_core / com.hexagonkt.serialization / SerializationFormat / parseObjects parseObjects \u00b6 [jvm] Content abstract fun < T : Any > parseObjects (input: InputStream , type: KClass < T >): List < T >","title":"Parse objects"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/parse-objects/#parseobjects","text":"[jvm] Content abstract fun < T : Any > parseObjects (input: InputStream , type: KClass < T >): List < T >","title":"parseObjects"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/parse/","text":"// hexagon_core / com.hexagonkt.serialization / SerializationFormat / parse parse \u00b6 [jvm] Content abstract fun < T : Any > parse (input: InputStream , type: KClass < T >): T","title":"Parse"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/parse/#parse","text":"[jvm] Content abstract fun < T : Any > parse (input: InputStream , type: KClass < T >): T","title":"parse"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/serialize/","text":"// hexagon_core / com.hexagonkt.serialization / SerializationFormat / serialize serialize \u00b6 [jvm] Content abstract fun serialize (obj: Any , output: OutputStream ) open fun serialize (obj: Any ): String","title":"Serialize"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-format/serialize/#serialize","text":"[jvm] Content abstract fun serialize (obj: Any , output: OutputStream ) open fun serialize (obj: Any ): String","title":"serialize"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/","text":"// hexagon_core / com.hexagonkt.serialization / SerializationManager SerializationManager \u00b6 [jvm] object SerializationManager TODO Can be a Serializer immutable class and: object SerializationManager : Serializer(mimeTypesResource, formats) Functions \u00b6 Name Summary contentTypeOf [jvm] Content fun contentTypeOf (file: File ): String ? fun contentTypeOf (url: URL ): String ? fun contentTypeOf (extension: String ): String ? defaultFormat [jvm] Content fun defaultFormat (defaultFormat: SerializationFormat ) formatOf [jvm] Content fun formatOf (file: File ): SerializationFormat fun formatOf (url: URL ): SerializationFormat fun formatOf (contentType: String ): SerializationFormat fun formatOf (contentType: String , defaultFormat: SerializationFormat ): SerializationFormat formats [jvm] Content fun formats (vararg formats: SerializationFormat ) requireDefaultFormat [jvm] Content fun requireDefaultFormat (): SerializationFormat requireMapper [jvm] Content fun requireMapper (): Mapper Properties \u00b6 Name Summary defaultFormat [jvm] var defaultFormat : SerializationFormat ? formats [jvm] var formats : LinkedHashSet < SerializationFormat >List of formats. mapper [jvm] var mapper : Mapper ? = null","title":"Index"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/#serializationmanager","text":"[jvm] object SerializationManager TODO Can be a Serializer immutable class and: object SerializationManager : Serializer(mimeTypesResource, formats)","title":"SerializationManager"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/#functions","text":"Name Summary contentTypeOf [jvm] Content fun contentTypeOf (file: File ): String ? fun contentTypeOf (url: URL ): String ? fun contentTypeOf (extension: String ): String ? defaultFormat [jvm] Content fun defaultFormat (defaultFormat: SerializationFormat ) formatOf [jvm] Content fun formatOf (file: File ): SerializationFormat fun formatOf (url: URL ): SerializationFormat fun formatOf (contentType: String ): SerializationFormat fun formatOf (contentType: String , defaultFormat: SerializationFormat ): SerializationFormat formats [jvm] Content fun formats (vararg formats: SerializationFormat ) requireDefaultFormat [jvm] Content fun requireDefaultFormat (): SerializationFormat requireMapper [jvm] Content fun requireMapper (): Mapper","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/#properties","text":"Name Summary defaultFormat [jvm] var defaultFormat : SerializationFormat ? formats [jvm] var formats : LinkedHashSet < SerializationFormat >List of formats. mapper [jvm] var mapper : Mapper ? = null","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/content-type-of/","text":"// hexagon_core / com.hexagonkt.serialization / SerializationManager / contentTypeOf contentTypeOf \u00b6 [jvm] Content fun contentTypeOf (extension: String ): String ? fun contentTypeOf (url: URL ): String ? fun contentTypeOf (file: File ): String ?","title":"Content type of"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/content-type-of/#contenttypeof","text":"[jvm] Content fun contentTypeOf (extension: String ): String ? fun contentTypeOf (url: URL ): String ? fun contentTypeOf (file: File ): String ?","title":"contentTypeOf"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/default-format/","text":"// hexagon_core / com.hexagonkt.serialization / SerializationManager / defaultFormat defaultFormat \u00b6 [jvm] Content fun defaultFormat (defaultFormat: SerializationFormat ) var defaultFormat : SerializationFormat ?","title":"Default format"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/default-format/#defaultformat","text":"[jvm] Content fun defaultFormat (defaultFormat: SerializationFormat ) var defaultFormat : SerializationFormat ?","title":"defaultFormat"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/format-of/","text":"// hexagon_core / com.hexagonkt.serialization / SerializationManager / formatOf formatOf \u00b6 [jvm] Content fun formatOf (contentType: String ): SerializationFormat fun formatOf (contentType: String , defaultFormat: SerializationFormat ): SerializationFormat fun formatOf (url: URL ): SerializationFormat fun formatOf (file: File ): SerializationFormat","title":"Format of"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/format-of/#formatof","text":"[jvm] Content fun formatOf (contentType: String ): SerializationFormat fun formatOf (contentType: String , defaultFormat: SerializationFormat ): SerializationFormat fun formatOf (url: URL ): SerializationFormat fun formatOf (file: File ): SerializationFormat","title":"formatOf"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/formats/","text":"// hexagon_core / com.hexagonkt.serialization / SerializationManager / formats formats \u00b6 [jvm] Content fun formats (vararg formats: SerializationFormat ) [jvm] Content var formats : LinkedHashSet < SerializationFormat > More info List of formats. NOTE should be defined AFTER mapper definition to avoid runtime issues.","title":"Formats"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/formats/#formats","text":"[jvm] Content fun formats (vararg formats: SerializationFormat ) [jvm] Content var formats : LinkedHashSet < SerializationFormat > More info List of formats. NOTE should be defined AFTER mapper definition to avoid runtime issues.","title":"formats"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/mapper/","text":"// hexagon_core / com.hexagonkt.serialization / SerializationManager / mapper mapper \u00b6 [jvm] Content var mapper : Mapper ? = null","title":"Mapper"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/mapper/#mapper","text":"[jvm] Content var mapper : Mapper ? = null","title":"mapper"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/require-default-format/","text":"// hexagon_core / com.hexagonkt.serialization / SerializationManager / requireDefaultFormat requireDefaultFormat \u00b6 [jvm] Content fun requireDefaultFormat (): SerializationFormat","title":"Require default format"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/require-default-format/#requiredefaultformat","text":"[jvm] Content fun requireDefaultFormat (): SerializationFormat","title":"requireDefaultFormat"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/require-mapper/","text":"// hexagon_core / com.hexagonkt.serialization / SerializationManager / requireMapper requireMapper \u00b6 [jvm] Content fun requireMapper (): Mapper","title":"Require mapper"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-manager/require-mapper/#requiremapper","text":"[jvm] Content fun requireMapper (): Mapper","title":"requireMapper"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-test/","text":"// hexagon_core / com.hexagonkt.serialization / SerializationTest SerializationTest \u00b6 [jvm] abstract class SerializationTest T : Any >( type : KClass < T >) Functions \u00b6 Name Summary initialize [jvm] Content fun initialize () Properties \u00b6 Name Summary testObjects [jvm] abstract val testObjects : List < T > type [jvm] val type : KClass < T >","title":"Index"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-test/#serializationtest","text":"[jvm] abstract class SerializationTest T : Any >( type : KClass < T >)","title":"SerializationTest"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-test/#functions","text":"Name Summary initialize [jvm] Content fun initialize ()","title":"Functions"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-test/#properties","text":"Name Summary testObjects [jvm] abstract val testObjects : List < T > type [jvm] val type : KClass < T >","title":"Properties"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-test/-serialization-test/","text":"// hexagon_core / com.hexagonkt.serialization / SerializationTest / SerializationTest SerializationTest \u00b6 [jvm] Content fun T : Any > SerializationTest (type: KClass < T >)","title":" serialization test"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-test/-serialization-test/#serializationtest","text":"[jvm] Content fun T : Any > SerializationTest (type: KClass < T >)","title":"SerializationTest"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-test/initialize/","text":"// hexagon_core / com.hexagonkt.serialization / SerializationTest / initialize initialize \u00b6 [jvm] Content fun initialize ()","title":"Initialize"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-test/initialize/#initialize","text":"[jvm] Content fun initialize ()","title":"initialize"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-test/test-objects/","text":"// hexagon_core / com.hexagonkt.serialization / SerializationTest / testObjects testObjects \u00b6 [jvm] Content abstract val testObjects : List < T >","title":"Test objects"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-test/test-objects/#testobjects","text":"[jvm] Content abstract val testObjects : List < T >","title":"testObjects"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-test/type/","text":"// hexagon_core / com.hexagonkt.serialization / SerializationTest / type type \u00b6 [jvm] Content val type : KClass < T >","title":"Type"},{"location":"hexagon_core/com.hexagonkt.serialization/-serialization-test/type/#type","text":"[jvm] Content val type : KClass < T >","title":"type"},{"location":"hexagon_http/","text":"// hexagon_http hexagon_http \u00b6 [jvm] This module holds HTTP classes and utilities independent of third party libraries. Packages \u00b6 Name com.hexagonkt.http","title":"Index"},{"location":"hexagon_http/#hexagon_http","text":"[jvm] This module holds HTTP classes and utilities independent of third party libraries.","title":"hexagon_http"},{"location":"hexagon_http/#packages","text":"Name com.hexagonkt.http","title":"Packages"},{"location":"hexagon_http/com.hexagonkt.http/","text":"// hexagon_http / com.hexagonkt.http Package com.hexagonkt.http \u00b6 [jvm] HTTP code shared between clients and servers. Types \u00b6 Name Summary Cookie [jvm] Content data class Cookie ( name : String , value : String , maxAge : Long , secure : Boolean ) Method [jvm] Content enum Method : Enum < Method > More info Enum for the supported HTTP methods. Part [jvm] Content data class Part ( contentType : String ?, headers : Map < String , List < String >>, inputStream : InputStream , name : String , size : Long , submittedFileName : String ?) Path [jvm] Content data class Path ( pattern : String ) More info A path definition. Protocol [jvm] Content enum Protocol : Enum < Protocol > More info Enum for the supported HTTP methods. Route [jvm] Content data class Route ( path : Path , methods : LinkedHashSet < Method >) SslSettings [jvm] Content data class SslSettings ( keyStore : URL ?, keyStorePassword : String , trustStore : URL ?, trustStorePassword : String , clientAuth : Boolean ) Functions \u00b6 Name Summary any [jvm] Content fun any (path: String = \"/\"): Route More info Shortcut to create a route for a filter (with all methods). delete [jvm] Content fun delete (path: String = \"/\"): Route More info Shortcut to create a DELETE route. get [jvm] Content fun get (path: String = \"/\"): Route More info Shortcut to create a GET route. head [jvm] Content fun head (path: String = \"/\"): Route More info Shortcut to create a HEAD route. httpDate [jvm] Content fun httpDate (date: LocalDateTime = LocalDateTime.now()): String options [jvm] Content fun options (path: String = \"/\"): Route More info Shortcut to create a OPTIONS route. parseQueryParameters [jvm] Content fun parseQueryParameters (query: String ): Map < String , List < String >> More info Parse query string such as paramA=valueA&paramB=valueB into a map of several key-value pairs separated by '&' where key is the param name before '=' as String and value is the string after '=' as a list of String (as a query parameter may have many values). patch [jvm] Content fun patch (path: String = \"/\"): Route More info Shortcut to create a PATCH route. post [jvm] Content fun post (path: String = \"/\"): Route More info Shortcut to create a POST route. put [jvm] Content fun put (path: String = \"/\"): Route More info Shortcut to create a PUT route. trace [jvm] Content fun trace (path: String = \"/\"): Route More info Shortcut to create a TRACE route. urlDecode [jvm] Content fun String . urlDecode (): String urlEncode [jvm] Content fun String . urlEncode (): String Properties \u00b6 Name Summary ALL [jvm] val ALL : LinkedHashSet < Method >Set containing all HTTP methods.","title":"Index"},{"location":"hexagon_http/com.hexagonkt.http/#package-comhexagonkthttp","text":"[jvm] HTTP code shared between clients and servers.","title":"Package com.hexagonkt.http"},{"location":"hexagon_http/com.hexagonkt.http/#types","text":"Name Summary Cookie [jvm] Content data class Cookie ( name : String , value : String , maxAge : Long , secure : Boolean ) Method [jvm] Content enum Method : Enum < Method > More info Enum for the supported HTTP methods. Part [jvm] Content data class Part ( contentType : String ?, headers : Map < String , List < String >>, inputStream : InputStream , name : String , size : Long , submittedFileName : String ?) Path [jvm] Content data class Path ( pattern : String ) More info A path definition. Protocol [jvm] Content enum Protocol : Enum < Protocol > More info Enum for the supported HTTP methods. Route [jvm] Content data class Route ( path : Path , methods : LinkedHashSet < Method >) SslSettings [jvm] Content data class SslSettings ( keyStore : URL ?, keyStorePassword : String , trustStore : URL ?, trustStorePassword : String , clientAuth : Boolean )","title":"Types"},{"location":"hexagon_http/com.hexagonkt.http/#functions","text":"Name Summary any [jvm] Content fun any (path: String = \"/\"): Route More info Shortcut to create a route for a filter (with all methods). delete [jvm] Content fun delete (path: String = \"/\"): Route More info Shortcut to create a DELETE route. get [jvm] Content fun get (path: String = \"/\"): Route More info Shortcut to create a GET route. head [jvm] Content fun head (path: String = \"/\"): Route More info Shortcut to create a HEAD route. httpDate [jvm] Content fun httpDate (date: LocalDateTime = LocalDateTime.now()): String options [jvm] Content fun options (path: String = \"/\"): Route More info Shortcut to create a OPTIONS route. parseQueryParameters [jvm] Content fun parseQueryParameters (query: String ): Map < String , List < String >> More info Parse query string such as paramA=valueA&paramB=valueB into a map of several key-value pairs separated by '&' where key is the param name before '=' as String and value is the string after '=' as a list of String (as a query parameter may have many values). patch [jvm] Content fun patch (path: String = \"/\"): Route More info Shortcut to create a PATCH route. post [jvm] Content fun post (path: String = \"/\"): Route More info Shortcut to create a POST route. put [jvm] Content fun put (path: String = \"/\"): Route More info Shortcut to create a PUT route. trace [jvm] Content fun trace (path: String = \"/\"): Route More info Shortcut to create a TRACE route. urlDecode [jvm] Content fun String . urlDecode (): String urlEncode [jvm] Content fun String . urlEncode (): String","title":"Functions"},{"location":"hexagon_http/com.hexagonkt.http/#properties","text":"Name Summary ALL [jvm] val ALL : LinkedHashSet < Method >Set containing all HTTP methods.","title":"Properties"},{"location":"hexagon_http/com.hexagonkt.http/-a-l-l/","text":"// hexagon_http / com.hexagonkt.http / ALL ALL \u00b6 [jvm] Content val ALL : LinkedHashSet < Method > More info Set containing all HTTP methods.","title":" a l l"},{"location":"hexagon_http/com.hexagonkt.http/-a-l-l/#all","text":"[jvm] Content val ALL : LinkedHashSet < Method > More info Set containing all HTTP methods.","title":"ALL"},{"location":"hexagon_http/com.hexagonkt.http/any/","text":"// hexagon_http / com.hexagonkt.http / any any \u00b6 [jvm] Content fun any (path: String = \"/\"): Route More info Shortcut to create a route for a filter (with all methods).","title":"Any"},{"location":"hexagon_http/com.hexagonkt.http/any/#any","text":"[jvm] Content fun any (path: String = \"/\"): Route More info Shortcut to create a route for a filter (with all methods).","title":"any"},{"location":"hexagon_http/com.hexagonkt.http/delete/","text":"// hexagon_http / com.hexagonkt.http / delete delete \u00b6 [jvm] Content fun delete (path: String = \"/\"): Route More info Shortcut to create a DELETE route.","title":"Delete"},{"location":"hexagon_http/com.hexagonkt.http/delete/#delete","text":"[jvm] Content fun delete (path: String = \"/\"): Route More info Shortcut to create a DELETE route.","title":"delete"},{"location":"hexagon_http/com.hexagonkt.http/get/","text":"// hexagon_http / com.hexagonkt.http / get get \u00b6 [jvm] Content fun get (path: String = \"/\"): Route More info Shortcut to create a GET route.","title":"Get"},{"location":"hexagon_http/com.hexagonkt.http/get/#get","text":"[jvm] Content fun get (path: String = \"/\"): Route More info Shortcut to create a GET route.","title":"get"},{"location":"hexagon_http/com.hexagonkt.http/head/","text":"// hexagon_http / com.hexagonkt.http / head head \u00b6 [jvm] Content fun head (path: String = \"/\"): Route More info Shortcut to create a HEAD route.","title":"Head"},{"location":"hexagon_http/com.hexagonkt.http/head/#head","text":"[jvm] Content fun head (path: String = \"/\"): Route More info Shortcut to create a HEAD route.","title":"head"},{"location":"hexagon_http/com.hexagonkt.http/http-date/","text":"// hexagon_http / com.hexagonkt.http / httpDate httpDate \u00b6 [jvm] Content fun httpDate (date: LocalDateTime = LocalDateTime.now()): String","title":"Http date"},{"location":"hexagon_http/com.hexagonkt.http/http-date/#httpdate","text":"[jvm] Content fun httpDate (date: LocalDateTime = LocalDateTime.now()): String","title":"httpDate"},{"location":"hexagon_http/com.hexagonkt.http/options/","text":"// hexagon_http / com.hexagonkt.http / options options \u00b6 [jvm] Content fun options (path: String = \"/\"): Route More info Shortcut to create a OPTIONS route.","title":"Options"},{"location":"hexagon_http/com.hexagonkt.http/options/#options","text":"[jvm] Content fun options (path: String = \"/\"): Route More info Shortcut to create a OPTIONS route.","title":"options"},{"location":"hexagon_http/com.hexagonkt.http/parse-query-parameters/","text":"// hexagon_http / com.hexagonkt.http / parseQueryParameters parseQueryParameters \u00b6 [jvm] Content fun parseQueryParameters (query: String ): Map < String , List < String >> More info Parse query string such as paramA=valueA&paramB=valueB into a map of several key-value pairs separated by '&' where key is the param name before '=' as String and value is the string after '=' as a list of String (as a query parameter may have many values). Note: Missing the '=' sign, or missing value after '=' (e.g foo= or foo) will result into an empty string value. Return \u00b6 Map with query parameter keys bound to a list with their values. Parameters \u00b6 jvm query URL query string. E.g.: param=value&foo=bar.","title":"Parse query parameters"},{"location":"hexagon_http/com.hexagonkt.http/parse-query-parameters/#parsequeryparameters","text":"[jvm] Content fun parseQueryParameters (query: String ): Map < String , List < String >> More info Parse query string such as paramA=valueA&paramB=valueB into a map of several key-value pairs separated by '&' where key is the param name before '=' as String and value is the string after '=' as a list of String (as a query parameter may have many values). Note: Missing the '=' sign, or missing value after '=' (e.g foo= or foo) will result into an empty string value.","title":"parseQueryParameters"},{"location":"hexagon_http/com.hexagonkt.http/parse-query-parameters/#return","text":"Map with query parameter keys bound to a list with their values.","title":"Return"},{"location":"hexagon_http/com.hexagonkt.http/parse-query-parameters/#parameters","text":"jvm query URL query string. E.g.: param=value&foo=bar.","title":"Parameters"},{"location":"hexagon_http/com.hexagonkt.http/patch/","text":"// hexagon_http / com.hexagonkt.http / patch patch \u00b6 [jvm] Content fun patch (path: String = \"/\"): Route More info Shortcut to create a PATCH route.","title":"Patch"},{"location":"hexagon_http/com.hexagonkt.http/patch/#patch","text":"[jvm] Content fun patch (path: String = \"/\"): Route More info Shortcut to create a PATCH route.","title":"patch"},{"location":"hexagon_http/com.hexagonkt.http/post/","text":"// hexagon_http / com.hexagonkt.http / post post \u00b6 [jvm] Content fun post (path: String = \"/\"): Route More info Shortcut to create a POST route.","title":"Post"},{"location":"hexagon_http/com.hexagonkt.http/post/#post","text":"[jvm] Content fun post (path: String = \"/\"): Route More info Shortcut to create a POST route.","title":"post"},{"location":"hexagon_http/com.hexagonkt.http/put/","text":"// hexagon_http / com.hexagonkt.http / put put \u00b6 [jvm] Content fun put (path: String = \"/\"): Route More info Shortcut to create a PUT route.","title":"Put"},{"location":"hexagon_http/com.hexagonkt.http/put/#put","text":"[jvm] Content fun put (path: String = \"/\"): Route More info Shortcut to create a PUT route.","title":"put"},{"location":"hexagon_http/com.hexagonkt.http/trace/","text":"// hexagon_http / com.hexagonkt.http / trace trace \u00b6 [jvm] Content fun trace (path: String = \"/\"): Route More info Shortcut to create a TRACE route.","title":"Trace"},{"location":"hexagon_http/com.hexagonkt.http/trace/#trace","text":"[jvm] Content fun trace (path: String = \"/\"): Route More info Shortcut to create a TRACE route.","title":"trace"},{"location":"hexagon_http/com.hexagonkt.http/url-decode/","text":"// hexagon_http / com.hexagonkt.http / urlDecode urlDecode \u00b6 [jvm] Content fun String . urlDecode (): String","title":"Url decode"},{"location":"hexagon_http/com.hexagonkt.http/url-decode/#urldecode","text":"[jvm] Content fun String . urlDecode (): String","title":"urlDecode"},{"location":"hexagon_http/com.hexagonkt.http/url-encode/","text":"// hexagon_http / com.hexagonkt.http / urlEncode urlEncode \u00b6 [jvm] Content fun String . urlEncode (): String","title":"Url encode"},{"location":"hexagon_http/com.hexagonkt.http/url-encode/#urlencode","text":"[jvm] Content fun String . urlEncode (): String","title":"urlEncode"},{"location":"hexagon_http/com.hexagonkt.http/-cookie/","text":"// hexagon_http / com.hexagonkt.http / Cookie Cookie \u00b6 [jvm] data class Cookie ( name : String , value : String , maxAge : Long , secure : Boolean ) Properties \u00b6 Name Summary maxAge [jvm] val maxAge : Long name [jvm] val name : String secure [jvm] val secure : Boolean = false value [jvm] val value : String","title":"Index"},{"location":"hexagon_http/com.hexagonkt.http/-cookie/#cookie","text":"[jvm] data class Cookie ( name : String , value : String , maxAge : Long , secure : Boolean )","title":"Cookie"},{"location":"hexagon_http/com.hexagonkt.http/-cookie/#properties","text":"Name Summary maxAge [jvm] val maxAge : Long name [jvm] val name : String secure [jvm] val secure : Boolean = false value [jvm] val value : String","title":"Properties"},{"location":"hexagon_http/com.hexagonkt.http/-cookie/-cookie/","text":"// hexagon_http / com.hexagonkt.http / Cookie / Cookie Cookie \u00b6 [jvm] Content fun Cookie (name: String , value: String , maxAge: Long = -1, secure: Boolean = false)","title":" cookie"},{"location":"hexagon_http/com.hexagonkt.http/-cookie/-cookie/#cookie","text":"[jvm] Content fun Cookie (name: String , value: String , maxAge: Long = -1, secure: Boolean = false)","title":"Cookie"},{"location":"hexagon_http/com.hexagonkt.http/-cookie/max-age/","text":"// hexagon_http / com.hexagonkt.http / Cookie / maxAge maxAge \u00b6 [jvm] Content val maxAge : Long","title":"Max age"},{"location":"hexagon_http/com.hexagonkt.http/-cookie/max-age/#maxage","text":"[jvm] Content val maxAge : Long","title":"maxAge"},{"location":"hexagon_http/com.hexagonkt.http/-cookie/name/","text":"// hexagon_http / com.hexagonkt.http / Cookie / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"hexagon_http/com.hexagonkt.http/-cookie/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"hexagon_http/com.hexagonkt.http/-cookie/secure/","text":"// hexagon_http / com.hexagonkt.http / Cookie / secure secure \u00b6 [jvm] Content val secure : Boolean = false","title":"Secure"},{"location":"hexagon_http/com.hexagonkt.http/-cookie/secure/#secure","text":"[jvm] Content val secure : Boolean = false","title":"secure"},{"location":"hexagon_http/com.hexagonkt.http/-cookie/value/","text":"// hexagon_http / com.hexagonkt.http / Cookie / value value \u00b6 [jvm] Content val value : String","title":"Value"},{"location":"hexagon_http/com.hexagonkt.http/-cookie/value/#value","text":"[jvm] Content val value : String","title":"value"},{"location":"hexagon_http/com.hexagonkt.http/-method/","text":"// hexagon_http / com.hexagonkt.http / Method Method \u00b6 [jvm] enum Method : Enum < Method > Enum for the supported HTTP methods. Entries \u00b6 PATCH [jvm] PATCH () HTTP PATCH method. OPTIONS [jvm] OPTIONS () HTTP OPTIONS method. TRACE [jvm] TRACE () HTTP TRACE method. DELETE [jvm] DELETE () HTTP DELETE method. PUT [jvm] PUT () HTTP PUT method. POST [jvm] POST () HTTP POST method. HEAD [jvm] HEAD () HTTP HEAD method. GET [jvm] GET () HTTP GET method. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"hexagon_http/com.hexagonkt.http/-method/#method","text":"[jvm] enum Method : Enum < Method > Enum for the supported HTTP methods.","title":"Method"},{"location":"hexagon_http/com.hexagonkt.http/-method/#entries","text":"PATCH [jvm] PATCH () HTTP PATCH method. OPTIONS [jvm] OPTIONS () HTTP OPTIONS method. TRACE [jvm] TRACE () HTTP TRACE method. DELETE [jvm] DELETE () HTTP DELETE method. PUT [jvm] PUT () HTTP PUT method. POST [jvm] POST () HTTP POST method. HEAD [jvm] HEAD () HTTP HEAD method. GET [jvm] GET () HTTP GET method.","title":"Entries"},{"location":"hexagon_http/com.hexagonkt.http/-method/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"hexagon_http/com.hexagonkt.http/-method/-d-e-l-e-t-e/","text":"// hexagon_http / com.hexagonkt.http / Method / DELETE DELETE \u00b6 [jvm] DELETE () HTTP DELETE method. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"hexagon_http/com.hexagonkt.http/-method/-d-e-l-e-t-e/#delete","text":"[jvm] DELETE () HTTP DELETE method.","title":"DELETE"},{"location":"hexagon_http/com.hexagonkt.http/-method/-d-e-l-e-t-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"hexagon_http/com.hexagonkt.http/-method/-d-e-l-e-t-e/name/","text":"// hexagon_http / com.hexagonkt.http / Method / DELETE / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"hexagon_http/com.hexagonkt.http/-method/-d-e-l-e-t-e/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"hexagon_http/com.hexagonkt.http/-method/-d-e-l-e-t-e/ordinal/","text":"// hexagon_http / com.hexagonkt.http / Method / DELETE / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"hexagon_http/com.hexagonkt.http/-method/-d-e-l-e-t-e/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"hexagon_http/com.hexagonkt.http/-method/-g-e-t/","text":"// hexagon_http / com.hexagonkt.http / Method / GET GET \u00b6 [jvm] GET () HTTP GET method. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"hexagon_http/com.hexagonkt.http/-method/-g-e-t/#get","text":"[jvm] GET () HTTP GET method.","title":"GET"},{"location":"hexagon_http/com.hexagonkt.http/-method/-g-e-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"hexagon_http/com.hexagonkt.http/-method/-g-e-t/name/","text":"// hexagon_http / com.hexagonkt.http / Method / GET / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"hexagon_http/com.hexagonkt.http/-method/-g-e-t/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"hexagon_http/com.hexagonkt.http/-method/-g-e-t/ordinal/","text":"// hexagon_http / com.hexagonkt.http / Method / GET / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"hexagon_http/com.hexagonkt.http/-method/-g-e-t/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"hexagon_http/com.hexagonkt.http/-method/-h-e-a-d/","text":"// hexagon_http / com.hexagonkt.http / Method / HEAD HEAD \u00b6 [jvm] HEAD () HTTP HEAD method. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"hexagon_http/com.hexagonkt.http/-method/-h-e-a-d/#head","text":"[jvm] HEAD () HTTP HEAD method.","title":"HEAD"},{"location":"hexagon_http/com.hexagonkt.http/-method/-h-e-a-d/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"hexagon_http/com.hexagonkt.http/-method/-h-e-a-d/name/","text":"// hexagon_http / com.hexagonkt.http / Method / HEAD / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"hexagon_http/com.hexagonkt.http/-method/-h-e-a-d/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"hexagon_http/com.hexagonkt.http/-method/-h-e-a-d/ordinal/","text":"// hexagon_http / com.hexagonkt.http / Method / HEAD / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"hexagon_http/com.hexagonkt.http/-method/-h-e-a-d/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"hexagon_http/com.hexagonkt.http/-method/-o-p-t-i-o-n-s/","text":"// hexagon_http / com.hexagonkt.http / Method / OPTIONS OPTIONS \u00b6 [jvm] OPTIONS () HTTP OPTIONS method. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"hexagon_http/com.hexagonkt.http/-method/-o-p-t-i-o-n-s/#options","text":"[jvm] OPTIONS () HTTP OPTIONS method.","title":"OPTIONS"},{"location":"hexagon_http/com.hexagonkt.http/-method/-o-p-t-i-o-n-s/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"hexagon_http/com.hexagonkt.http/-method/-o-p-t-i-o-n-s/name/","text":"// hexagon_http / com.hexagonkt.http / Method / OPTIONS / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"hexagon_http/com.hexagonkt.http/-method/-o-p-t-i-o-n-s/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"hexagon_http/com.hexagonkt.http/-method/-o-p-t-i-o-n-s/ordinal/","text":"// hexagon_http / com.hexagonkt.http / Method / OPTIONS / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"hexagon_http/com.hexagonkt.http/-method/-o-p-t-i-o-n-s/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"hexagon_http/com.hexagonkt.http/-method/-p-a-t-c-h/","text":"// hexagon_http / com.hexagonkt.http / Method / PATCH PATCH \u00b6 [jvm] PATCH () HTTP PATCH method. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"hexagon_http/com.hexagonkt.http/-method/-p-a-t-c-h/#patch","text":"[jvm] PATCH () HTTP PATCH method.","title":"PATCH"},{"location":"hexagon_http/com.hexagonkt.http/-method/-p-a-t-c-h/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"hexagon_http/com.hexagonkt.http/-method/-p-a-t-c-h/name/","text":"// hexagon_http / com.hexagonkt.http / Method / PATCH / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"hexagon_http/com.hexagonkt.http/-method/-p-a-t-c-h/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"hexagon_http/com.hexagonkt.http/-method/-p-a-t-c-h/ordinal/","text":"// hexagon_http / com.hexagonkt.http / Method / PATCH / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"hexagon_http/com.hexagonkt.http/-method/-p-a-t-c-h/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"hexagon_http/com.hexagonkt.http/-method/-p-o-s-t/","text":"// hexagon_http / com.hexagonkt.http / Method / POST POST \u00b6 [jvm] POST () HTTP POST method. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"hexagon_http/com.hexagonkt.http/-method/-p-o-s-t/#post","text":"[jvm] POST () HTTP POST method.","title":"POST"},{"location":"hexagon_http/com.hexagonkt.http/-method/-p-o-s-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"hexagon_http/com.hexagonkt.http/-method/-p-o-s-t/name/","text":"// hexagon_http / com.hexagonkt.http / Method / POST / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"hexagon_http/com.hexagonkt.http/-method/-p-o-s-t/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"hexagon_http/com.hexagonkt.http/-method/-p-o-s-t/ordinal/","text":"// hexagon_http / com.hexagonkt.http / Method / POST / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"hexagon_http/com.hexagonkt.http/-method/-p-o-s-t/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"hexagon_http/com.hexagonkt.http/-method/-p-u-t/","text":"// hexagon_http / com.hexagonkt.http / Method / PUT PUT \u00b6 [jvm] PUT () HTTP PUT method. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"hexagon_http/com.hexagonkt.http/-method/-p-u-t/#put","text":"[jvm] PUT () HTTP PUT method.","title":"PUT"},{"location":"hexagon_http/com.hexagonkt.http/-method/-p-u-t/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"hexagon_http/com.hexagonkt.http/-method/-p-u-t/name/","text":"// hexagon_http / com.hexagonkt.http / Method / PUT / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"hexagon_http/com.hexagonkt.http/-method/-p-u-t/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"hexagon_http/com.hexagonkt.http/-method/-p-u-t/ordinal/","text":"// hexagon_http / com.hexagonkt.http / Method / PUT / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"hexagon_http/com.hexagonkt.http/-method/-p-u-t/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"hexagon_http/com.hexagonkt.http/-method/-t-r-a-c-e/","text":"// hexagon_http / com.hexagonkt.http / Method / TRACE TRACE \u00b6 [jvm] TRACE () HTTP TRACE method. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"hexagon_http/com.hexagonkt.http/-method/-t-r-a-c-e/#trace","text":"[jvm] TRACE () HTTP TRACE method.","title":"TRACE"},{"location":"hexagon_http/com.hexagonkt.http/-method/-t-r-a-c-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"hexagon_http/com.hexagonkt.http/-method/-t-r-a-c-e/name/","text":"// hexagon_http / com.hexagonkt.http / Method / TRACE / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"hexagon_http/com.hexagonkt.http/-method/-t-r-a-c-e/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"hexagon_http/com.hexagonkt.http/-method/-t-r-a-c-e/ordinal/","text":"// hexagon_http / com.hexagonkt.http / Method / TRACE / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"hexagon_http/com.hexagonkt.http/-method/-t-r-a-c-e/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"hexagon_http/com.hexagonkt.http/-part/","text":"// hexagon_http / com.hexagonkt.http / Part Part \u00b6 [jvm] data class Part ( contentType : String ?, headers : Map < String , List < String >>, inputStream : InputStream , name : String , size : Long , submittedFileName : String ?) Constructors \u00b6 Part [jvm] fun Part (name: String , value: String ) Part [jvm] fun Part (name: String , inputStream: InputStream , submittedFileName: String ) Properties \u00b6 Name Summary contentType [jvm] val contentType : String ? = null headers [jvm] val headers : Map < String , List < String >> inputStream [jvm] val inputStream : InputStream name [jvm] val name : String size [jvm] val size : Long submittedFileName [jvm] val submittedFileName : String ? = null","title":"Index"},{"location":"hexagon_http/com.hexagonkt.http/-part/#part","text":"[jvm] data class Part ( contentType : String ?, headers : Map < String , List < String >>, inputStream : InputStream , name : String , size : Long , submittedFileName : String ?)","title":"Part"},{"location":"hexagon_http/com.hexagonkt.http/-part/#constructors","text":"Part [jvm] fun Part (name: String , value: String ) Part [jvm] fun Part (name: String , inputStream: InputStream , submittedFileName: String )","title":"Constructors"},{"location":"hexagon_http/com.hexagonkt.http/-part/#properties","text":"Name Summary contentType [jvm] val contentType : String ? = null headers [jvm] val headers : Map < String , List < String >> inputStream [jvm] val inputStream : InputStream name [jvm] val name : String size [jvm] val size : Long submittedFileName [jvm] val submittedFileName : String ? = null","title":"Properties"},{"location":"hexagon_http/com.hexagonkt.http/-part/-part/","text":"// hexagon_http / com.hexagonkt.http / Part / Part Part \u00b6 [jvm] Content fun Part (name: String , value: String ) fun Part (name: String , inputStream: InputStream , submittedFileName: String ) fun Part (contentType: String ? = null, headers: Map < String , List < String >> = emptyMap(), inputStream: InputStream , name: String , size: Long = -1L, submittedFileName: String ? = null)","title":" part"},{"location":"hexagon_http/com.hexagonkt.http/-part/-part/#part","text":"[jvm] Content fun Part (name: String , value: String ) fun Part (name: String , inputStream: InputStream , submittedFileName: String ) fun Part (contentType: String ? = null, headers: Map < String , List < String >> = emptyMap(), inputStream: InputStream , name: String , size: Long = -1L, submittedFileName: String ? = null)","title":"Part"},{"location":"hexagon_http/com.hexagonkt.http/-part/content-type/","text":"// hexagon_http / com.hexagonkt.http / Part / contentType contentType \u00b6 [jvm] Content val contentType : String ? = null","title":"Content type"},{"location":"hexagon_http/com.hexagonkt.http/-part/content-type/#contenttype","text":"[jvm] Content val contentType : String ? = null","title":"contentType"},{"location":"hexagon_http/com.hexagonkt.http/-part/headers/","text":"// hexagon_http / com.hexagonkt.http / Part / headers headers \u00b6 [jvm] Content val headers : Map < String , List < String >>","title":"Headers"},{"location":"hexagon_http/com.hexagonkt.http/-part/headers/#headers","text":"[jvm] Content val headers : Map < String , List < String >>","title":"headers"},{"location":"hexagon_http/com.hexagonkt.http/-part/input-stream/","text":"// hexagon_http / com.hexagonkt.http / Part / inputStream inputStream \u00b6 [jvm] Content val inputStream : InputStream","title":"Input stream"},{"location":"hexagon_http/com.hexagonkt.http/-part/input-stream/#inputstream","text":"[jvm] Content val inputStream : InputStream","title":"inputStream"},{"location":"hexagon_http/com.hexagonkt.http/-part/name/","text":"// hexagon_http / com.hexagonkt.http / Part / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"hexagon_http/com.hexagonkt.http/-part/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"hexagon_http/com.hexagonkt.http/-part/size/","text":"// hexagon_http / com.hexagonkt.http / Part / size size \u00b6 [jvm] Content val size : Long","title":"Size"},{"location":"hexagon_http/com.hexagonkt.http/-part/size/#size","text":"[jvm] Content val size : Long","title":"size"},{"location":"hexagon_http/com.hexagonkt.http/-part/submitted-file-name/","text":"// hexagon_http / com.hexagonkt.http / Part / submittedFileName submittedFileName \u00b6 [jvm] Content val submittedFileName : String ? = null","title":"Submitted file name"},{"location":"hexagon_http/com.hexagonkt.http/-part/submitted-file-name/#submittedfilename","text":"[jvm] Content val submittedFileName : String ? = null","title":"submittedFileName"},{"location":"hexagon_http/com.hexagonkt.http/-path/","text":"// hexagon_http / com.hexagonkt.http / Path Path \u00b6 [jvm] data class Path ( pattern : String ) A path definition. It parses path patterns and extract values for parameters. Differences with Sinatra: No splats (you can use named parameters though) Delimiter is {var} to conform with [RFC 6570](https://tools.ietf.org/html/rfc6570) Constructors \u00b6 Path [jvm] fun Path (pattern: String ) Functions \u00b6 Name Summary create [jvm] Content fun create (vararg parameters: Pair < String , Any >): String extractParameters [jvm] Content fun extractParameters (requestUrl: String ): Map < String , String > matches [jvm] Content fun matches (requestUrl: String ): Boolean Properties \u00b6 Name Summary hasParameters [jvm] val hasParameters : Boolean hasWildcards [jvm] val hasWildcards : Boolean parameterIndex [jvm] val parameterIndex : List < String > pattern [jvm] val pattern : String regex [jvm] val regex : Regex ? segments [jvm] val segments : List < String >","title":"Index"},{"location":"hexagon_http/com.hexagonkt.http/-path/#path","text":"[jvm] data class Path ( pattern : String ) A path definition. It parses path patterns and extract values for parameters. Differences with Sinatra: No splats (you can use named parameters though) Delimiter is {var} to conform with [RFC 6570](https://tools.ietf.org/html/rfc6570)","title":"Path"},{"location":"hexagon_http/com.hexagonkt.http/-path/#constructors","text":"Path [jvm] fun Path (pattern: String )","title":"Constructors"},{"location":"hexagon_http/com.hexagonkt.http/-path/#functions","text":"Name Summary create [jvm] Content fun create (vararg parameters: Pair < String , Any >): String extractParameters [jvm] Content fun extractParameters (requestUrl: String ): Map < String , String > matches [jvm] Content fun matches (requestUrl: String ): Boolean","title":"Functions"},{"location":"hexagon_http/com.hexagonkt.http/-path/#properties","text":"Name Summary hasParameters [jvm] val hasParameters : Boolean hasWildcards [jvm] val hasWildcards : Boolean parameterIndex [jvm] val parameterIndex : List < String > pattern [jvm] val pattern : String regex [jvm] val regex : Regex ? segments [jvm] val segments : List < String >","title":"Properties"},{"location":"hexagon_http/com.hexagonkt.http/-path/-path/","text":"// hexagon_http / com.hexagonkt.http / Path / Path Path \u00b6 [jvm] Content fun Path (pattern: String )","title":" path"},{"location":"hexagon_http/com.hexagonkt.http/-path/-path/#path","text":"[jvm] Content fun Path (pattern: String )","title":"Path"},{"location":"hexagon_http/com.hexagonkt.http/-path/create/","text":"// hexagon_http / com.hexagonkt.http / Path / create create \u00b6 [jvm] Content fun create (vararg parameters: Pair < String , Any >): String","title":"Create"},{"location":"hexagon_http/com.hexagonkt.http/-path/create/#create","text":"[jvm] Content fun create (vararg parameters: Pair < String , Any >): String","title":"create"},{"location":"hexagon_http/com.hexagonkt.http/-path/extract-parameters/","text":"// hexagon_http / com.hexagonkt.http / Path / extractParameters extractParameters \u00b6 [jvm] Content fun extractParameters (requestUrl: String ): Map < String , String >","title":"Extract parameters"},{"location":"hexagon_http/com.hexagonkt.http/-path/extract-parameters/#extractparameters","text":"[jvm] Content fun extractParameters (requestUrl: String ): Map < String , String >","title":"extractParameters"},{"location":"hexagon_http/com.hexagonkt.http/-path/has-parameters/","text":"// hexagon_http / com.hexagonkt.http / Path / hasParameters hasParameters \u00b6 [jvm] Content val hasParameters : Boolean","title":"Has parameters"},{"location":"hexagon_http/com.hexagonkt.http/-path/has-parameters/#hasparameters","text":"[jvm] Content val hasParameters : Boolean","title":"hasParameters"},{"location":"hexagon_http/com.hexagonkt.http/-path/has-wildcards/","text":"// hexagon_http / com.hexagonkt.http / Path / hasWildcards hasWildcards \u00b6 [jvm] Content val hasWildcards : Boolean","title":"Has wildcards"},{"location":"hexagon_http/com.hexagonkt.http/-path/has-wildcards/#haswildcards","text":"[jvm] Content val hasWildcards : Boolean","title":"hasWildcards"},{"location":"hexagon_http/com.hexagonkt.http/-path/matches/","text":"// hexagon_http / com.hexagonkt.http / Path / matches matches \u00b6 [jvm] Content fun matches (requestUrl: String ): Boolean","title":"Matches"},{"location":"hexagon_http/com.hexagonkt.http/-path/matches/#matches","text":"[jvm] Content fun matches (requestUrl: String ): Boolean","title":"matches"},{"location":"hexagon_http/com.hexagonkt.http/-path/parameter-index/","text":"// hexagon_http / com.hexagonkt.http / Path / parameterIndex parameterIndex \u00b6 [jvm] Content val parameterIndex : List < String >","title":"Parameter index"},{"location":"hexagon_http/com.hexagonkt.http/-path/parameter-index/#parameterindex","text":"[jvm] Content val parameterIndex : List < String >","title":"parameterIndex"},{"location":"hexagon_http/com.hexagonkt.http/-path/pattern/","text":"// hexagon_http / com.hexagonkt.http / Path / pattern pattern \u00b6 [jvm] Content val pattern : String","title":"Pattern"},{"location":"hexagon_http/com.hexagonkt.http/-path/pattern/#pattern","text":"[jvm] Content val pattern : String","title":"pattern"},{"location":"hexagon_http/com.hexagonkt.http/-path/regex/","text":"// hexagon_http / com.hexagonkt.http / Path / regex regex \u00b6 [jvm] Content val regex : Regex ?","title":"Regex"},{"location":"hexagon_http/com.hexagonkt.http/-path/regex/#regex","text":"[jvm] Content val regex : Regex ?","title":"regex"},{"location":"hexagon_http/com.hexagonkt.http/-path/segments/","text":"// hexagon_http / com.hexagonkt.http / Path / segments segments \u00b6 [jvm] Content val segments : List < String >","title":"Segments"},{"location":"hexagon_http/com.hexagonkt.http/-path/segments/#segments","text":"[jvm] Content val segments : List < String >","title":"segments"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/","text":"// hexagon_http / com.hexagonkt.http / Protocol Protocol \u00b6 [jvm] enum Protocol : Enum < Protocol > Enum for the supported HTTP methods. Entries \u00b6 HTTP2 [jvm] HTTP2 () HTTP POST method. HTTPS [jvm] HTTPS () HTTP HEAD method. HTTP [jvm] HTTP () HTTP GET method. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/#protocol","text":"[jvm] enum Protocol : Enum < Protocol > Enum for the supported HTTP methods.","title":"Protocol"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/#entries","text":"HTTP2 [jvm] HTTP2 () HTTP POST method. HTTPS [jvm] HTTPS () HTTP HEAD method. HTTP [jvm] HTTP () HTTP GET method.","title":"Entries"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/-h-t-t-p/","text":"// hexagon_http / com.hexagonkt.http / Protocol / HTTP HTTP \u00b6 [jvm] HTTP () HTTP GET method. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/-h-t-t-p/#http","text":"[jvm] HTTP () HTTP GET method.","title":"HTTP"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/-h-t-t-p/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/-h-t-t-p/name/","text":"// hexagon_http / com.hexagonkt.http / Protocol / HTTP / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/-h-t-t-p/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/-h-t-t-p/ordinal/","text":"// hexagon_http / com.hexagonkt.http / Protocol / HTTP / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/-h-t-t-p/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/-h-t-t-p-s/","text":"// hexagon_http / com.hexagonkt.http / Protocol / HTTPS HTTPS \u00b6 [jvm] HTTPS () HTTP HEAD method. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/-h-t-t-p-s/#https","text":"[jvm] HTTPS () HTTP HEAD method.","title":"HTTPS"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/-h-t-t-p-s/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/-h-t-t-p-s/name/","text":"// hexagon_http / com.hexagonkt.http / Protocol / HTTPS / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/-h-t-t-p-s/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/-h-t-t-p-s/ordinal/","text":"// hexagon_http / com.hexagonkt.http / Protocol / HTTPS / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/-h-t-t-p-s/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/-h-t-t-p2/","text":"// hexagon_http / com.hexagonkt.http / Protocol / HTTP2 HTTP2 \u00b6 [jvm] HTTP2 () HTTP POST method. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/-h-t-t-p2/#http2","text":"[jvm] HTTP2 () HTTP POST method.","title":"HTTP2"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/-h-t-t-p2/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/-h-t-t-p2/name/","text":"// hexagon_http / com.hexagonkt.http / Protocol / HTTP2 / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/-h-t-t-p2/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/-h-t-t-p2/ordinal/","text":"// hexagon_http / com.hexagonkt.http / Protocol / HTTP2 / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"hexagon_http/com.hexagonkt.http/-protocol/-h-t-t-p2/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"hexagon_http/com.hexagonkt.http/-route/","text":"// hexagon_http / com.hexagonkt.http / Route Route \u00b6 [jvm] data class Route ( path : Path , methods : LinkedHashSet < Method >) Constructors \u00b6 Route [jvm] fun Route (path: Path , vararg methods: Method ) Route [jvm] fun Route (path: String , vararg methods: Method ) Functions \u00b6 Name Summary list [jvm] Content fun list (): List < Route > Properties \u00b6 Name Summary methods [jvm] val methods : LinkedHashSet < Method > path [jvm] val path : Path","title":"Index"},{"location":"hexagon_http/com.hexagonkt.http/-route/#route","text":"[jvm] data class Route ( path : Path , methods : LinkedHashSet < Method >)","title":"Route"},{"location":"hexagon_http/com.hexagonkt.http/-route/#constructors","text":"Route [jvm] fun Route (path: Path , vararg methods: Method ) Route [jvm] fun Route (path: String , vararg methods: Method )","title":"Constructors"},{"location":"hexagon_http/com.hexagonkt.http/-route/#functions","text":"Name Summary list [jvm] Content fun list (): List < Route >","title":"Functions"},{"location":"hexagon_http/com.hexagonkt.http/-route/#properties","text":"Name Summary methods [jvm] val methods : LinkedHashSet < Method > path [jvm] val path : Path","title":"Properties"},{"location":"hexagon_http/com.hexagonkt.http/-route/-route/","text":"// hexagon_http / com.hexagonkt.http / Route / Route Route \u00b6 [jvm] Content fun Route (path: Path , vararg methods: Method ) fun Route (path: String , vararg methods: Method ) fun Route (path: Path , methods: LinkedHashSet < Method >)","title":" route"},{"location":"hexagon_http/com.hexagonkt.http/-route/-route/#route","text":"[jvm] Content fun Route (path: Path , vararg methods: Method ) fun Route (path: String , vararg methods: Method ) fun Route (path: Path , methods: LinkedHashSet < Method >)","title":"Route"},{"location":"hexagon_http/com.hexagonkt.http/-route/list/","text":"// hexagon_http / com.hexagonkt.http / Route / list list \u00b6 [jvm] Content fun list (): List < Route >","title":"List"},{"location":"hexagon_http/com.hexagonkt.http/-route/list/#list","text":"[jvm] Content fun list (): List < Route >","title":"list"},{"location":"hexagon_http/com.hexagonkt.http/-route/methods/","text":"// hexagon_http / com.hexagonkt.http / Route / methods methods \u00b6 [jvm] Content val methods : LinkedHashSet < Method >","title":"Methods"},{"location":"hexagon_http/com.hexagonkt.http/-route/methods/#methods","text":"[jvm] Content val methods : LinkedHashSet < Method >","title":"methods"},{"location":"hexagon_http/com.hexagonkt.http/-route/path/","text":"// hexagon_http / com.hexagonkt.http / Route / path path \u00b6 [jvm] Content val path : Path","title":"Path"},{"location":"hexagon_http/com.hexagonkt.http/-route/path/#path","text":"[jvm] Content val path : Path","title":"path"},{"location":"hexagon_http/com.hexagonkt.http/-ssl-settings/","text":"// hexagon_http / com.hexagonkt.http / SslSettings SslSettings \u00b6 [jvm] data class SslSettings ( keyStore : URL ?, keyStorePassword : String , trustStore : URL ?, trustStorePassword : String , clientAuth : Boolean ) Properties \u00b6 Name Summary clientAuth [jvm] val clientAuth : Boolean = false keyStore [jvm] val keyStore : URL ? = null keyStorePassword [jvm] val keyStorePassword : String trustStore [jvm] val trustStore : URL ? = null trustStorePassword [jvm] val trustStorePassword : String","title":"Index"},{"location":"hexagon_http/com.hexagonkt.http/-ssl-settings/#sslsettings","text":"[jvm] data class SslSettings ( keyStore : URL ?, keyStorePassword : String , trustStore : URL ?, trustStorePassword : String , clientAuth : Boolean )","title":"SslSettings"},{"location":"hexagon_http/com.hexagonkt.http/-ssl-settings/#properties","text":"Name Summary clientAuth [jvm] val clientAuth : Boolean = false keyStore [jvm] val keyStore : URL ? = null keyStorePassword [jvm] val keyStorePassword : String trustStore [jvm] val trustStore : URL ? = null trustStorePassword [jvm] val trustStorePassword : String","title":"Properties"},{"location":"hexagon_http/com.hexagonkt.http/-ssl-settings/-ssl-settings/","text":"// hexagon_http / com.hexagonkt.http / SslSettings / SslSettings SslSettings \u00b6 [jvm] Content fun SslSettings (keyStore: URL ? = null, keyStorePassword: String = \"\", trustStore: URL ? = null, trustStorePassword: String = \"\", clientAuth: Boolean = false)","title":" ssl settings"},{"location":"hexagon_http/com.hexagonkt.http/-ssl-settings/-ssl-settings/#sslsettings","text":"[jvm] Content fun SslSettings (keyStore: URL ? = null, keyStorePassword: String = \"\", trustStore: URL ? = null, trustStorePassword: String = \"\", clientAuth: Boolean = false)","title":"SslSettings"},{"location":"hexagon_http/com.hexagonkt.http/-ssl-settings/client-auth/","text":"// hexagon_http / com.hexagonkt.http / SslSettings / clientAuth clientAuth \u00b6 [jvm] Content val clientAuth : Boolean = false","title":"Client auth"},{"location":"hexagon_http/com.hexagonkt.http/-ssl-settings/client-auth/#clientauth","text":"[jvm] Content val clientAuth : Boolean = false","title":"clientAuth"},{"location":"hexagon_http/com.hexagonkt.http/-ssl-settings/key-store-password/","text":"// hexagon_http / com.hexagonkt.http / SslSettings / keyStorePassword keyStorePassword \u00b6 [jvm] Content val keyStorePassword : String","title":"Key store password"},{"location":"hexagon_http/com.hexagonkt.http/-ssl-settings/key-store-password/#keystorepassword","text":"[jvm] Content val keyStorePassword : String","title":"keyStorePassword"},{"location":"hexagon_http/com.hexagonkt.http/-ssl-settings/key-store/","text":"// hexagon_http / com.hexagonkt.http / SslSettings / keyStore keyStore \u00b6 [jvm] Content val keyStore : URL ? = null","title":"Key store"},{"location":"hexagon_http/com.hexagonkt.http/-ssl-settings/key-store/#keystore","text":"[jvm] Content val keyStore : URL ? = null","title":"keyStore"},{"location":"hexagon_http/com.hexagonkt.http/-ssl-settings/trust-store-password/","text":"// hexagon_http / com.hexagonkt.http / SslSettings / trustStorePassword trustStorePassword \u00b6 [jvm] Content val trustStorePassword : String","title":"Trust store password"},{"location":"hexagon_http/com.hexagonkt.http/-ssl-settings/trust-store-password/#truststorepassword","text":"[jvm] Content val trustStorePassword : String","title":"trustStorePassword"},{"location":"hexagon_http/com.hexagonkt.http/-ssl-settings/trust-store/","text":"// hexagon_http / com.hexagonkt.http / SslSettings / trustStore trustStore \u00b6 [jvm] Content val trustStore : URL ? = null","title":"Trust store"},{"location":"hexagon_http/com.hexagonkt.http/-ssl-settings/trust-store/#truststore","text":"[jvm] Content val trustStore : URL ? = null","title":"trustStore"},{"location":"hexagon_scheduler/","text":"// hexagon_scheduler hexagon_scheduler \u00b6 [jvm] Provides repeated tasks execution based on Cron expressions for Hexagon framework. It uses the Cron-utils Java Library. !!! Note In some platforms (i.e.: Kubernetes) there is a way to execute repeated tasks, you could take advantage of them, as using your own service will raise problems scaling those services' instances (you will have to coordinate them). This feature does not include any sort of synchronization if you have many instances of a scheduler service. If you want your scheduled jobs to be executed just once, you have to take care of synchronization yourself. Install Dependency \u00b6 build.gradle 1 2 3 4 5 repositories { mavenCentral () } implementation ( \"com.hexagonkt:hexagon_scheduler:$hexagonVersion\" ) pom.xml 1 2 3 4 5 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> hexagon_scheduler </artifactId> <version> $hexagonVersion </version> </dependency> Example \u00b6 You can check a usage example in the following code: Packages \u00b6 Name com.hexagonkt.scheduler","title":"Scheduler"},{"location":"hexagon_scheduler/#hexagon_scheduler","text":"[jvm] Provides repeated tasks execution based on Cron expressions for Hexagon framework. It uses the Cron-utils Java Library. !!! Note In some platforms (i.e.: Kubernetes) there is a way to execute repeated tasks, you could take advantage of them, as using your own service will raise problems scaling those services' instances (you will have to coordinate them). This feature does not include any sort of synchronization if you have many instances of a scheduler service. If you want your scheduled jobs to be executed just once, you have to take care of synchronization yourself.","title":"hexagon_scheduler"},{"location":"hexagon_scheduler/#install-dependency","text":"build.gradle 1 2 3 4 5 repositories { mavenCentral () } implementation ( \"com.hexagonkt:hexagon_scheduler:$hexagonVersion\" ) pom.xml 1 2 3 4 5 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> hexagon_scheduler </artifactId> <version> $hexagonVersion </version> </dependency>","title":"Install Dependency"},{"location":"hexagon_scheduler/#example","text":"You can check a usage example in the following code:","title":"Example"},{"location":"hexagon_scheduler/#packages","text":"Name com.hexagonkt.scheduler","title":"Packages"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/","text":"// hexagon_scheduler / com.hexagonkt.scheduler Package com.hexagonkt.scheduler \u00b6 [jvm] Classes for scheduling blocks of code repeatedly based on a Cron expression. Types \u00b6 Name Summary CronScheduler [jvm] Content class CronScheduler ( threads : Int ) More info Scheduler to execute tasks repeatedly.","title":"Index"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/#package-comhexagonktscheduler","text":"[jvm] Classes for scheduling blocks of code repeatedly based on a Cron expression.","title":"Package com.hexagonkt.scheduler"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/#types","text":"Name Summary CronScheduler [jvm] Content class CronScheduler ( threads : Int ) More info Scheduler to execute tasks repeatedly.","title":"Types"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/","text":"// hexagon_scheduler / com.hexagonkt.scheduler / CronScheduler CronScheduler \u00b6 [jvm] class CronScheduler ( threads : Int ) Scheduler to execute tasks repeatedly. After using it, you should call the shutdown method. If the JVM finishes without calling shutdown , it will be called upon JVM termination. Samples \u00b6 [jvm] import org.junit.jupiter.api.Test import java.lang.Thread.sleep fun main() { //sampleStart // sample val cron = CronScheduler() val times = 1 var count = 0 1 2 3 4 5 6 7 8 // Increments the counter by one each second cron.schedule(\"0/1 * * * * ?\") { count++ } sleep((times * 1_000) + 100L) cron.shutdown() assert(count == times) //sampleEnd } Parameters \u00b6 jvm threads Number of threads used by the thread pool. By default it is equals to the number of processors. Constructors \u00b6 CronScheduler [jvm] fun CronScheduler (threads: Int = getRuntime().availableProcessors())Number of threads used by the thread pool. Functions \u00b6 Name Summary schedule [jvm] Content fun schedule (cronExpression: String , callback: () -> Unit ) More info Schedules a block of code to be executed repeatedly by a Cron expresion. shutdown [jvm] Content fun shutdown () More info Shuts down this scheduler's thread pool.","title":"Index"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/#cronscheduler","text":"[jvm] class CronScheduler ( threads : Int ) Scheduler to execute tasks repeatedly. After using it, you should call the shutdown method. If the JVM finishes without calling shutdown , it will be called upon JVM termination.","title":"CronScheduler"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/#samples","text":"[jvm] import org.junit.jupiter.api.Test import java.lang.Thread.sleep fun main() { //sampleStart // sample val cron = CronScheduler() val times = 1 var count = 0 1 2 3 4 5 6 7 8 // Increments the counter by one each second cron.schedule(\"0/1 * * * * ?\") { count++ } sleep((times * 1_000) + 100L) cron.shutdown() assert(count == times) //sampleEnd }","title":"Samples"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/#parameters","text":"jvm threads Number of threads used by the thread pool. By default it is equals to the number of processors.","title":"Parameters"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/#constructors","text":"CronScheduler [jvm] fun CronScheduler (threads: Int = getRuntime().availableProcessors())Number of threads used by the thread pool.","title":"Constructors"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/#functions","text":"Name Summary schedule [jvm] Content fun schedule (cronExpression: String , callback: () -> Unit ) More info Schedules a block of code to be executed repeatedly by a Cron expresion. shutdown [jvm] Content fun shutdown () More info Shuts down this scheduler's thread pool.","title":"Functions"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/-cron-scheduler/","text":"// hexagon_scheduler / com.hexagonkt.scheduler / CronScheduler / CronScheduler CronScheduler \u00b6 [jvm] Content fun CronScheduler (threads: Int = getRuntime().availableProcessors()) More info Parameters \u00b6 jvm threads Number of threads used by the thread pool. By default it is equals to the number of processors.","title":" cron scheduler"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/-cron-scheduler/#cronscheduler","text":"[jvm] Content fun CronScheduler (threads: Int = getRuntime().availableProcessors()) More info","title":"CronScheduler"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/-cron-scheduler/#parameters","text":"jvm threads Number of threads used by the thread pool. By default it is equals to the number of processors.","title":"Parameters"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/schedule/","text":"// hexagon_scheduler / com.hexagonkt.scheduler / CronScheduler / schedule schedule \u00b6 [jvm] Content fun schedule (cronExpression: String , callback: () -> Unit ) More info Schedules a block of code to be executed repeatedly by a Cron expresion. Parameters \u00b6 jvm cronExpression Periodicity of the task in Cron format. callback Task code to be executed periodically.","title":"Schedule"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/schedule/#schedule","text":"[jvm] Content fun schedule (cronExpression: String , callback: () -> Unit ) More info Schedules a block of code to be executed repeatedly by a Cron expresion.","title":"schedule"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/schedule/#parameters","text":"jvm cronExpression Periodicity of the task in Cron format. callback Task code to be executed periodically.","title":"Parameters"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/shutdown/","text":"// hexagon_scheduler / com.hexagonkt.scheduler / CronScheduler / shutdown shutdown \u00b6 [jvm] Content fun shutdown () More info Shuts down this scheduler's thread pool. Calling over an already closed scheduler does not have any effect. It is called by the JVM when it is shut down.","title":"Shutdown"},{"location":"hexagon_scheduler/com.hexagonkt.scheduler/-cron-scheduler/shutdown/#shutdown","text":"[jvm] Content fun shutdown () More info Shuts down this scheduler's thread pool. Calling over an already closed scheduler does not have any effect. It is called by the JVM when it is shut down.","title":"shutdown"},{"location":"hexagon_settings/","text":"// hexagon_settings hexagon_settings \u00b6 [jvm] This module holds utilities to handle applications' configuration parameters. Install the Dependency \u00b6 build.gradle 1 2 3 4 5 repositories { mavenCentral () } implementation ( \"com.hexagonkt:hexagon_settings:$hexagonVersion\" ) pom.xml 1 2 3 4 5 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> hexagon_settings </artifactId> <version> $hexagonVersion </version> </dependency> Settings \u00b6 This module helps loading external settings from different sources. You can change the settings sources, the default ones are (bottom sources override top ones): Resource /application.json. Resource /application.yml. Environment variables starting with APPLICATION_. System properties starting with service. File ./application.json from the application run directory. File ./application.yml from the application run directory. Resource /application_test.json. Resource /application_test.yml. Default to map Loaded into type Optional simple settings can be handled with data classes Below there is a code fragment showing how to add custom settings sources and load its properties: Packages \u00b6 Name com.hexagonkt.settings","title":"Settings"},{"location":"hexagon_settings/#hexagon_settings","text":"[jvm] This module holds utilities to handle applications' configuration parameters.","title":"hexagon_settings"},{"location":"hexagon_settings/#install-the-dependency","text":"build.gradle 1 2 3 4 5 repositories { mavenCentral () } implementation ( \"com.hexagonkt:hexagon_settings:$hexagonVersion\" ) pom.xml 1 2 3 4 5 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> hexagon_settings </artifactId> <version> $hexagonVersion </version> </dependency>","title":"Install the Dependency"},{"location":"hexagon_settings/#settings","text":"This module helps loading external settings from different sources. You can change the settings sources, the default ones are (bottom sources override top ones): Resource /application.json. Resource /application.yml. Environment variables starting with APPLICATION_. System properties starting with service. File ./application.json from the application run directory. File ./application.yml from the application run directory. Resource /application_test.json. Resource /application_test.yml. Default to map Loaded into type Optional simple settings can be handled with data classes Below there is a code fragment showing how to add custom settings sources and load its properties:","title":"Settings"},{"location":"hexagon_settings/#packages","text":"Name com.hexagonkt.settings","title":"Packages"},{"location":"hexagon_settings/com.hexagonkt.settings/","text":"// hexagon_settings / com.hexagonkt.settings Package com.hexagonkt.settings \u00b6 [jvm] Load settings from different data sources and formats. Types \u00b6 Name Summary CommandLineArgumentsSource [jvm] Content class CommandLineArgumentsSource ( args : List < String >) : SettingsSource EnvironmentVariablesSource [jvm] Content class EnvironmentVariablesSource ( prefix : String ) : SettingsSource ObjectSource [jvm] Content class ObjectSource ( settings : Map < String , *>) : SettingsSource Settings [jvm] Content class Settings < T : Any >( type : KClass < T >, sources : List < SettingsSource >) SettingsManager [jvm] Content object SettingsManager SettingsSource [jvm] Content interface SettingsSource SystemPropertiesSource [jvm] Content class SystemPropertiesSource ( prefix : String ) : SettingsSource UrlSource [jvm] Content class UrlSource ( url : URL ) : SettingsSource","title":"Index"},{"location":"hexagon_settings/com.hexagonkt.settings/#package-comhexagonktsettings","text":"[jvm] Load settings from different data sources and formats.","title":"Package com.hexagonkt.settings"},{"location":"hexagon_settings/com.hexagonkt.settings/#types","text":"Name Summary CommandLineArgumentsSource [jvm] Content class CommandLineArgumentsSource ( args : List < String >) : SettingsSource EnvironmentVariablesSource [jvm] Content class EnvironmentVariablesSource ( prefix : String ) : SettingsSource ObjectSource [jvm] Content class ObjectSource ( settings : Map < String , *>) : SettingsSource Settings [jvm] Content class Settings < T : Any >( type : KClass < T >, sources : List < SettingsSource >) SettingsManager [jvm] Content object SettingsManager SettingsSource [jvm] Content interface SettingsSource SystemPropertiesSource [jvm] Content class SystemPropertiesSource ( prefix : String ) : SettingsSource UrlSource [jvm] Content class UrlSource ( url : URL ) : SettingsSource","title":"Types"},{"location":"hexagon_settings/com.hexagonkt.settings/-command-line-arguments-source/","text":"// hexagon_settings / com.hexagonkt.settings / CommandLineArgumentsSource CommandLineArgumentsSource \u00b6 [jvm] class CommandLineArgumentsSource ( args : List < String >) : SettingsSource Constructors \u00b6 CommandLineArgumentsSource [jvm] fun CommandLineArgumentsSource (args: Array String >) Functions \u00b6 Name Summary load [jvm] Content open override fun load (): Map < String , *> toString [jvm] Content open override fun toString (): String","title":"Index"},{"location":"hexagon_settings/com.hexagonkt.settings/-command-line-arguments-source/#commandlineargumentssource","text":"[jvm] class CommandLineArgumentsSource ( args : List < String >) : SettingsSource","title":"CommandLineArgumentsSource"},{"location":"hexagon_settings/com.hexagonkt.settings/-command-line-arguments-source/#constructors","text":"CommandLineArgumentsSource [jvm] fun CommandLineArgumentsSource (args: Array String >)","title":"Constructors"},{"location":"hexagon_settings/com.hexagonkt.settings/-command-line-arguments-source/#functions","text":"Name Summary load [jvm] Content open override fun load (): Map < String , *> toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"hexagon_settings/com.hexagonkt.settings/-command-line-arguments-source/-command-line-arguments-source/","text":"// hexagon_settings / com.hexagonkt.settings / CommandLineArgumentsSource / CommandLineArgumentsSource CommandLineArgumentsSource \u00b6 [jvm] Content fun CommandLineArgumentsSource (args: Array String >) fun CommandLineArgumentsSource (args: List < String >)","title":" command line arguments source"},{"location":"hexagon_settings/com.hexagonkt.settings/-command-line-arguments-source/-command-line-arguments-source/#commandlineargumentssource","text":"[jvm] Content fun CommandLineArgumentsSource (args: Array String >) fun CommandLineArgumentsSource (args: List < String >)","title":"CommandLineArgumentsSource"},{"location":"hexagon_settings/com.hexagonkt.settings/-command-line-arguments-source/load/","text":"// hexagon_settings / com.hexagonkt.settings / CommandLineArgumentsSource / load load \u00b6 [jvm] Content open override fun load (): Map < String , *>","title":"Load"},{"location":"hexagon_settings/com.hexagonkt.settings/-command-line-arguments-source/load/#load","text":"[jvm] Content open override fun load (): Map < String , *>","title":"load"},{"location":"hexagon_settings/com.hexagonkt.settings/-command-line-arguments-source/to-string/","text":"// hexagon_settings / com.hexagonkt.settings / CommandLineArgumentsSource / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"hexagon_settings/com.hexagonkt.settings/-command-line-arguments-source/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"hexagon_settings/com.hexagonkt.settings/-environment-variables-source/","text":"// hexagon_settings / com.hexagonkt.settings / EnvironmentVariablesSource EnvironmentVariablesSource \u00b6 [jvm] class EnvironmentVariablesSource ( prefix : String ) : SettingsSource Functions \u00b6 Name Summary load [jvm] Content open override fun load (): Map < String , *> toString [jvm] Content open override fun toString (): String","title":"Index"},{"location":"hexagon_settings/com.hexagonkt.settings/-environment-variables-source/#environmentvariablessource","text":"[jvm] class EnvironmentVariablesSource ( prefix : String ) : SettingsSource","title":"EnvironmentVariablesSource"},{"location":"hexagon_settings/com.hexagonkt.settings/-environment-variables-source/#functions","text":"Name Summary load [jvm] Content open override fun load (): Map < String , *> toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"hexagon_settings/com.hexagonkt.settings/-environment-variables-source/-environment-variables-source/","text":"// hexagon_settings / com.hexagonkt.settings / EnvironmentVariablesSource / EnvironmentVariablesSource EnvironmentVariablesSource \u00b6 [jvm] Content fun EnvironmentVariablesSource (prefix: String )","title":" environment variables source"},{"location":"hexagon_settings/com.hexagonkt.settings/-environment-variables-source/-environment-variables-source/#environmentvariablessource","text":"[jvm] Content fun EnvironmentVariablesSource (prefix: String )","title":"EnvironmentVariablesSource"},{"location":"hexagon_settings/com.hexagonkt.settings/-environment-variables-source/load/","text":"// hexagon_settings / com.hexagonkt.settings / EnvironmentVariablesSource / load load \u00b6 [jvm] Content open override fun load (): Map < String , *>","title":"Load"},{"location":"hexagon_settings/com.hexagonkt.settings/-environment-variables-source/load/#load","text":"[jvm] Content open override fun load (): Map < String , *>","title":"load"},{"location":"hexagon_settings/com.hexagonkt.settings/-environment-variables-source/to-string/","text":"// hexagon_settings / com.hexagonkt.settings / EnvironmentVariablesSource / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"hexagon_settings/com.hexagonkt.settings/-environment-variables-source/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"hexagon_settings/com.hexagonkt.settings/-object-source/","text":"// hexagon_settings / com.hexagonkt.settings / ObjectSource ObjectSource \u00b6 [jvm] class ObjectSource ( settings : Map < String , *>) : SettingsSource Constructors \u00b6 ObjectSource [jvm] fun ObjectSource (vararg pairs: Pair < String , *>) ObjectSource [jvm] fun ObjectSource (instance: Any ) Functions \u00b6 Name Summary load [jvm] Content open override fun load (): Map < String , *> toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary settings [jvm] val settings : Map < String , *>","title":"Index"},{"location":"hexagon_settings/com.hexagonkt.settings/-object-source/#objectsource","text":"[jvm] class ObjectSource ( settings : Map < String , *>) : SettingsSource","title":"ObjectSource"},{"location":"hexagon_settings/com.hexagonkt.settings/-object-source/#constructors","text":"ObjectSource [jvm] fun ObjectSource (vararg pairs: Pair < String , *>) ObjectSource [jvm] fun ObjectSource (instance: Any )","title":"Constructors"},{"location":"hexagon_settings/com.hexagonkt.settings/-object-source/#functions","text":"Name Summary load [jvm] Content open override fun load (): Map < String , *> toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"hexagon_settings/com.hexagonkt.settings/-object-source/#properties","text":"Name Summary settings [jvm] val settings : Map < String , *>","title":"Properties"},{"location":"hexagon_settings/com.hexagonkt.settings/-object-source/-object-source/","text":"// hexagon_settings / com.hexagonkt.settings / ObjectSource / ObjectSource ObjectSource \u00b6 [jvm] Content fun ObjectSource (vararg pairs: Pair < String , >) fun ObjectSource (instance: Any ) fun ObjectSource (settings: Map < String , >)","title":" object source"},{"location":"hexagon_settings/com.hexagonkt.settings/-object-source/-object-source/#objectsource","text":"[jvm] Content fun ObjectSource (vararg pairs: Pair < String , >) fun ObjectSource (instance: Any ) fun ObjectSource (settings: Map < String , >)","title":"ObjectSource"},{"location":"hexagon_settings/com.hexagonkt.settings/-object-source/load/","text":"// hexagon_settings / com.hexagonkt.settings / ObjectSource / load load \u00b6 [jvm] Content open override fun load (): Map < String , *>","title":"Load"},{"location":"hexagon_settings/com.hexagonkt.settings/-object-source/load/#load","text":"[jvm] Content open override fun load (): Map < String , *>","title":"load"},{"location":"hexagon_settings/com.hexagonkt.settings/-object-source/settings/","text":"// hexagon_settings / com.hexagonkt.settings / ObjectSource / settings settings \u00b6 [jvm] Content val settings : Map < String , *>","title":"Settings"},{"location":"hexagon_settings/com.hexagonkt.settings/-object-source/settings/#settings","text":"[jvm] Content val settings : Map < String , *>","title":"settings"},{"location":"hexagon_settings/com.hexagonkt.settings/-object-source/to-string/","text":"// hexagon_settings / com.hexagonkt.settings / ObjectSource / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"hexagon_settings/com.hexagonkt.settings/-object-source/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings/","text":"// hexagon_settings / com.hexagonkt.settings / Settings Settings \u00b6 [jvm] class Settings < T : Any >( type : KClass < T >, sources : List < SettingsSource >) Constructors \u00b6 Settings [jvm] fun < T : Any > Settings (type: KClass < T >, vararg sources: SettingsSource ) Functions \u00b6 Name Summary toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary instance [jvm] val instance : T","title":"Index"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings/#settings","text":"[jvm] class Settings < T : Any >( type : KClass < T >, sources : List < SettingsSource >)","title":"Settings"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings/#constructors","text":"Settings [jvm] fun < T : Any > Settings (type: KClass < T >, vararg sources: SettingsSource )","title":"Constructors"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings/#functions","text":"Name Summary toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings/#properties","text":"Name Summary instance [jvm] val instance : T","title":"Properties"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings/-settings/","text":"// hexagon_settings / com.hexagonkt.settings / Settings / Settings Settings \u00b6 [jvm] Content fun < T : Any > Settings (type: KClass < T >, vararg sources: SettingsSource ) fun < T : Any > Settings (type: KClass < T >, sources: List < SettingsSource > = emptyList())","title":" settings"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings/-settings/#settings","text":"[jvm] Content fun < T : Any > Settings (type: KClass < T >, vararg sources: SettingsSource ) fun < T : Any > Settings (type: KClass < T >, sources: List < SettingsSource > = emptyList())","title":"Settings"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings/instance/","text":"// hexagon_settings / com.hexagonkt.settings / Settings / instance instance \u00b6 [jvm] Content val instance : T","title":"Instance"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings/instance/#instance","text":"[jvm] Content val instance : T","title":"instance"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings/to-string/","text":"// hexagon_settings / com.hexagonkt.settings / Settings / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings-manager/","text":"// hexagon_settings / com.hexagonkt.settings / SettingsManager SettingsManager \u00b6 [jvm] object SettingsManager Functions \u00b6 Name Summary instance [jvm] Content fun < T : Any > instance (): T Properties \u00b6 Name Summary defaultSources [jvm] val defaultSources : List < SettingsSource > ENVIRONMENT_PREFIX [jvm] const val ENVIRONMENT_PREFIX : String settings [jvm] var settings : Settings <*> SETTINGS_FILE [jvm] const val SETTINGS_FILE : String","title":"Index"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings-manager/#settingsmanager","text":"[jvm] object SettingsManager","title":"SettingsManager"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings-manager/#functions","text":"Name Summary instance [jvm] Content fun < T : Any > instance (): T","title":"Functions"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings-manager/#properties","text":"Name Summary defaultSources [jvm] val defaultSources : List < SettingsSource > ENVIRONMENT_PREFIX [jvm] const val ENVIRONMENT_PREFIX : String settings [jvm] var settings : Settings <*> SETTINGS_FILE [jvm] const val SETTINGS_FILE : String","title":"Properties"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings-manager/-e-n-v-i-r-o-n-m-e-n-t_-p-r-e-f-i-x/","text":"// hexagon_settings / com.hexagonkt.settings / SettingsManager / ENVIRONMENT_PREFIX ENVIRONMENT_PREFIX \u00b6 [jvm] Content const val ENVIRONMENT_PREFIX : String","title":" e n v i r o n m e n t  p r e f i x"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings-manager/-e-n-v-i-r-o-n-m-e-n-t_-p-r-e-f-i-x/#environment_prefix","text":"[jvm] Content const val ENVIRONMENT_PREFIX : String","title":"ENVIRONMENT_PREFIX"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings-manager/-s-e-t-t-i-n-g-s_-f-i-l-e/","text":"// hexagon_settings / com.hexagonkt.settings / SettingsManager / SETTINGS_FILE SETTINGS_FILE \u00b6 [jvm] Content const val SETTINGS_FILE : String","title":" s e t t i n g s  f i l e"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings-manager/-s-e-t-t-i-n-g-s_-f-i-l-e/#settings_file","text":"[jvm] Content const val SETTINGS_FILE : String","title":"SETTINGS_FILE"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings-manager/default-sources/","text":"// hexagon_settings / com.hexagonkt.settings / SettingsManager / defaultSources defaultSources \u00b6 [jvm] Content val defaultSources : List < SettingsSource >","title":"Default sources"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings-manager/default-sources/#defaultsources","text":"[jvm] Content val defaultSources : List < SettingsSource >","title":"defaultSources"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings-manager/instance/","text":"// hexagon_settings / com.hexagonkt.settings / SettingsManager / instance instance \u00b6 [jvm] Content fun < T : Any > instance (): T","title":"Instance"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings-manager/instance/#instance","text":"[jvm] Content fun < T : Any > instance (): T","title":"instance"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings-manager/settings/","text":"// hexagon_settings / com.hexagonkt.settings / SettingsManager / settings settings \u00b6 [jvm] Content var settings : Settings <*>","title":"Settings"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings-manager/settings/#settings","text":"[jvm] Content var settings : Settings <*>","title":"settings"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings-source/","text":"// hexagon_settings / com.hexagonkt.settings / SettingsSource SettingsSource \u00b6 [jvm] interface SettingsSource Functions \u00b6 Name Summary load [jvm] Content abstract fun load (): Map < String , *> Inheritors \u00b6 Name CommandLineArgumentsSource EnvironmentVariablesSource ObjectSource SystemPropertiesSource UrlSource","title":"Index"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings-source/#settingssource","text":"[jvm] interface SettingsSource","title":"SettingsSource"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings-source/#functions","text":"Name Summary load [jvm] Content abstract fun load (): Map < String , *>","title":"Functions"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings-source/#inheritors","text":"Name CommandLineArgumentsSource EnvironmentVariablesSource ObjectSource SystemPropertiesSource UrlSource","title":"Inheritors"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings-source/load/","text":"// hexagon_settings / com.hexagonkt.settings / SettingsSource / load load \u00b6 [jvm] Content abstract fun load (): Map < String , *>","title":"Load"},{"location":"hexagon_settings/com.hexagonkt.settings/-settings-source/load/#load","text":"[jvm] Content abstract fun load (): Map < String , *>","title":"load"},{"location":"hexagon_settings/com.hexagonkt.settings/-system-properties-source/","text":"// hexagon_settings / com.hexagonkt.settings / SystemPropertiesSource SystemPropertiesSource \u00b6 [jvm] class SystemPropertiesSource ( prefix : String ) : SettingsSource Functions \u00b6 Name Summary load [jvm] Content open override fun load (): Map < String , *> toString [jvm] Content open override fun toString (): String","title":"Index"},{"location":"hexagon_settings/com.hexagonkt.settings/-system-properties-source/#systempropertiessource","text":"[jvm] class SystemPropertiesSource ( prefix : String ) : SettingsSource","title":"SystemPropertiesSource"},{"location":"hexagon_settings/com.hexagonkt.settings/-system-properties-source/#functions","text":"Name Summary load [jvm] Content open override fun load (): Map < String , *> toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"hexagon_settings/com.hexagonkt.settings/-system-properties-source/-system-properties-source/","text":"// hexagon_settings / com.hexagonkt.settings / SystemPropertiesSource / SystemPropertiesSource SystemPropertiesSource \u00b6 [jvm] Content fun SystemPropertiesSource (prefix: String )","title":" system properties source"},{"location":"hexagon_settings/com.hexagonkt.settings/-system-properties-source/-system-properties-source/#systempropertiessource","text":"[jvm] Content fun SystemPropertiesSource (prefix: String )","title":"SystemPropertiesSource"},{"location":"hexagon_settings/com.hexagonkt.settings/-system-properties-source/load/","text":"// hexagon_settings / com.hexagonkt.settings / SystemPropertiesSource / load load \u00b6 [jvm] Content open override fun load (): Map < String , *>","title":"Load"},{"location":"hexagon_settings/com.hexagonkt.settings/-system-properties-source/load/#load","text":"[jvm] Content open override fun load (): Map < String , *>","title":"load"},{"location":"hexagon_settings/com.hexagonkt.settings/-system-properties-source/to-string/","text":"// hexagon_settings / com.hexagonkt.settings / SystemPropertiesSource / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"hexagon_settings/com.hexagonkt.settings/-system-properties-source/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"hexagon_settings/com.hexagonkt.settings/-url-source/","text":"// hexagon_settings / com.hexagonkt.settings / UrlSource UrlSource \u00b6 [jvm] class UrlSource ( url : URL ) : SettingsSource Constructors \u00b6 UrlSource [jvm] fun UrlSource (url: String ) Functions \u00b6 Name Summary load [jvm] Content open override fun load (): Map < String , *> toString [jvm] Content open override fun toString (): String Properties \u00b6 Name Summary url [jvm] val url : URL","title":"Index"},{"location":"hexagon_settings/com.hexagonkt.settings/-url-source/#urlsource","text":"[jvm] class UrlSource ( url : URL ) : SettingsSource","title":"UrlSource"},{"location":"hexagon_settings/com.hexagonkt.settings/-url-source/#constructors","text":"UrlSource [jvm] fun UrlSource (url: String )","title":"Constructors"},{"location":"hexagon_settings/com.hexagonkt.settings/-url-source/#functions","text":"Name Summary load [jvm] Content open override fun load (): Map < String , *> toString [jvm] Content open override fun toString (): String","title":"Functions"},{"location":"hexagon_settings/com.hexagonkt.settings/-url-source/#properties","text":"Name Summary url [jvm] val url : URL","title":"Properties"},{"location":"hexagon_settings/com.hexagonkt.settings/-url-source/-url-source/","text":"// hexagon_settings / com.hexagonkt.settings / UrlSource / UrlSource UrlSource \u00b6 [jvm] Content fun UrlSource (url: String ) fun UrlSource (url: URL )","title":" url source"},{"location":"hexagon_settings/com.hexagonkt.settings/-url-source/-url-source/#urlsource","text":"[jvm] Content fun UrlSource (url: String ) fun UrlSource (url: URL )","title":"UrlSource"},{"location":"hexagon_settings/com.hexagonkt.settings/-url-source/load/","text":"// hexagon_settings / com.hexagonkt.settings / UrlSource / load load \u00b6 [jvm] Content open override fun load (): Map < String , *>","title":"Load"},{"location":"hexagon_settings/com.hexagonkt.settings/-url-source/load/#load","text":"[jvm] Content open override fun load (): Map < String , *>","title":"load"},{"location":"hexagon_settings/com.hexagonkt.settings/-url-source/to-string/","text":"// hexagon_settings / com.hexagonkt.settings / UrlSource / toString toString \u00b6 [jvm] Content open override fun toString (): String","title":"To string"},{"location":"hexagon_settings/com.hexagonkt.settings/-url-source/to-string/#tostring","text":"[jvm] Content open override fun toString (): String","title":"toString"},{"location":"hexagon_settings/com.hexagonkt.settings/-url-source/url/","text":"// hexagon_settings / com.hexagonkt.settings / UrlSource / url url \u00b6 [jvm] Content val url : URL","title":"Url"},{"location":"hexagon_settings/com.hexagonkt.settings/-url-source/url/#url","text":"[jvm] Content val url : URL","title":"url"},{"location":"hexagon_web/","text":"// hexagon_web hexagon_web \u00b6 [jvm] Adds utilities for serving HTML pages over HTTP servers. Includes kotlinx.html support. Install the Dependency \u00b6 build.gradle 1 2 3 4 5 repositories { mavenCentral () } implementation ( \"com.hexagonkt:hexagon_web:$hexagonVersion\" ) pom.xml 1 2 3 4 5 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> hexagon_web </artifactId> <version> $hexagonVersion </version> </dependency> Templates \u00b6 Provide utilities for template processing inside HTTP handlers. Packages \u00b6 Name com.hexagonkt.web","title":"Web"},{"location":"hexagon_web/#hexagon_web","text":"[jvm] Adds utilities for serving HTML pages over HTTP servers. Includes kotlinx.html support.","title":"hexagon_web"},{"location":"hexagon_web/#install-the-dependency","text":"build.gradle 1 2 3 4 5 repositories { mavenCentral () } implementation ( \"com.hexagonkt:hexagon_web:$hexagonVersion\" ) pom.xml 1 2 3 4 5 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> hexagon_web </artifactId> <version> $hexagonVersion </version> </dependency>","title":"Install the Dependency"},{"location":"hexagon_web/#templates","text":"Provide utilities for template processing inside HTTP handlers.","title":"Templates"},{"location":"hexagon_web/#packages","text":"Name com.hexagonkt.web","title":"Packages"},{"location":"hexagon_web/com.hexagonkt.web/","text":"// hexagon_web / com.hexagonkt.web Package com.hexagonkt.web \u00b6 [jvm] TODO Functions \u00b6 Name Summary fullContext [jvm] Content fun Call. fullContext (): Map < String , *> html [jvm] Content fun Call. html (block: HTML.() -> Unit ) More info Return HTML setting the proper content type. obtainLocale [jvm] Content fun Call. obtainLocale (): Locale More info TODO Review order precedence and complete code (now only taking request attribute) Request Session Cookie Accept-language Server default locale template [jvm] Content fun Call. template (templateEngine: TemplateEngine, templateName: String , locale: Locale = obtainLocale(), context: Map < String , > = fullContext()) fun Call. template (templateAdapter: TemplatePort, templateName: String , locale: Locale = obtainLocale(), context: Map < String , > = fullContext()) templateType [jvm] Content fun Call. templateType (template: String )","title":"Index"},{"location":"hexagon_web/com.hexagonkt.web/#package-comhexagonktweb","text":"[jvm] TODO","title":"Package com.hexagonkt.web"},{"location":"hexagon_web/com.hexagonkt.web/#functions","text":"Name Summary fullContext [jvm] Content fun Call. fullContext (): Map < String , *> html [jvm] Content fun Call. html (block: HTML.() -> Unit ) More info Return HTML setting the proper content type. obtainLocale [jvm] Content fun Call. obtainLocale (): Locale More info TODO Review order precedence and complete code (now only taking request attribute) Request Session Cookie Accept-language Server default locale template [jvm] Content fun Call. template (templateEngine: TemplateEngine, templateName: String , locale: Locale = obtainLocale(), context: Map < String , > = fullContext()) fun Call. template (templateAdapter: TemplatePort, templateName: String , locale: Locale = obtainLocale(), context: Map < String , > = fullContext()) templateType [jvm] Content fun Call. templateType (template: String )","title":"Functions"},{"location":"hexagon_web/com.hexagonkt.web/full-context/","text":"// hexagon_web / com.hexagonkt.web / fullContext fullContext \u00b6 [jvm] Content fun Call. fullContext (): Map < String , *>","title":"Full context"},{"location":"hexagon_web/com.hexagonkt.web/full-context/#fullcontext","text":"[jvm] Content fun Call. fullContext (): Map < String , *>","title":"fullContext"},{"location":"hexagon_web/com.hexagonkt.web/html/","text":"// hexagon_web / com.hexagonkt.web / html html \u00b6 [jvm] Content fun Call. html (block: HTML.() -> Unit ) More info Return HTML setting the proper content type.","title":"Html"},{"location":"hexagon_web/com.hexagonkt.web/html/#html","text":"[jvm] Content fun Call. html (block: HTML.() -> Unit ) More info Return HTML setting the proper content type.","title":"html"},{"location":"hexagon_web/com.hexagonkt.web/obtain-locale/","text":"// hexagon_web / com.hexagonkt.web / obtainLocale obtainLocale \u00b6 [jvm] Content fun Call. obtainLocale (): Locale More info TODO Review order precedence and complete code (now only taking request attribute) Request Session Cookie Accept-language Server default locale","title":"Obtain locale"},{"location":"hexagon_web/com.hexagonkt.web/obtain-locale/#obtainlocale","text":"[jvm] Content fun Call. obtainLocale (): Locale More info TODO Review order precedence and complete code (now only taking request attribute) Request Session Cookie Accept-language Server default locale","title":"obtainLocale"},{"location":"hexagon_web/com.hexagonkt.web/template-type/","text":"// hexagon_web / com.hexagonkt.web / templateType templateType \u00b6 [jvm] Content fun Call. templateType (template: String )","title":"Template type"},{"location":"hexagon_web/com.hexagonkt.web/template-type/#templatetype","text":"[jvm] Content fun Call. templateType (template: String )","title":"templateType"},{"location":"hexagon_web/com.hexagonkt.web/template/","text":"// hexagon_web / com.hexagonkt.web / template template \u00b6 [jvm] Content fun Call. template (templateAdapter: TemplatePort, templateName: String , locale: Locale = obtainLocale(), context: Map < String , > = fullContext()) fun Call. template (templateEngine: TemplateEngine, templateName: String , locale: Locale = obtainLocale(), context: Map < String , > = fullContext())","title":"Template"},{"location":"hexagon_web/com.hexagonkt.web/template/#template","text":"[jvm] Content fun Call. template (templateAdapter: TemplatePort, templateName: String , locale: Locale = obtainLocale(), context: Map < String , > = fullContext()) fun Call. template (templateEngine: TemplateEngine, templateName: String , locale: Locale = obtainLocale(), context: Map < String , > = fullContext())","title":"template"},{"location":"http_client_ahc/","text":"// http_client_ahc http_client_ahc \u00b6 [jvm] /port_http_client implementation using the Async HTTP Client library. Install the Dependency \u00b6 build.gradle 1 2 3 4 5 repositories { mavenCentral () } implementation ( \"com.hexagonkt:http_client_ahc:$hexagonVersion\" ) pom.xml 1 2 3 4 5 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> http_client_ahc </artifactId> <version> $hexagonVersion </version> </dependency> Packages \u00b6 Name com.hexagonkt.http.client.ahc","title":"Async HTTP Client"},{"location":"http_client_ahc/#http_client_ahc","text":"[jvm] /port_http_client implementation using the Async HTTP Client library.","title":"http_client_ahc"},{"location":"http_client_ahc/#install-the-dependency","text":"build.gradle 1 2 3 4 5 repositories { mavenCentral () } implementation ( \"com.hexagonkt:http_client_ahc:$hexagonVersion\" ) pom.xml 1 2 3 4 5 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> http_client_ahc </artifactId> <version> $hexagonVersion </version> </dependency>","title":"Install the Dependency"},{"location":"http_client_ahc/#packages","text":"Name com.hexagonkt.http.client.ahc","title":"Packages"},{"location":"http_client_ahc/com.hexagonkt.http.client.ahc/","text":"// http_client_ahc / com.hexagonkt.http.client.ahc Package com.hexagonkt.http.client.ahc \u00b6 [jvm] Async HTTP client implementation classes. Types \u00b6 Name Summary AhcAdapter [jvm] Content class AhcAdapter : ClientPort More info Client to use other REST services.","title":"Index"},{"location":"http_client_ahc/com.hexagonkt.http.client.ahc/#package-comhexagonkthttpclientahc","text":"[jvm] Async HTTP client implementation classes.","title":"Package com.hexagonkt.http.client.ahc"},{"location":"http_client_ahc/com.hexagonkt.http.client.ahc/#types","text":"Name Summary AhcAdapter [jvm] Content class AhcAdapter : ClientPort More info Client to use other REST services.","title":"Types"},{"location":"http_client_ahc/com.hexagonkt.http.client.ahc/-ahc-adapter/","text":"// http_client_ahc / com.hexagonkt.http.client.ahc / AhcAdapter AhcAdapter \u00b6 [jvm] class AhcAdapter : ClientPort Client to use other REST services. Constructors \u00b6 AhcAdapter [jvm] fun AhcAdapter () Functions \u00b6 Name Summary send [jvm] Content open override fun send (client: Client, request: Request): Response","title":"Index"},{"location":"http_client_ahc/com.hexagonkt.http.client.ahc/-ahc-adapter/#ahcadapter","text":"[jvm] class AhcAdapter : ClientPort Client to use other REST services.","title":"AhcAdapter"},{"location":"http_client_ahc/com.hexagonkt.http.client.ahc/-ahc-adapter/#constructors","text":"AhcAdapter [jvm] fun AhcAdapter ()","title":"Constructors"},{"location":"http_client_ahc/com.hexagonkt.http.client.ahc/-ahc-adapter/#functions","text":"Name Summary send [jvm] Content open override fun send (client: Client, request: Request): Response","title":"Functions"},{"location":"http_client_ahc/com.hexagonkt.http.client.ahc/-ahc-adapter/-ahc-adapter/","text":"// http_client_ahc / com.hexagonkt.http.client.ahc / AhcAdapter / AhcAdapter AhcAdapter \u00b6 [jvm] Content fun AhcAdapter ()","title":" ahc adapter"},{"location":"http_client_ahc/com.hexagonkt.http.client.ahc/-ahc-adapter/-ahc-adapter/#ahcadapter","text":"[jvm] Content fun AhcAdapter ()","title":"AhcAdapter"},{"location":"http_client_ahc/com.hexagonkt.http.client.ahc/-ahc-adapter/send/","text":"// http_client_ahc / com.hexagonkt.http.client.ahc / AhcAdapter / send send \u00b6 [jvm] Content open override fun send (client: Client, request: Request): Response","title":"Send"},{"location":"http_client_ahc/com.hexagonkt.http.client.ahc/-ahc-adapter/send/#send","text":"[jvm] Content open override fun send (client: Client, request: Request): Response","title":"send"},{"location":"http_server_jetty/","text":"// http_server_jetty http_server_jetty \u00b6 [jvm] Jetty adapter for the /port_http_server port. Install the Dependency \u00b6 build.gradle 1 2 3 4 5 6 repositories { mavenCentral () } // Add `{ exclude(module = \"logging_slf4j_jul\") }` if you use other logging adapter implementation ( \"com.hexagonkt:http_server_jetty:$hexagonVersion\" ) pom.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> http_server_jetty </artifactId> <version> $hexagonVersion </version> <!-- Add the following block if you use other logging adapter --> <!-- <exclusions> <exclusion> <groupId>com.hexagonkt</groupId> <artifactId>logging_slf4j_jul</artifactId> </exclusion> </exclusions> --> </dependency> !!! Note This Adapter includes the /logging_slf4j_jul logging dependency (for convenience), if you use a different log adapter, you should exclude it to avoid SLF4J warnings. Packages \u00b6 Name com.hexagonkt.http.server.jetty","title":"Jetty"},{"location":"http_server_jetty/#http_server_jetty","text":"[jvm] Jetty adapter for the /port_http_server port.","title":"http_server_jetty"},{"location":"http_server_jetty/#install-the-dependency","text":"build.gradle 1 2 3 4 5 6 repositories { mavenCentral () } // Add `{ exclude(module = \"logging_slf4j_jul\") }` if you use other logging adapter implementation ( \"com.hexagonkt:http_server_jetty:$hexagonVersion\" ) pom.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> http_server_jetty </artifactId> <version> $hexagonVersion </version> <!-- Add the following block if you use other logging adapter --> <!-- <exclusions> <exclusion> <groupId>com.hexagonkt</groupId> <artifactId>logging_slf4j_jul</artifactId> </exclusion> </exclusions> --> </dependency> !!! Note This Adapter includes the /logging_slf4j_jul logging dependency (for convenience), if you use a different log adapter, you should exclude it to avoid SLF4J warnings.","title":"Install the Dependency"},{"location":"http_server_jetty/#packages","text":"Name com.hexagonkt.http.server.jetty","title":"Packages"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/","text":"// http_server_jetty / com.hexagonkt.http.server.jetty Package com.hexagonkt.http.server.jetty \u00b6 [jvm] Code implementing the Jetty HTTP server adapter. Types \u00b6 Name Summary JettyServletAdapter [jvm] Content class JettyServletAdapter : ServerPort More info Implements ServerPort using JettyServer. Functions \u00b6 Name Summary serve [jvm] Content fun serve (settings: ServerSettings = ServerSettings(), router: Router): Server fun serve (settings: ServerSettings = ServerSettings(), block: Router.() -> Unit ): Server More info Create a Jetty server and start it.","title":"Index"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/#package-comhexagonkthttpserverjetty","text":"[jvm] Code implementing the Jetty HTTP server adapter.","title":"Package com.hexagonkt.http.server.jetty"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/#types","text":"Name Summary JettyServletAdapter [jvm] Content class JettyServletAdapter : ServerPort More info Implements ServerPort using JettyServer.","title":"Types"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/#functions","text":"Name Summary serve [jvm] Content fun serve (settings: ServerSettings = ServerSettings(), router: Router): Server fun serve (settings: ServerSettings = ServerSettings(), block: Router.() -> Unit ): Server More info Create a Jetty server and start it.","title":"Functions"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/serve/","text":"// http_server_jetty / com.hexagonkt.http.server.jetty / serve serve \u00b6 [jvm] Content fun serve (settings: ServerSettings = ServerSettings(), router: Router): Server More info Create a Jetty server and start it. It is a shortcut to avoid passing or injecting the adapter. Return \u00b6 The started Server instance. Parameters \u00b6 jvm settings Server settings info . router Router instance. [jvm] Content fun serve (settings: ServerSettings = ServerSettings(), block: Router.() -> Unit ): Server More info Create a Jetty server and start it. It is a shortcut to avoid passing or injecting the adapter. Return \u00b6 The started Server instance. Parameters \u00b6 jvm settings Server settings info. block Lambda to be used to create a Router instance.","title":"Serve"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/serve/#serve","text":"[jvm] Content fun serve (settings: ServerSettings = ServerSettings(), router: Router): Server More info Create a Jetty server and start it. It is a shortcut to avoid passing or injecting the adapter.","title":"serve"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/serve/#return","text":"The started Server instance.","title":"Return"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/serve/#parameters","text":"jvm settings Server settings info . router Router instance. [jvm] Content fun serve (settings: ServerSettings = ServerSettings(), block: Router.() -> Unit ): Server More info Create a Jetty server and start it. It is a shortcut to avoid passing or injecting the adapter.","title":"Parameters"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/serve/#return_1","text":"The started Server instance.","title":"Return"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/serve/#parameters_1","text":"jvm settings Server settings info. block Lambda to be used to create a Router instance.","title":"Parameters"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/","text":"// http_server_jetty / com.hexagonkt.http.server.jetty / JettyServletAdapter JettyServletAdapter \u00b6 [jvm] class JettyServletAdapter : ServerPort Implements ServerPort using JettyServer. Constructors \u00b6 JettyServletAdapter [jvm] fun JettyServletAdapter () Functions \u00b6 Name Summary runtimePort [jvm] Content open override fun runtimePort (): Int shutdown [jvm] Content open override fun shutdown () started [jvm] Content open override fun started (): Boolean startup [jvm] Content open override fun startup (server: Server) supportedFeatures [jvm] Content open override fun supportedFeatures (): Set supportedOptions [jvm] Content open override fun supportedOptions (): Set < String > supportedProtocols [jvm] Content open override fun supportedProtocols (): Set","title":"Index"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/#jettyservletadapter","text":"[jvm] class JettyServletAdapter : ServerPort Implements ServerPort using JettyServer.","title":"JettyServletAdapter"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/#constructors","text":"JettyServletAdapter [jvm] fun JettyServletAdapter ()","title":"Constructors"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/#functions","text":"Name Summary runtimePort [jvm] Content open override fun runtimePort (): Int shutdown [jvm] Content open override fun shutdown () started [jvm] Content open override fun started (): Boolean startup [jvm] Content open override fun startup (server: Server) supportedFeatures [jvm] Content open override fun supportedFeatures (): Set supportedOptions [jvm] Content open override fun supportedOptions (): Set < String > supportedProtocols [jvm] Content open override fun supportedProtocols (): Set","title":"Functions"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/-jetty-servlet-adapter/","text":"// http_server_jetty / com.hexagonkt.http.server.jetty / JettyServletAdapter / JettyServletAdapter JettyServletAdapter \u00b6 [jvm] Content fun JettyServletAdapter ()","title":" jetty servlet adapter"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/-jetty-servlet-adapter/#jettyservletadapter","text":"[jvm] Content fun JettyServletAdapter ()","title":"JettyServletAdapter"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/runtime-port/","text":"// http_server_jetty / com.hexagonkt.http.server.jetty / JettyServletAdapter / runtimePort runtimePort \u00b6 [jvm] Content open override fun runtimePort (): Int","title":"Runtime port"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/runtime-port/#runtimeport","text":"[jvm] Content open override fun runtimePort (): Int","title":"runtimePort"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/shutdown/","text":"// http_server_jetty / com.hexagonkt.http.server.jetty / JettyServletAdapter / shutdown shutdown \u00b6 [jvm] Content open override fun shutdown ()","title":"Shutdown"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/shutdown/#shutdown","text":"[jvm] Content open override fun shutdown ()","title":"shutdown"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/started/","text":"// http_server_jetty / com.hexagonkt.http.server.jetty / JettyServletAdapter / started started \u00b6 [jvm] Content open override fun started (): Boolean","title":"Started"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/started/#started","text":"[jvm] Content open override fun started (): Boolean","title":"started"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/startup/","text":"// http_server_jetty / com.hexagonkt.http.server.jetty / JettyServletAdapter / startup startup \u00b6 [jvm] Content open override fun startup (server: Server)","title":"Startup"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/startup/#startup","text":"[jvm] Content open override fun startup (server: Server)","title":"startup"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/supported-features/","text":"// http_server_jetty / com.hexagonkt.http.server.jetty / JettyServletAdapter / supportedFeatures supportedFeatures \u00b6 [jvm] Content open override fun supportedFeatures (): Set","title":"Supported features"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/supported-features/#supportedfeatures","text":"[jvm] Content open override fun supportedFeatures (): Set","title":"supportedFeatures"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/supported-options/","text":"// http_server_jetty / com.hexagonkt.http.server.jetty / JettyServletAdapter / supportedOptions supportedOptions \u00b6 [jvm] Content open override fun supportedOptions (): Set < String >","title":"Supported options"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/supported-options/#supportedoptions","text":"[jvm] Content open override fun supportedOptions (): Set < String >","title":"supportedOptions"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/supported-protocols/","text":"// http_server_jetty / com.hexagonkt.http.server.jetty / JettyServletAdapter / supportedProtocols supportedProtocols \u00b6 [jvm] Content open override fun supportedProtocols (): Set","title":"Supported protocols"},{"location":"http_server_jetty/com.hexagonkt.http.server.jetty/-jetty-servlet-adapter/supported-protocols/#supportedprotocols","text":"[jvm] Content open override fun supportedProtocols (): Set","title":"supportedProtocols"},{"location":"http_server_servlet/","text":"// http_server_servlet http_server_servlet \u00b6 [jvm] TODO Install the Dependency \u00b6 build.gradle 1 2 3 4 5 repositories { mavenCentral () } implementation ( \"com.hexagonkt:http_server_servlet:$hexagonVersion\" ) pom.xml 1 2 3 4 5 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> http_server_servlet </artifactId> <version> $hexagonVersion </version> </dependency> Packages \u00b6 Name com.hexagonkt.http.server.servlet","title":"Servlet"},{"location":"http_server_servlet/#http_server_servlet","text":"[jvm] TODO","title":"http_server_servlet"},{"location":"http_server_servlet/#install-the-dependency","text":"build.gradle 1 2 3 4 5 repositories { mavenCentral () } implementation ( \"com.hexagonkt:http_server_servlet:$hexagonVersion\" ) pom.xml 1 2 3 4 5 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> http_server_servlet </artifactId> <version> $hexagonVersion </version> </dependency>","title":"Install the Dependency"},{"location":"http_server_servlet/#packages","text":"Name com.hexagonkt.http.server.servlet","title":"Packages"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/","text":"// http_server_servlet / com.hexagonkt.http.server.servlet Package com.hexagonkt.http.server.servlet \u00b6 [jvm] TODO Types \u00b6 Name Summary ServletFilter [jvm] Content class ServletFilter ( router : List , serverSettings : ServerSettings) : Filter ServletServer [jvm] Content abstract class ServletServer ( router : Router, async : Boolean ) : ServletContextListener More info Adapter to run a router inside a Servlets container.","title":"Index"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/#package-comhexagonkthttpserverservlet","text":"[jvm] TODO","title":"Package com.hexagonkt.http.server.servlet"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/#types","text":"Name Summary ServletFilter [jvm] Content class ServletFilter ( router : List , serverSettings : ServerSettings) : Filter ServletServer [jvm] Content abstract class ServletServer ( router : Router, async : Boolean ) : ServletContextListener More info Adapter to run a router inside a Servlets container.","title":"Types"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-filter/","text":"// http_server_servlet / com.hexagonkt.http.server.servlet / ServletFilter ServletFilter \u00b6 [jvm] class ServletFilter ( router : List , serverSettings : ServerSettings) : Filter Functions \u00b6 Name Summary destroy [jvm] Content open override fun destroy () doFilter [jvm] Content open override fun doFilter (request: ServletRequest, response: ServletResponse, chain: FilterChain) init [jvm] Content open override fun init (filterConfig: FilterConfig)","title":"Index"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-filter/#servletfilter","text":"[jvm] class ServletFilter ( router : List , serverSettings : ServerSettings) : Filter","title":"ServletFilter"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-filter/#functions","text":"Name Summary destroy [jvm] Content open override fun destroy () doFilter [jvm] Content open override fun doFilter (request: ServletRequest, response: ServletResponse, chain: FilterChain) init [jvm] Content open override fun init (filterConfig: FilterConfig)","title":"Functions"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-filter/-servlet-filter/","text":"// http_server_servlet / com.hexagonkt.http.server.servlet / ServletFilter / ServletFilter ServletFilter \u00b6 [jvm] Content fun ServletFilter (router: List , serverSettings: ServerSettings)","title":" servlet filter"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-filter/-servlet-filter/#servletfilter","text":"[jvm] Content fun ServletFilter (router: List , serverSettings: ServerSettings)","title":"ServletFilter"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-filter/destroy/","text":"// http_server_servlet / com.hexagonkt.http.server.servlet / ServletFilter / destroy destroy \u00b6 [jvm] Content open override fun destroy ()","title":"Destroy"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-filter/destroy/#destroy","text":"[jvm] Content open override fun destroy ()","title":"destroy"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-filter/do-filter/","text":"// http_server_servlet / com.hexagonkt.http.server.servlet / ServletFilter / doFilter doFilter \u00b6 [jvm] Content open override fun doFilter (request: ServletRequest, response: ServletResponse, chain: FilterChain)","title":"Do filter"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-filter/do-filter/#dofilter","text":"[jvm] Content open override fun doFilter (request: ServletRequest, response: ServletResponse, chain: FilterChain)","title":"doFilter"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-filter/init/","text":"// http_server_servlet / com.hexagonkt.http.server.servlet / ServletFilter / init init \u00b6 [jvm] Content open override fun init (filterConfig: FilterConfig)","title":"Init"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-filter/init/#init","text":"[jvm] Content open override fun init (filterConfig: FilterConfig)","title":"init"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/","text":"// http_server_servlet / com.hexagonkt.http.server.servlet / ServletServer ServletServer \u00b6 [jvm] abstract class ServletServer ( router : Router, async : Boolean ) : ServletContextListener Adapter to run a router inside a Servlets container. It is not a standard engine as it is not started/stopped. Constructors \u00b6 ServletServer [jvm] fun ServletServer (router: Router = Router(), async: Boolean = false) Functions \u00b6 Name Summary contextDestroyed [jvm] Content open override fun contextDestroyed (sce: ServletContextEvent?) contextInitialized [jvm] Content open override fun contextInitialized (sce: ServletContextEvent) createRouter [jvm] Content open fun createRouter (): Router","title":"Index"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/#servletserver","text":"[jvm] abstract class ServletServer ( router : Router, async : Boolean ) : ServletContextListener Adapter to run a router inside a Servlets container. It is not a standard engine as it is not started/stopped.","title":"ServletServer"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/#constructors","text":"ServletServer [jvm] fun ServletServer (router: Router = Router(), async: Boolean = false)","title":"Constructors"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/#functions","text":"Name Summary contextDestroyed [jvm] Content open override fun contextDestroyed (sce: ServletContextEvent?) contextInitialized [jvm] Content open override fun contextInitialized (sce: ServletContextEvent) createRouter [jvm] Content open fun createRouter (): Router","title":"Functions"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/-servlet-server/","text":"// http_server_servlet / com.hexagonkt.http.server.servlet / ServletServer / ServletServer ServletServer \u00b6 [jvm] Content fun ServletServer (router: Router = Router(), async: Boolean = false)","title":" servlet server"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/-servlet-server/#servletserver","text":"[jvm] Content fun ServletServer (router: Router = Router(), async: Boolean = false)","title":"ServletServer"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/context-destroyed/","text":"// http_server_servlet / com.hexagonkt.http.server.servlet / ServletServer / contextDestroyed contextDestroyed \u00b6 [jvm] Content open override fun contextDestroyed (sce: ServletContextEvent?)","title":"Context destroyed"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/context-destroyed/#contextdestroyed","text":"[jvm] Content open override fun contextDestroyed (sce: ServletContextEvent?)","title":"contextDestroyed"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/context-initialized/","text":"// http_server_servlet / com.hexagonkt.http.server.servlet / ServletServer / contextInitialized contextInitialized \u00b6 [jvm] Content open override fun contextInitialized (sce: ServletContextEvent)","title":"Context initialized"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/context-initialized/#contextinitialized","text":"[jvm] Content open override fun contextInitialized (sce: ServletContextEvent)","title":"contextInitialized"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/create-router/","text":"// http_server_servlet / com.hexagonkt.http.server.servlet / ServletServer / createRouter createRouter \u00b6 [jvm] Content open fun createRouter (): Router","title":"Create router"},{"location":"http_server_servlet/com.hexagonkt.http.server.servlet/-servlet-server/create-router/#createrouter","text":"[jvm] Content open fun createRouter (): Router","title":"createRouter"},{"location":"logging_logback/","text":"// logging_logback logging_logback \u00b6 [jvm] Contains the logger adapter for the Logback logging library. Install the Dependency \u00b6 build.gradle 1 implementation ( \"com.hexagonkt:logging_logback:$hexagonVersion\" ) pom.xml 1 2 3 4 5 6 7 8 9 <!-- ! Pick ONLY ONE of the options below !--> <!-- Full featured implementation --> <dependency> <groupId> com.hexagonkt </groupId> <artifactId> logging_logback </artifactId> <version> $hexagonVersion </version> </dependency> !!! Info The above adapter bridge other logging libraries that may be used by other third party libraries you use (if you want to disable this behaviour, you need to explicitly exclude bridging libraries). build.gradle 1 2 3 4 // Bridges runtimeOnly ( \"org.slf4j:jcl-over-slf4j:1.7.30\" ) runtimeOnly ( \"org.slf4j:log4j-over-slf4j:1.7.30\" ) runtimeOnly ( \"org.slf4j:jul-to-slf4j:1.7.30\" ) pom.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <dependency> <groupId> org.slf4j </groupId> <artifactId> jcl-over-slf4j </artifactId> <version> 1.7.30 </version> </dependency> <dependency> <groupId> org.slf4j </groupId> <artifactId> log4j-over-slf4j </artifactId> <version> 1.7.30 </version> </dependency> <dependency> <groupId> org.slf4j </groupId> <artifactId> jul-to-slf4j </artifactId> <version> 1.7.30 </version> </dependency> Packages \u00b6 Name com.hexagonkt.logging","title":"Index"},{"location":"logging_logback/#logging_logback","text":"[jvm] Contains the logger adapter for the Logback logging library.","title":"logging_logback"},{"location":"logging_logback/#install-the-dependency","text":"build.gradle 1 implementation ( \"com.hexagonkt:logging_logback:$hexagonVersion\" ) pom.xml 1 2 3 4 5 6 7 8 9 <!-- ! Pick ONLY ONE of the options below !--> <!-- Full featured implementation --> <dependency> <groupId> com.hexagonkt </groupId> <artifactId> logging_logback </artifactId> <version> $hexagonVersion </version> </dependency> !!! Info The above adapter bridge other logging libraries that may be used by other third party libraries you use (if you want to disable this behaviour, you need to explicitly exclude bridging libraries). build.gradle 1 2 3 4 // Bridges runtimeOnly ( \"org.slf4j:jcl-over-slf4j:1.7.30\" ) runtimeOnly ( \"org.slf4j:log4j-over-slf4j:1.7.30\" ) runtimeOnly ( \"org.slf4j:jul-to-slf4j:1.7.30\" ) pom.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 <dependency> <groupId> org.slf4j </groupId> <artifactId> jcl-over-slf4j </artifactId> <version> 1.7.30 </version> </dependency> <dependency> <groupId> org.slf4j </groupId> <artifactId> log4j-over-slf4j </artifactId> <version> 1.7.30 </version> </dependency> <dependency> <groupId> org.slf4j </groupId> <artifactId> jul-to-slf4j </artifactId> <version> 1.7.30 </version> </dependency>","title":"Install the Dependency"},{"location":"logging_logback/#packages","text":"Name com.hexagonkt.logging","title":"Packages"},{"location":"logging_logback/com.hexagonkt.logging/","text":"// logging_logback / com.hexagonkt.logging Package com.hexagonkt.logging \u00b6 [jvm] Provides a logging management capabilities abstracting the application from logging libraries. Types \u00b6 Name Summary LogbackLoggingAdapter [jvm] Content object LogbackLoggingAdapter : LoggingPort","title":"Index"},{"location":"logging_logback/com.hexagonkt.logging/#package-comhexagonktlogging","text":"[jvm] Provides a logging management capabilities abstracting the application from logging libraries.","title":"Package com.hexagonkt.logging"},{"location":"logging_logback/com.hexagonkt.logging/#types","text":"Name Summary LogbackLoggingAdapter [jvm] Content object LogbackLoggingAdapter : LoggingPort","title":"Types"},{"location":"logging_logback/com.hexagonkt.logging/-logback-logging-adapter/","text":"// logging_logback / com.hexagonkt.logging / LogbackLoggingAdapter LogbackLoggingAdapter \u00b6 [jvm] object LogbackLoggingAdapter : LoggingPort Functions \u00b6 Name Summary createLogger [jvm] Content open override fun createLogger (name: String ): LoggerPort setLoggerLevel [jvm] Content open override fun setLoggerLevel (name: String , level: LoggingLevel)","title":"Index"},{"location":"logging_logback/com.hexagonkt.logging/-logback-logging-adapter/#logbackloggingadapter","text":"[jvm] object LogbackLoggingAdapter : LoggingPort","title":"LogbackLoggingAdapter"},{"location":"logging_logback/com.hexagonkt.logging/-logback-logging-adapter/#functions","text":"Name Summary createLogger [jvm] Content open override fun createLogger (name: String ): LoggerPort setLoggerLevel [jvm] Content open override fun setLoggerLevel (name: String , level: LoggingLevel)","title":"Functions"},{"location":"logging_logback/com.hexagonkt.logging/-logback-logging-adapter/create-logger/","text":"// logging_logback / com.hexagonkt.logging / LogbackLoggingAdapter / createLogger createLogger \u00b6 [jvm] Content open override fun createLogger (name: String ): LoggerPort","title":"Create logger"},{"location":"logging_logback/com.hexagonkt.logging/-logback-logging-adapter/create-logger/#createlogger","text":"[jvm] Content open override fun createLogger (name: String ): LoggerPort","title":"createLogger"},{"location":"logging_logback/com.hexagonkt.logging/-logback-logging-adapter/set-logger-level/","text":"// logging_logback / com.hexagonkt.logging / LogbackLoggingAdapter / setLoggerLevel setLoggerLevel \u00b6 [jvm] Content open override fun setLoggerLevel (name: String , level: LoggingLevel)","title":"Set logger level"},{"location":"logging_logback/com.hexagonkt.logging/-logback-logging-adapter/set-logger-level/#setloggerlevel","text":"[jvm] Content open override fun setLoggerLevel (name: String , level: LoggingLevel)","title":"setLoggerLevel"},{"location":"logging_slf4j_jul/","text":"// logging_slf4j_jul logging_slf4j_jul \u00b6 [jvm] Contains the logger adapter for the SLF4J JUL logging library. Install the Dependency \u00b6 build.gradle 1 implementation ( \"com.hexagonkt:logging_slf4j_jul:$hexagonVersion\" ) pom.xml 1 2 3 4 5 6 7 8 9 <!-- ! Pick ONLY ONE of the options below !--> <!-- Full featured implementation --> <dependency> <groupId> com.hexagonkt </groupId> <artifactId> logging_slf4j_jul </artifactId> <version> $hexagonVersion </version> </dependency> !!! Info The above adapter bridge other logging libraries that may be used by other third party libraries you use (if you want to disable this behaviour, you need to explicitly exclude bridging libraries). build.gradle 1 2 3 // Bridges runtimeOnly ( \"org.slf4j:jcl-over-slf4j:1.7.30\" ) runtimeOnly ( \"org.slf4j:log4j-over-slf4j:1.7.30\" ) pom.xml 1 2 3 4 5 6 7 8 9 10 <dependency> <groupId> org.slf4j </groupId> <artifactId> jcl-over-slf4j </artifactId> <version> 1.7.30 </version> </dependency> <dependency> <groupId> org.slf4j </groupId> <artifactId> log4j-over-slf4j </artifactId> <version> 1.7.30 </version> </dependency> Packages \u00b6 Name com.hexagonkt.logging","title":"Index"},{"location":"logging_slf4j_jul/#logging_slf4j_jul","text":"[jvm] Contains the logger adapter for the SLF4J JUL logging library.","title":"logging_slf4j_jul"},{"location":"logging_slf4j_jul/#install-the-dependency","text":"build.gradle 1 implementation ( \"com.hexagonkt:logging_slf4j_jul:$hexagonVersion\" ) pom.xml 1 2 3 4 5 6 7 8 9 <!-- ! Pick ONLY ONE of the options below !--> <!-- Full featured implementation --> <dependency> <groupId> com.hexagonkt </groupId> <artifactId> logging_slf4j_jul </artifactId> <version> $hexagonVersion </version> </dependency> !!! Info The above adapter bridge other logging libraries that may be used by other third party libraries you use (if you want to disable this behaviour, you need to explicitly exclude bridging libraries). build.gradle 1 2 3 // Bridges runtimeOnly ( \"org.slf4j:jcl-over-slf4j:1.7.30\" ) runtimeOnly ( \"org.slf4j:log4j-over-slf4j:1.7.30\" ) pom.xml 1 2 3 4 5 6 7 8 9 10 <dependency> <groupId> org.slf4j </groupId> <artifactId> jcl-over-slf4j </artifactId> <version> 1.7.30 </version> </dependency> <dependency> <groupId> org.slf4j </groupId> <artifactId> log4j-over-slf4j </artifactId> <version> 1.7.30 </version> </dependency>","title":"Install the Dependency"},{"location":"logging_slf4j_jul/#packages","text":"Name com.hexagonkt.logging","title":"Packages"},{"location":"logging_slf4j_jul/com.hexagonkt.logging/","text":"// logging_slf4j_jul / com.hexagonkt.logging Package com.hexagonkt.logging \u00b6 [jvm] Provides a logging management capabilities abstracting the application from logging libraries. Types \u00b6 Name Summary Slf4jJulLoggingAdapter [jvm] Content object Slf4jJulLoggingAdapter : LoggingPort","title":"Index"},{"location":"logging_slf4j_jul/com.hexagonkt.logging/#package-comhexagonktlogging","text":"[jvm] Provides a logging management capabilities abstracting the application from logging libraries.","title":"Package com.hexagonkt.logging"},{"location":"logging_slf4j_jul/com.hexagonkt.logging/#types","text":"Name Summary Slf4jJulLoggingAdapter [jvm] Content object Slf4jJulLoggingAdapter : LoggingPort","title":"Types"},{"location":"logging_slf4j_jul/com.hexagonkt.logging/-slf4j-jul-logging-adapter/","text":"// logging_slf4j_jul / com.hexagonkt.logging / Slf4jJulLoggingAdapter Slf4jJulLoggingAdapter \u00b6 [jvm] object Slf4jJulLoggingAdapter : LoggingPort Functions \u00b6 Name Summary createLogger [jvm] Content open override fun createLogger (name: String ): LoggerPort setLoggerLevel [jvm] Content open override fun setLoggerLevel (name: String , level: LoggingLevel)","title":"Index"},{"location":"logging_slf4j_jul/com.hexagonkt.logging/-slf4j-jul-logging-adapter/#slf4jjulloggingadapter","text":"[jvm] object Slf4jJulLoggingAdapter : LoggingPort","title":"Slf4jJulLoggingAdapter"},{"location":"logging_slf4j_jul/com.hexagonkt.logging/-slf4j-jul-logging-adapter/#functions","text":"Name Summary createLogger [jvm] Content open override fun createLogger (name: String ): LoggerPort setLoggerLevel [jvm] Content open override fun setLoggerLevel (name: String , level: LoggingLevel)","title":"Functions"},{"location":"logging_slf4j_jul/com.hexagonkt.logging/-slf4j-jul-logging-adapter/create-logger/","text":"// logging_slf4j_jul / com.hexagonkt.logging / Slf4jJulLoggingAdapter / createLogger createLogger \u00b6 [jvm] Content open override fun createLogger (name: String ): LoggerPort","title":"Create logger"},{"location":"logging_slf4j_jul/com.hexagonkt.logging/-slf4j-jul-logging-adapter/create-logger/#createlogger","text":"[jvm] Content open override fun createLogger (name: String ): LoggerPort","title":"createLogger"},{"location":"logging_slf4j_jul/com.hexagonkt.logging/-slf4j-jul-logging-adapter/set-logger-level/","text":"// logging_slf4j_jul / com.hexagonkt.logging / Slf4jJulLoggingAdapter / setLoggerLevel setLoggerLevel \u00b6 [jvm] Content open override fun setLoggerLevel (name: String , level: LoggingLevel)","title":"Set logger level"},{"location":"logging_slf4j_jul/com.hexagonkt.logging/-slf4j-jul-logging-adapter/set-logger-level/#setloggerlevel","text":"[jvm] Content open override fun setLoggerLevel (name: String , level: LoggingLevel)","title":"setLoggerLevel"},{"location":"messaging_rabbitmq/","text":"// messaging_rabbitmq messaging_rabbitmq \u00b6 [jvm] !!! Warning This module is a preview and its code is still being reviewed and tested. Hexagon's event bus implementation based in RabbitMQ. Install the Dependency \u00b6 build.gradle 1 2 3 4 5 repositories { mavenCentral () } implementation ( \"com.hexagonkt:messaging_rabbitmq:$hexagonVersion\" ) pom.xml 1 2 3 4 5 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> messaging_rabbitmq </artifactId> <version> $hexagonVersion </version> </dependency> Packages \u00b6 Name com.hexagonkt.messaging.rabbitmq","title":"RabbitMQ (beta)"},{"location":"messaging_rabbitmq/#messaging_rabbitmq","text":"[jvm] !!! Warning This module is a preview and its code is still being reviewed and tested. Hexagon's event bus implementation based in RabbitMQ.","title":"messaging_rabbitmq"},{"location":"messaging_rabbitmq/#install-the-dependency","text":"build.gradle 1 2 3 4 5 repositories { mavenCentral () } implementation ( \"com.hexagonkt:messaging_rabbitmq:$hexagonVersion\" ) pom.xml 1 2 3 4 5 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> messaging_rabbitmq </artifactId> <version> $hexagonVersion </version> </dependency>","title":"Install the Dependency"},{"location":"messaging_rabbitmq/#packages","text":"Name com.hexagonkt.messaging.rabbitmq","title":"Packages"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/","text":"// messaging_rabbitmq / com.hexagonkt.messaging.rabbitmq Package com.hexagonkt.messaging.rabbitmq \u00b6 [jvm] Contains a RabbitMQ Client and a Hexagon messaging implementation backed by it. Types \u00b6 Name Summary RabbitMqAdapter [jvm] Content class RabbitMqAdapter ( url : String ) : MessagingPort RabbitMqClient [jvm] Content class RabbitMqClient ( connectionFactory : ConnectionFactory, poolSize : Int ) : Closeable More info Rabbit client.","title":"Index"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/#package-comhexagonktmessagingrabbitmq","text":"[jvm] Contains a RabbitMQ Client and a Hexagon messaging implementation backed by it.","title":"Package com.hexagonkt.messaging.rabbitmq"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/#types","text":"Name Summary RabbitMqAdapter [jvm] Content class RabbitMqAdapter ( url : String ) : MessagingPort RabbitMqClient [jvm] Content class RabbitMqClient ( connectionFactory : ConnectionFactory, poolSize : Int ) : Closeable More info Rabbit client.","title":"Types"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-adapter/","text":"// messaging_rabbitmq / com.hexagonkt.messaging.rabbitmq / RabbitMqAdapter RabbitMqAdapter \u00b6 [jvm] class RabbitMqAdapter ( url : String ) : MessagingPort Functions \u00b6 Name Summary consume [jvm] Content open fun < T : Message> consume (type: KClass < T >, consumer: ( T ) -> Unit ) open override fun < T : Message> consume (type: KClass < T >, address: String , consumer: ( T ) -> Unit ) publish [jvm] Content open fun publish (message: Message) open override fun publish (message: Message, address: String )","title":"Index"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-adapter/#rabbitmqadapter","text":"[jvm] class RabbitMqAdapter ( url : String ) : MessagingPort","title":"RabbitMqAdapter"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-adapter/#functions","text":"Name Summary consume [jvm] Content open fun < T : Message> consume (type: KClass < T >, consumer: ( T ) -> Unit ) open override fun < T : Message> consume (type: KClass < T >, address: String , consumer: ( T ) -> Unit ) publish [jvm] Content open fun publish (message: Message) open override fun publish (message: Message, address: String )","title":"Functions"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-adapter/-rabbit-mq-adapter/","text":"// messaging_rabbitmq / com.hexagonkt.messaging.rabbitmq / RabbitMqAdapter / RabbitMqAdapter RabbitMqAdapter \u00b6 [jvm] Content fun RabbitMqAdapter (url: String = \"amqp://guest:guest@localhost\")","title":" rabbit mq adapter"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-adapter/-rabbit-mq-adapter/#rabbitmqadapter","text":"[jvm] Content fun RabbitMqAdapter (url: String = \"amqp://guest:guest@localhost\")","title":"RabbitMqAdapter"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-adapter/consume/","text":"// messaging_rabbitmq / com.hexagonkt.messaging.rabbitmq / RabbitMqAdapter / consume consume \u00b6 [jvm] Content open override fun < T : Message> consume (type: KClass < T >, address: String , consumer: ( T ) -> Unit )","title":"Consume"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-adapter/consume/#consume","text":"[jvm] Content open override fun < T : Message> consume (type: KClass < T >, address: String , consumer: ( T ) -> Unit )","title":"consume"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-adapter/publish/","text":"// messaging_rabbitmq / com.hexagonkt.messaging.rabbitmq / RabbitMqAdapter / publish publish \u00b6 [jvm] Content open override fun publish (message: Message, address: String )","title":"Publish"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-adapter/publish/#publish","text":"[jvm] Content open override fun publish (message: Message, address: String )","title":"publish"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/","text":"// messaging_rabbitmq / com.hexagonkt.messaging.rabbitmq / RabbitMqClient RabbitMqClient \u00b6 [jvm] class RabbitMqClient ( connectionFactory : ConnectionFactory, poolSize : Int ) : Closeable Rabbit client. TODO Review if channel handling is still needed in Java 4.1.x version TODO Add metrics TODO Ordered shutdown Constructors \u00b6 RabbitMqClient [jvm] fun RabbitMqClient (uri: URI ). RabbitMqClient [jvm] fun RabbitMqClient (connectionFactory: ConnectionFactory, poolSize: Int = getRuntime().availableProcessors()) Functions \u00b6 Name Summary bindExchange [jvm] Content fun bindExchange (exchange: String , exchangeType: String , routingKey: String , queue: String ) More info . call [jvm] Content fun call (requestQueue: String , message: String ): String close [jvm] Content open override fun close () consume [jvm] Content fun < T : Any , R : Any > consume (queueName: String , type: KClass < T >, handler: ( T ) -> R ) [jvm] Content fun < T : Any > consume (exchange: String , routingKey: String , type: KClass < T >, handler: ( T ) -> Unit ) More info . declareQueue [jvm] Content fun declareQueue (name: String ) More info . deleteQueue [jvm] Content fun deleteQueue (name: String ) More info . publish [jvm] Content fun publish (queue: String , message: String , correlationId: String ? = null) fun publish (exchange: String , routingKey: String , message: String , correlationId: String ? = null) Properties \u00b6 Name Summary connected [jvm] val connected : Boolean .","title":"Index"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/#rabbitmqclient","text":"[jvm] class RabbitMqClient ( connectionFactory : ConnectionFactory, poolSize : Int ) : Closeable Rabbit client. TODO Review if channel handling is still needed in Java 4.1.x version TODO Add metrics TODO Ordered shutdown","title":"RabbitMqClient"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/#constructors","text":"RabbitMqClient [jvm] fun RabbitMqClient (uri: URI ). RabbitMqClient [jvm] fun RabbitMqClient (connectionFactory: ConnectionFactory, poolSize: Int = getRuntime().availableProcessors())","title":"Constructors"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/#functions","text":"Name Summary bindExchange [jvm] Content fun bindExchange (exchange: String , exchangeType: String , routingKey: String , queue: String ) More info . call [jvm] Content fun call (requestQueue: String , message: String ): String close [jvm] Content open override fun close () consume [jvm] Content fun < T : Any , R : Any > consume (queueName: String , type: KClass < T >, handler: ( T ) -> R ) [jvm] Content fun < T : Any > consume (exchange: String , routingKey: String , type: KClass < T >, handler: ( T ) -> Unit ) More info . declareQueue [jvm] Content fun declareQueue (name: String ) More info . deleteQueue [jvm] Content fun deleteQueue (name: String ) More info . publish [jvm] Content fun publish (queue: String , message: String , correlationId: String ? = null) fun publish (exchange: String , routingKey: String , message: String , correlationId: String ? = null)","title":"Functions"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/#properties","text":"Name Summary connected [jvm] val connected : Boolean .","title":"Properties"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/-rabbit-mq-client/","text":"// messaging_rabbitmq / com.hexagonkt.messaging.rabbitmq / RabbitMqClient / RabbitMqClient RabbitMqClient \u00b6 [jvm] Content fun RabbitMqClient (uri: URI ) More info . [jvm] Content fun RabbitMqClient (connectionFactory: ConnectionFactory, poolSize: Int = getRuntime().availableProcessors())","title":" rabbit mq client"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/-rabbit-mq-client/#rabbitmqclient","text":"[jvm] Content fun RabbitMqClient (uri: URI ) More info . [jvm] Content fun RabbitMqClient (connectionFactory: ConnectionFactory, poolSize: Int = getRuntime().availableProcessors())","title":"RabbitMqClient"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/bind-exchange/","text":"// messaging_rabbitmq / com.hexagonkt.messaging.rabbitmq / RabbitMqClient / bindExchange bindExchange \u00b6 [jvm] Content fun bindExchange (exchange: String , exchangeType: String , routingKey: String , queue: String ) More info .","title":"Bind exchange"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/bind-exchange/#bindexchange","text":"[jvm] Content fun bindExchange (exchange: String , exchangeType: String , routingKey: String , queue: String ) More info .","title":"bindExchange"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/call/","text":"// messaging_rabbitmq / com.hexagonkt.messaging.rabbitmq / RabbitMqClient / call call \u00b6 [jvm] Content fun call (requestQueue: String , message: String ): String","title":"Call"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/call/#call","text":"[jvm] Content fun call (requestQueue: String , message: String ): String","title":"call"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/close/","text":"// messaging_rabbitmq / com.hexagonkt.messaging.rabbitmq / RabbitMqClient / close close \u00b6 [jvm] Content open override fun close () More info See also \u00b6 jvm java.io.Closeable","title":"Close"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/close/#close","text":"[jvm] Content open override fun close () More info","title":"close"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/close/#see-also","text":"jvm java.io.Closeable","title":"See also"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/connected/","text":"// messaging_rabbitmq / com.hexagonkt.messaging.rabbitmq / RabbitMqClient / connected connected \u00b6 [jvm] Content val connected : Boolean More info .","title":"Connected"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/connected/#connected","text":"[jvm] Content val connected : Boolean More info .","title":"connected"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/consume/","text":"// messaging_rabbitmq / com.hexagonkt.messaging.rabbitmq / RabbitMqClient / consume consume \u00b6 [jvm] Content fun < T : Any > consume (exchange: String , routingKey: String , type: KClass < T >, handler: ( T ) -> Unit ) More info . [jvm] Content fun < T : Any , R : Any > consume (queueName: String , type: KClass < T >, handler: ( T ) -> R )","title":"Consume"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/consume/#consume","text":"[jvm] Content fun < T : Any > consume (exchange: String , routingKey: String , type: KClass < T >, handler: ( T ) -> Unit ) More info . [jvm] Content fun < T : Any , R : Any > consume (queueName: String , type: KClass < T >, handler: ( T ) -> R )","title":"consume"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/declare-queue/","text":"// messaging_rabbitmq / com.hexagonkt.messaging.rabbitmq / RabbitMqClient / declareQueue declareQueue \u00b6 [jvm] Content fun declareQueue (name: String ) More info .","title":"Declare queue"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/declare-queue/#declarequeue","text":"[jvm] Content fun declareQueue (name: String ) More info .","title":"declareQueue"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/delete-queue/","text":"// messaging_rabbitmq / com.hexagonkt.messaging.rabbitmq / RabbitMqClient / deleteQueue deleteQueue \u00b6 [jvm] Content fun deleteQueue (name: String ) More info .","title":"Delete queue"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/delete-queue/#deletequeue","text":"[jvm] Content fun deleteQueue (name: String ) More info .","title":"deleteQueue"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/publish/","text":"// messaging_rabbitmq / com.hexagonkt.messaging.rabbitmq / RabbitMqClient / publish publish \u00b6 [jvm] Content fun publish (queue: String , message: String , correlationId: String ? = null) fun publish (exchange: String , routingKey: String , message: String , correlationId: String ? = null)","title":"Publish"},{"location":"messaging_rabbitmq/com.hexagonkt.messaging.rabbitmq/-rabbit-mq-client/publish/#publish","text":"[jvm] Content fun publish (queue: String , message: String , correlationId: String ? = null) fun publish (exchange: String , routingKey: String , message: String , correlationId: String ? = null)","title":"publish"},{"location":"port_http_client/","text":"// port_http_client port_http_client \u00b6 [jvm] This port provides a common interface for using HTTP clients. Many adapters can be developed to use different technologies. Its main functionalities are: HTTP, HTTPS and [HTTP/2](https://en.wikipedia.org/wiki/HTTP/2) support [Mutual TLS](https://en.wikipedia.org/wiki/Mutual_authentication) Body encoding/decoding Request/response exchange Form submissions Cookie management File uploading/downloading Install the Dependency \u00b6 This module is not meant to be used directly. You should include an Adapter implementing this feature (as /http_client_ahc) in order to create HTTP clients. Create an HTTP client \u00b6 You create an HTTP Client instance with default options as follows: Packages \u00b6 Name com.hexagonkt.http.client","title":"HTTP Client"},{"location":"port_http_client/#port_http_client","text":"[jvm] This port provides a common interface for using HTTP clients. Many adapters can be developed to use different technologies. Its main functionalities are: HTTP, HTTPS and [HTTP/2](https://en.wikipedia.org/wiki/HTTP/2) support [Mutual TLS](https://en.wikipedia.org/wiki/Mutual_authentication) Body encoding/decoding Request/response exchange Form submissions Cookie management File uploading/downloading","title":"port_http_client"},{"location":"port_http_client/#install-the-dependency","text":"This module is not meant to be used directly. You should include an Adapter implementing this feature (as /http_client_ahc) in order to create HTTP clients.","title":"Install the Dependency"},{"location":"port_http_client/#create-an-http-client","text":"You create an HTTP Client instance with default options as follows:","title":"Create an HTTP client"},{"location":"port_http_client/#packages","text":"Name com.hexagonkt.http.client","title":"Packages"},{"location":"port_http_client/port_http_client/","text":"Module port_http_client \u00b6 This port provides a common interface for using HTTP clients. Many adapters can be developed to use different technologies. Its main functionalities are: HTTP, HTTPS and HTTP/2 support Mutual TLS Body encoding/decoding Request/response exchange Form submissions Cookie management File uploading/downloading Install the Dependency \u00b6 This module is not meant to be used directly. You should include an Adapter implementing this feature (as http_client_ahc ) in order to create HTTP clients. Create an HTTP client \u00b6 You create an HTTP Client instance with default options as follows: 1 2 3 4 5 6 7 // Adapter injected Client () // No base endpoint, whole URL must be passed each request Client ( \"http://host:1234/base\" ) // Requests' paths will be appended to supplied base URL // Adapter provided explicitly Client ( adapter ) Client ( adapter , \"http://host:1234/base\" ) Settings \u00b6 If you want to configure options for the client, you can create it with the following code: 1 2 3 4 5 6 7 8 9 10 // All client settings parameters are optionals and provide default values Client ( \"http://host:1234/base\" , ClientSettings ( contentType = \"application/json\" , useCookies = true , headers = mapOf ( \"X-Api-Key\" to listOf ( \"cafebabe\" )), // Headers to use in all requests user = \"user\" , // HTTP Basic auth user password = \"password\" , // HTTP Basic auth password insecure = false , // If true, the client doesn't check server certificates sslSettings = SslSettings () // Key stores settings (check TLS section for details) )) Send generic requests \u00b6 The most common use case is to send a request and get a response. For details about how to use requests and responses, refer to the Request and the Response API. Check this code snippet to get a glimpse on how to send the most general requests: 1 2 3 4 5 6 7 8 9 val request = Request ( method = GET , path = \"/\" , body = mapOf ( \"body\" to \"payload\" ), headers = mapOf ( \"X-Header\" to listOf ( \"value\" )), contentType = Json . contentType ) val response = client . send ( request ) Simple requests shortcuts \u00b6 There are utility methods to make the most common request in an easy way. Without body \u00b6 1 2 3 4 5 6 7 8 val responseGet = client . get ( \"/\" ) val responseHead = client . head ( \"/\" ) val responsePost = client . post ( \"/\" ) val responsePut = client . put ( \"/\" ) val responseDelete = client . delete ( \"/\" ) val responseTrace = client . trace ( \"/\" ) val responseOptions = client . options ( \"/\" ) val responsePatch = client . patch ( \"/\" ) With body \u00b6 1 2 3 4 5 6 7 8 9 val body = mapOf ( \"key\" to \"value\" ) val responseGet = client . get ( \"/\" , body = body ) val responsePost = client . post ( \"/\" , body ) val responsePut = client . put ( \"/\" , body ) val responseDelete = client . delete ( \"/\" , body ) val responseTrace = client . trace ( \"/\" , body ) val responseOptions = client . options ( \"/\" , body ) val responsePatch = client . patch ( \"/\" , body ) With body and content type \u00b6 1 2 3 4 5 6 7 8 9 val body = mapOf ( \"key\" to \"value\" ) val responseGet = client . get ( \"/\" , body = body , format = Yaml ) val responsePost = client . post ( \"/\" , body , Yaml ) val responsePut = client . put ( \"/\" , body , Yaml ) val responseDelete = client . delete ( \"/\" , body , Yaml ) val responseTrace = client . trace ( \"/\" , body , Yaml ) val responseOptions = client . options ( \"/\" , body , Yaml ) val responsePatch = client . patch ( \"/\" , body , Yaml ) Cookies \u00b6 The HTTP client support setting cookies from client side and updates them after any server request. Check the details in the following code fragment: 1 2 3 4 5 6 7 8 9 10 11 12 val cookieName = \"sampleCookie\" val cookieValue = \"sampleCookieValue\" // Set the cookie in the client client . cookies [ \"sampleCookie\" ] = Cookie ( cookieName , cookieValue ) // Assert that it is received in the server and change its value afterwards client . post ( \"/assertHasCookie?cookieName= $ cookieName \" ) client . post ( \"/addCookie?cookieName= $ cookieName &cookieValue= ${ cookieValue } _changed\" ) // Verify that the client cookie is updated assert ( client . cookies [ cookieName ]?. value == cookieValue + \"_changed\" ) You can also check the full test for more details. Multipart (forms and files) \u00b6 Using the HTTP client you can send MIME multipart parts to the server. You can use it to post forms or files. Forms \u00b6 1 2 val parts = mapOf ( \"name\" to Part ( \"name\" , \"value\" )) val response = client . send ( Request ( POST , \"/multipart\" , parts = parts )) Files \u00b6 1 2 3 val stream = URL ( \"classpath:assets/index.html\" ). openStream () val parts = mapOf ( \"file\" to Part ( \"file\" , stream , \"index.html\" )) val response = client . send ( Request ( POST , \"/file\" , parts = parts )) TLS \u00b6 The HTTP client supports server certificates (to use HTTPS and HTTP/2) and also client certificates (to be able to do mutual TLS). Key stores may have the JKS format (deprecated), or the newer PKCS12 format. To set up client/server certificates, you need to include SslSettings in your ClientSettings . In the sections below you can see how to configure these parameters. Key Store \u00b6 This store holds the identity certificate, this certificate is presented to the server by the client in the handshake for the server to authorize or deny the connection. The following code: 1 2 3 4 val keyStoreSettings = SslSettings ( keyStore = URL ( \"classpath:ssl/ $ identity \" ), keyStorePassword = identity . reversed () ) Trust Store \u00b6 This key store should include all the trusted certificates. Any certificate added as CA (certificate authority) makes the client trust any other certificate signed by them. However, you can also add standalone server certificates. 1 2 3 4 val trustStoreSettings = SslSettings ( trustStore = URL ( \"classpath:ssl/ $ trust \" ), trustStorePassword = trust . reversed () ) Mutual TLS \u00b6 If you set up the identity (service's own certificate) and the trust store (CAs and servers trusted by the client), you will achieve double ended authentication (server authenticated by the client, and client authenticated by the server). You can see a complete example below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // Key store files val identity = \"hexagonkt.p12\" val trust = \"trust.p12\" // Default passwords are file name reversed val keyStorePassword = identity . reversed () val trustStorePassword = trust . reversed () // Key stores can be set as URIs to classpath resources (the triple slash is needed) val keyStore = URL ( \"classpath:ssl/ $ identity \" ) val trustStore = URL ( \"classpath:ssl/ $ trust \" ) val sslSettings = SslSettings ( keyStore = keyStore , keyStorePassword = keyStorePassword , trustStore = trustStore , trustStorePassword = trustStorePassword , clientAuth = true // Requires a valid certificate from the client (mutual TLS) ) val serverSettings = ServerSettings ( bindPort = 0 , protocol = HTTPS , // You can also use HTTP2 sslSettings = sslSettings ) val server = serve ( serverSettings , serverAdapter ) { get ( \"/hello\" ) { // We can access the certificate used by the client from the request val subjectDn = request . certificate ?. subjectDN ?. name response . headers [ \"cert\" ] = subjectDn ok ( \"Hello World!\" ) } } // We'll use the same certificate for the client (in a real scenario it would be different) val clientSettings = ClientSettings ( sslSettings = sslSettings ) // Create a HTTP client and make a HTTPS request val client = Client ( AhcAdapter (), \"https://localhost: ${ server . runtimePort } \" , clientSettings ) client . get ( \"/hello\" ). apply { logger . debug { body } // Assure the certificate received (and returned) by the server is correct assert ( headers . require ( \"cert\" ). first (). startsWith ( \"CN=hexagonkt.com\" )) assert ( body == \"Hello World!\" ) } Package com.hexagonkt.http.client \u00b6 This package holds the classes that define the HTTP client and its configuration settings.","title":"HTTP Client"},{"location":"port_http_client/port_http_client/#module-port_http_client","text":"This port provides a common interface for using HTTP clients. Many adapters can be developed to use different technologies. Its main functionalities are: HTTP, HTTPS and HTTP/2 support Mutual TLS Body encoding/decoding Request/response exchange Form submissions Cookie management File uploading/downloading","title":"Module port_http_client"},{"location":"port_http_client/port_http_client/#install-the-dependency","text":"This module is not meant to be used directly. You should include an Adapter implementing this feature (as http_client_ahc ) in order to create HTTP clients.","title":"Install the Dependency"},{"location":"port_http_client/port_http_client/#create-an-http-client","text":"You create an HTTP Client instance with default options as follows: 1 2 3 4 5 6 7 // Adapter injected Client () // No base endpoint, whole URL must be passed each request Client ( \"http://host:1234/base\" ) // Requests' paths will be appended to supplied base URL // Adapter provided explicitly Client ( adapter ) Client ( adapter , \"http://host:1234/base\" )","title":"Create an HTTP client"},{"location":"port_http_client/port_http_client/#settings","text":"If you want to configure options for the client, you can create it with the following code: 1 2 3 4 5 6 7 8 9 10 // All client settings parameters are optionals and provide default values Client ( \"http://host:1234/base\" , ClientSettings ( contentType = \"application/json\" , useCookies = true , headers = mapOf ( \"X-Api-Key\" to listOf ( \"cafebabe\" )), // Headers to use in all requests user = \"user\" , // HTTP Basic auth user password = \"password\" , // HTTP Basic auth password insecure = false , // If true, the client doesn't check server certificates sslSettings = SslSettings () // Key stores settings (check TLS section for details) ))","title":"Settings"},{"location":"port_http_client/port_http_client/#send-generic-requests","text":"The most common use case is to send a request and get a response. For details about how to use requests and responses, refer to the Request and the Response API. Check this code snippet to get a glimpse on how to send the most general requests: 1 2 3 4 5 6 7 8 9 val request = Request ( method = GET , path = \"/\" , body = mapOf ( \"body\" to \"payload\" ), headers = mapOf ( \"X-Header\" to listOf ( \"value\" )), contentType = Json . contentType ) val response = client . send ( request )","title":"Send generic requests"},{"location":"port_http_client/port_http_client/#simple-requests-shortcuts","text":"There are utility methods to make the most common request in an easy way.","title":"Simple requests shortcuts"},{"location":"port_http_client/port_http_client/#without-body","text":"1 2 3 4 5 6 7 8 val responseGet = client . get ( \"/\" ) val responseHead = client . head ( \"/\" ) val responsePost = client . post ( \"/\" ) val responsePut = client . put ( \"/\" ) val responseDelete = client . delete ( \"/\" ) val responseTrace = client . trace ( \"/\" ) val responseOptions = client . options ( \"/\" ) val responsePatch = client . patch ( \"/\" )","title":"Without body"},{"location":"port_http_client/port_http_client/#with-body","text":"1 2 3 4 5 6 7 8 9 val body = mapOf ( \"key\" to \"value\" ) val responseGet = client . get ( \"/\" , body = body ) val responsePost = client . post ( \"/\" , body ) val responsePut = client . put ( \"/\" , body ) val responseDelete = client . delete ( \"/\" , body ) val responseTrace = client . trace ( \"/\" , body ) val responseOptions = client . options ( \"/\" , body ) val responsePatch = client . patch ( \"/\" , body )","title":"With body"},{"location":"port_http_client/port_http_client/#with-body-and-content-type","text":"1 2 3 4 5 6 7 8 9 val body = mapOf ( \"key\" to \"value\" ) val responseGet = client . get ( \"/\" , body = body , format = Yaml ) val responsePost = client . post ( \"/\" , body , Yaml ) val responsePut = client . put ( \"/\" , body , Yaml ) val responseDelete = client . delete ( \"/\" , body , Yaml ) val responseTrace = client . trace ( \"/\" , body , Yaml ) val responseOptions = client . options ( \"/\" , body , Yaml ) val responsePatch = client . patch ( \"/\" , body , Yaml )","title":"With body and content type"},{"location":"port_http_client/port_http_client/#cookies","text":"The HTTP client support setting cookies from client side and updates them after any server request. Check the details in the following code fragment: 1 2 3 4 5 6 7 8 9 10 11 12 val cookieName = \"sampleCookie\" val cookieValue = \"sampleCookieValue\" // Set the cookie in the client client . cookies [ \"sampleCookie\" ] = Cookie ( cookieName , cookieValue ) // Assert that it is received in the server and change its value afterwards client . post ( \"/assertHasCookie?cookieName= $ cookieName \" ) client . post ( \"/addCookie?cookieName= $ cookieName &cookieValue= ${ cookieValue } _changed\" ) // Verify that the client cookie is updated assert ( client . cookies [ cookieName ]?. value == cookieValue + \"_changed\" ) You can also check the full test for more details.","title":"Cookies"},{"location":"port_http_client/port_http_client/#multipart-forms-and-files","text":"Using the HTTP client you can send MIME multipart parts to the server. You can use it to post forms or files.","title":"Multipart (forms and files)"},{"location":"port_http_client/port_http_client/#forms","text":"1 2 val parts = mapOf ( \"name\" to Part ( \"name\" , \"value\" )) val response = client . send ( Request ( POST , \"/multipart\" , parts = parts ))","title":"Forms"},{"location":"port_http_client/port_http_client/#files","text":"1 2 3 val stream = URL ( \"classpath:assets/index.html\" ). openStream () val parts = mapOf ( \"file\" to Part ( \"file\" , stream , \"index.html\" )) val response = client . send ( Request ( POST , \"/file\" , parts = parts ))","title":"Files"},{"location":"port_http_client/port_http_client/#tls","text":"The HTTP client supports server certificates (to use HTTPS and HTTP/2) and also client certificates (to be able to do mutual TLS). Key stores may have the JKS format (deprecated), or the newer PKCS12 format. To set up client/server certificates, you need to include SslSettings in your ClientSettings . In the sections below you can see how to configure these parameters.","title":"TLS"},{"location":"port_http_client/port_http_client/#key-store","text":"This store holds the identity certificate, this certificate is presented to the server by the client in the handshake for the server to authorize or deny the connection. The following code: 1 2 3 4 val keyStoreSettings = SslSettings ( keyStore = URL ( \"classpath:ssl/ $ identity \" ), keyStorePassword = identity . reversed () )","title":"Key Store"},{"location":"port_http_client/port_http_client/#trust-store","text":"This key store should include all the trusted certificates. Any certificate added as CA (certificate authority) makes the client trust any other certificate signed by them. However, you can also add standalone server certificates. 1 2 3 4 val trustStoreSettings = SslSettings ( trustStore = URL ( \"classpath:ssl/ $ trust \" ), trustStorePassword = trust . reversed () )","title":"Trust Store"},{"location":"port_http_client/port_http_client/#mutual-tls","text":"If you set up the identity (service's own certificate) and the trust store (CAs and servers trusted by the client), you will achieve double ended authentication (server authenticated by the client, and client authenticated by the server). You can see a complete example below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // Key store files val identity = \"hexagonkt.p12\" val trust = \"trust.p12\" // Default passwords are file name reversed val keyStorePassword = identity . reversed () val trustStorePassword = trust . reversed () // Key stores can be set as URIs to classpath resources (the triple slash is needed) val keyStore = URL ( \"classpath:ssl/ $ identity \" ) val trustStore = URL ( \"classpath:ssl/ $ trust \" ) val sslSettings = SslSettings ( keyStore = keyStore , keyStorePassword = keyStorePassword , trustStore = trustStore , trustStorePassword = trustStorePassword , clientAuth = true // Requires a valid certificate from the client (mutual TLS) ) val serverSettings = ServerSettings ( bindPort = 0 , protocol = HTTPS , // You can also use HTTP2 sslSettings = sslSettings ) val server = serve ( serverSettings , serverAdapter ) { get ( \"/hello\" ) { // We can access the certificate used by the client from the request val subjectDn = request . certificate ?. subjectDN ?. name response . headers [ \"cert\" ] = subjectDn ok ( \"Hello World!\" ) } } // We'll use the same certificate for the client (in a real scenario it would be different) val clientSettings = ClientSettings ( sslSettings = sslSettings ) // Create a HTTP client and make a HTTPS request val client = Client ( AhcAdapter (), \"https://localhost: ${ server . runtimePort } \" , clientSettings ) client . get ( \"/hello\" ). apply { logger . debug { body } // Assure the certificate received (and returned) by the server is correct assert ( headers . require ( \"cert\" ). first (). startsWith ( \"CN=hexagonkt.com\" )) assert ( body == \"Hello World!\" ) }","title":"Mutual TLS"},{"location":"port_http_client/port_http_client/#package-comhexagonkthttpclient","text":"This package holds the classes that define the HTTP client and its configuration settings.","title":"Package com.hexagonkt.http.client"},{"location":"port_http_client/com.hexagonkt.http.client/","text":"// port_http_client / com.hexagonkt.http.client Package com.hexagonkt.http.client \u00b6 [jvm] This package holds the classes that define the HTTP client and its configuration settings. Types \u00b6 Name Summary Client [jvm] Content class Client ( adapter : ClientPort , endpoint : String , settings : ClientSettings ) More info Client to use other REST services. ClientPort [jvm] Content interface ClientPort ClientSettings [jvm] Content data class ClientSettings ( contentType : String ?, useCookies : Boolean , headers : Map < String , List < String >>, user : String ?, password : String ?, insecure : Boolean , sslSettings : SslSettings?) Request [jvm] Content data class Request ( method : Method, path : Path, body : Any ?, headers : Map < String , List < String >>, pathParameters : Map < String , List < String >>, formParameters : Map < String , List < String >>, parts : Map < String , Part>, contentType : String ?) More info HTTP request send to the server. Response [jvm] Content data class Response ( status : Int , body : String ?, headers : MutableMap < String , List < String >>, contentType : String ?, inputStream : InputStream ) More info HTTP response fetched from a server request.","title":"Index"},{"location":"port_http_client/com.hexagonkt.http.client/#package-comhexagonkthttpclient","text":"[jvm] This package holds the classes that define the HTTP client and its configuration settings.","title":"Package com.hexagonkt.http.client"},{"location":"port_http_client/com.hexagonkt.http.client/#types","text":"Name Summary Client [jvm] Content class Client ( adapter : ClientPort , endpoint : String , settings : ClientSettings ) More info Client to use other REST services. ClientPort [jvm] Content interface ClientPort ClientSettings [jvm] Content data class ClientSettings ( contentType : String ?, useCookies : Boolean , headers : Map < String , List < String >>, user : String ?, password : String ?, insecure : Boolean , sslSettings : SslSettings?) Request [jvm] Content data class Request ( method : Method, path : Path, body : Any ?, headers : Map < String , List < String >>, pathParameters : Map < String , List < String >>, formParameters : Map < String , List < String >>, parts : Map < String , Part>, contentType : String ?) More info HTTP request send to the server. Response [jvm] Content data class Response ( status : Int , body : String ?, headers : MutableMap < String , List < String >>, contentType : String ?, inputStream : InputStream ) More info HTTP response fetched from a server request.","title":"Types"},{"location":"port_http_client/com.hexagonkt.http.client/-client/","text":"// port_http_client / com.hexagonkt.http.client / Client Client \u00b6 [jvm] class Client ( adapter : ClientPort , endpoint : String , settings : ClientSettings ) Client to use other REST services. Constructors \u00b6 Client [jvm] fun Client (settings: ClientSettings = ClientSettings()) Client [jvm] fun Client (endpoint: String = \"\", settings: ClientSettings = ClientSettings()) Client [jvm] fun Client (adapter: ClientPort = InjectionManager.inject(), endpoint: String = \"\", settings: ClientSettings = ClientSettings()) Functions \u00b6 Name Summary delete [jvm] Content fun delete (path: String , body: Any , format: SerializationFormat): Response fun delete (path: String , body: Any ? = null, contentType: String ? = settings.contentType): Response get [jvm] Content fun get (path: String , headers: Map < String , List < String >> = emptyMap(), body: Any , format: SerializationFormat): Response fun get (path: String , headers: Map < String , List < String >> = emptyMap(), body: Any ? = null, contentType: String ? = settings.contentType): Response head [jvm] Content fun head (path: String , headers: Map < String , List < String >> = emptyMap()): Response options [jvm] Content fun options (path: String , body: Any , format: SerializationFormat, headers: Map < String , List < String >> = emptyMap()): Response fun options (path: String , body: Any ? = null, contentType: String ? = settings.contentType, headers: Map < String , List < String >> = emptyMap()): Response patch [jvm] Content fun patch (path: String , body: Any , format: SerializationFormat): Response fun patch (path: String , body: Any ? = null, contentType: String ? = settings.contentType): Response post [jvm] Content fun post (path: String , body: Any , format: SerializationFormat): Response fun post (path: String , body: Any ? = null, contentType: String ? = settings.contentType): Response put [jvm] Content fun put (path: String , body: Any , format: SerializationFormat): Response fun put (path: String , body: Any ? = null, contentType: String ? = settings.contentType): Response send [jvm] Content fun send (request: Request ): Response More info Synchronous execution. trace [jvm] Content fun trace (path: String , body: Any , format: SerializationFormat): Response fun trace (path: String , body: Any ? = null, contentType: String ? = settings.contentType): Response Properties \u00b6 Name Summary cookies [jvm] val cookies : MutableMap < String , Cookie> endpoint [jvm] val endpoint : String settings [jvm] val settings : ClientSettings","title":"Index"},{"location":"port_http_client/com.hexagonkt.http.client/-client/#client","text":"[jvm] class Client ( adapter : ClientPort , endpoint : String , settings : ClientSettings ) Client to use other REST services.","title":"Client"},{"location":"port_http_client/com.hexagonkt.http.client/-client/#constructors","text":"Client [jvm] fun Client (settings: ClientSettings = ClientSettings()) Client [jvm] fun Client (endpoint: String = \"\", settings: ClientSettings = ClientSettings()) Client [jvm] fun Client (adapter: ClientPort = InjectionManager.inject(), endpoint: String = \"\", settings: ClientSettings = ClientSettings())","title":"Constructors"},{"location":"port_http_client/com.hexagonkt.http.client/-client/#functions","text":"Name Summary delete [jvm] Content fun delete (path: String , body: Any , format: SerializationFormat): Response fun delete (path: String , body: Any ? = null, contentType: String ? = settings.contentType): Response get [jvm] Content fun get (path: String , headers: Map < String , List < String >> = emptyMap(), body: Any , format: SerializationFormat): Response fun get (path: String , headers: Map < String , List < String >> = emptyMap(), body: Any ? = null, contentType: String ? = settings.contentType): Response head [jvm] Content fun head (path: String , headers: Map < String , List < String >> = emptyMap()): Response options [jvm] Content fun options (path: String , body: Any , format: SerializationFormat, headers: Map < String , List < String >> = emptyMap()): Response fun options (path: String , body: Any ? = null, contentType: String ? = settings.contentType, headers: Map < String , List < String >> = emptyMap()): Response patch [jvm] Content fun patch (path: String , body: Any , format: SerializationFormat): Response fun patch (path: String , body: Any ? = null, contentType: String ? = settings.contentType): Response post [jvm] Content fun post (path: String , body: Any , format: SerializationFormat): Response fun post (path: String , body: Any ? = null, contentType: String ? = settings.contentType): Response put [jvm] Content fun put (path: String , body: Any , format: SerializationFormat): Response fun put (path: String , body: Any ? = null, contentType: String ? = settings.contentType): Response send [jvm] Content fun send (request: Request ): Response More info Synchronous execution. trace [jvm] Content fun trace (path: String , body: Any , format: SerializationFormat): Response fun trace (path: String , body: Any ? = null, contentType: String ? = settings.contentType): Response","title":"Functions"},{"location":"port_http_client/com.hexagonkt.http.client/-client/#properties","text":"Name Summary cookies [jvm] val cookies : MutableMap < String , Cookie> endpoint [jvm] val endpoint : String settings [jvm] val settings : ClientSettings","title":"Properties"},{"location":"port_http_client/com.hexagonkt.http.client/-client/-client/","text":"// port_http_client / com.hexagonkt.http.client / Client / Client Client \u00b6 [jvm] Content fun Client (settings: ClientSettings = ClientSettings()) fun Client (endpoint: String = \"\", settings: ClientSettings = ClientSettings()) fun Client (adapter: ClientPort = InjectionManager.inject(), endpoint: String = \"\", settings: ClientSettings = ClientSettings())","title":" client"},{"location":"port_http_client/com.hexagonkt.http.client/-client/-client/#client","text":"[jvm] Content fun Client (settings: ClientSettings = ClientSettings()) fun Client (endpoint: String = \"\", settings: ClientSettings = ClientSettings()) fun Client (adapter: ClientPort = InjectionManager.inject(), endpoint: String = \"\", settings: ClientSettings = ClientSettings())","title":"Client"},{"location":"port_http_client/com.hexagonkt.http.client/-client/cookies/","text":"// port_http_client / com.hexagonkt.http.client / Client / cookies cookies \u00b6 [jvm] Content val cookies : MutableMap < String , Cookie>","title":"Cookies"},{"location":"port_http_client/com.hexagonkt.http.client/-client/cookies/#cookies","text":"[jvm] Content val cookies : MutableMap < String , Cookie>","title":"cookies"},{"location":"port_http_client/com.hexagonkt.http.client/-client/delete/","text":"// port_http_client / com.hexagonkt.http.client / Client / delete delete \u00b6 [jvm] Content fun delete (path: String , body: Any ? = null, contentType: String ? = settings.contentType): Response fun delete (path: String , body: Any , format: SerializationFormat): Response","title":"Delete"},{"location":"port_http_client/com.hexagonkt.http.client/-client/delete/#delete","text":"[jvm] Content fun delete (path: String , body: Any ? = null, contentType: String ? = settings.contentType): Response fun delete (path: String , body: Any , format: SerializationFormat): Response","title":"delete"},{"location":"port_http_client/com.hexagonkt.http.client/-client/endpoint/","text":"// port_http_client / com.hexagonkt.http.client / Client / endpoint endpoint \u00b6 [jvm] Content val endpoint : String","title":"Endpoint"},{"location":"port_http_client/com.hexagonkt.http.client/-client/endpoint/#endpoint","text":"[jvm] Content val endpoint : String","title":"endpoint"},{"location":"port_http_client/com.hexagonkt.http.client/-client/get/","text":"// port_http_client / com.hexagonkt.http.client / Client / get get \u00b6 [jvm] Content fun get (path: String , headers: Map < String , List < String >> = emptyMap(), body: Any ? = null, contentType: String ? = settings.contentType): Response fun get (path: String , headers: Map < String , List < String >> = emptyMap(), body: Any , format: SerializationFormat): Response","title":"Get"},{"location":"port_http_client/com.hexagonkt.http.client/-client/get/#get","text":"[jvm] Content fun get (path: String , headers: Map < String , List < String >> = emptyMap(), body: Any ? = null, contentType: String ? = settings.contentType): Response fun get (path: String , headers: Map < String , List < String >> = emptyMap(), body: Any , format: SerializationFormat): Response","title":"get"},{"location":"port_http_client/com.hexagonkt.http.client/-client/head/","text":"// port_http_client / com.hexagonkt.http.client / Client / head head \u00b6 [jvm] Content fun head (path: String , headers: Map < String , List < String >> = emptyMap()): Response","title":"Head"},{"location":"port_http_client/com.hexagonkt.http.client/-client/head/#head","text":"[jvm] Content fun head (path: String , headers: Map < String , List < String >> = emptyMap()): Response","title":"head"},{"location":"port_http_client/com.hexagonkt.http.client/-client/options/","text":"// port_http_client / com.hexagonkt.http.client / Client / options options \u00b6 [jvm] Content fun options (path: String , body: Any ? = null, contentType: String ? = settings.contentType, headers: Map < String , List < String >> = emptyMap()): Response fun options (path: String , body: Any , format: SerializationFormat, headers: Map < String , List < String >> = emptyMap()): Response","title":"Options"},{"location":"port_http_client/com.hexagonkt.http.client/-client/options/#options","text":"[jvm] Content fun options (path: String , body: Any ? = null, contentType: String ? = settings.contentType, headers: Map < String , List < String >> = emptyMap()): Response fun options (path: String , body: Any , format: SerializationFormat, headers: Map < String , List < String >> = emptyMap()): Response","title":"options"},{"location":"port_http_client/com.hexagonkt.http.client/-client/patch/","text":"// port_http_client / com.hexagonkt.http.client / Client / patch patch \u00b6 [jvm] Content fun patch (path: String , body: Any ? = null, contentType: String ? = settings.contentType): Response fun patch (path: String , body: Any , format: SerializationFormat): Response","title":"Patch"},{"location":"port_http_client/com.hexagonkt.http.client/-client/patch/#patch","text":"[jvm] Content fun patch (path: String , body: Any ? = null, contentType: String ? = settings.contentType): Response fun patch (path: String , body: Any , format: SerializationFormat): Response","title":"patch"},{"location":"port_http_client/com.hexagonkt.http.client/-client/post/","text":"// port_http_client / com.hexagonkt.http.client / Client / post post \u00b6 [jvm] Content fun post (path: String , body: Any ? = null, contentType: String ? = settings.contentType): Response fun post (path: String , body: Any , format: SerializationFormat): Response","title":"Post"},{"location":"port_http_client/com.hexagonkt.http.client/-client/post/#post","text":"[jvm] Content fun post (path: String , body: Any ? = null, contentType: String ? = settings.contentType): Response fun post (path: String , body: Any , format: SerializationFormat): Response","title":"post"},{"location":"port_http_client/com.hexagonkt.http.client/-client/put/","text":"// port_http_client / com.hexagonkt.http.client / Client / put put \u00b6 [jvm] Content fun put (path: String , body: Any ? = null, contentType: String ? = settings.contentType): Response fun put (path: String , body: Any , format: SerializationFormat): Response","title":"Put"},{"location":"port_http_client/com.hexagonkt.http.client/-client/put/#put","text":"[jvm] Content fun put (path: String , body: Any ? = null, contentType: String ? = settings.contentType): Response fun put (path: String , body: Any , format: SerializationFormat): Response","title":"put"},{"location":"port_http_client/com.hexagonkt.http.client/-client/send/","text":"// port_http_client / com.hexagonkt.http.client / Client / send send \u00b6 [jvm] Content fun send (request: Request ): Response More info Synchronous execution.","title":"Send"},{"location":"port_http_client/com.hexagonkt.http.client/-client/send/#send","text":"[jvm] Content fun send (request: Request ): Response More info Synchronous execution.","title":"send"},{"location":"port_http_client/com.hexagonkt.http.client/-client/settings/","text":"// port_http_client / com.hexagonkt.http.client / Client / settings settings \u00b6 [jvm] Content val settings : ClientSettings","title":"Settings"},{"location":"port_http_client/com.hexagonkt.http.client/-client/settings/#settings","text":"[jvm] Content val settings : ClientSettings","title":"settings"},{"location":"port_http_client/com.hexagonkt.http.client/-client/trace/","text":"// port_http_client / com.hexagonkt.http.client / Client / trace trace \u00b6 [jvm] Content fun trace (path: String , body: Any ? = null, contentType: String ? = settings.contentType): Response fun trace (path: String , body: Any , format: SerializationFormat): Response","title":"Trace"},{"location":"port_http_client/com.hexagonkt.http.client/-client/trace/#trace","text":"[jvm] Content fun trace (path: String , body: Any ? = null, contentType: String ? = settings.contentType): Response fun trace (path: String , body: Any , format: SerializationFormat): Response","title":"trace"},{"location":"port_http_client/com.hexagonkt.http.client/-client-port/","text":"// port_http_client / com.hexagonkt.http.client / ClientPort ClientPort \u00b6 [jvm] interface ClientPort Functions \u00b6 Name Summary send [jvm] Content abstract fun send (client: Client , request: Request ): Response","title":"Index"},{"location":"port_http_client/com.hexagonkt.http.client/-client-port/#clientport","text":"[jvm] interface ClientPort","title":"ClientPort"},{"location":"port_http_client/com.hexagonkt.http.client/-client-port/#functions","text":"Name Summary send [jvm] Content abstract fun send (client: Client , request: Request ): Response","title":"Functions"},{"location":"port_http_client/com.hexagonkt.http.client/-client-port/send/","text":"// port_http_client / com.hexagonkt.http.client / ClientPort / send send \u00b6 [jvm] Content abstract fun send (client: Client , request: Request ): Response","title":"Send"},{"location":"port_http_client/com.hexagonkt.http.client/-client-port/send/#send","text":"[jvm] Content abstract fun send (client: Client , request: Request ): Response","title":"send"},{"location":"port_http_client/com.hexagonkt.http.client/-client-settings/","text":"// port_http_client / com.hexagonkt.http.client / ClientSettings ClientSettings \u00b6 [jvm] data class ClientSettings ( contentType : String ?, useCookies : Boolean , headers : Map < String , List < String >>, user : String ?, password : String ?, insecure : Boolean , sslSettings : SslSettings?) Constructors \u00b6 ClientSettings [jvm] fun ClientSettings (format: SerializationFormat, useCookies: Boolean = true, headers: Map < String , List < String >> = LinkedHashMap(), user: String ? = null, password: String ? = null, insecure: Boolean = false) Properties \u00b6 Name Summary contentType [jvm] val contentType : String ? = null headers [jvm] val headers : Map < String , List < String >> insecure [jvm] val insecure : Boolean = false password [jvm] val password : String ? = null sslSettings [jvm] val sslSettings : SslSettings? = null useCookies [jvm] val useCookies : Boolean = true user [jvm] val user : String ? = null","title":"Index"},{"location":"port_http_client/com.hexagonkt.http.client/-client-settings/#clientsettings","text":"[jvm] data class ClientSettings ( contentType : String ?, useCookies : Boolean , headers : Map < String , List < String >>, user : String ?, password : String ?, insecure : Boolean , sslSettings : SslSettings?)","title":"ClientSettings"},{"location":"port_http_client/com.hexagonkt.http.client/-client-settings/#constructors","text":"ClientSettings [jvm] fun ClientSettings (format: SerializationFormat, useCookies: Boolean = true, headers: Map < String , List < String >> = LinkedHashMap(), user: String ? = null, password: String ? = null, insecure: Boolean = false)","title":"Constructors"},{"location":"port_http_client/com.hexagonkt.http.client/-client-settings/#properties","text":"Name Summary contentType [jvm] val contentType : String ? = null headers [jvm] val headers : Map < String , List < String >> insecure [jvm] val insecure : Boolean = false password [jvm] val password : String ? = null sslSettings [jvm] val sslSettings : SslSettings? = null useCookies [jvm] val useCookies : Boolean = true user [jvm] val user : String ? = null","title":"Properties"},{"location":"port_http_client/com.hexagonkt.http.client/-client-settings/-client-settings/","text":"// port_http_client / com.hexagonkt.http.client / ClientSettings / ClientSettings ClientSettings \u00b6 [jvm] Content fun ClientSettings (format: SerializationFormat, useCookies: Boolean = true, headers: Map < String , List < String >> = LinkedHashMap(), user: String ? = null, password: String ? = null, insecure: Boolean = false) fun ClientSettings (contentType: String ? = null, useCookies: Boolean = true, headers: Map < String , List < String >> = LinkedHashMap(), user: String ? = null, password: String ? = null, insecure: Boolean = false, sslSettings: SslSettings? = null)","title":" client settings"},{"location":"port_http_client/com.hexagonkt.http.client/-client-settings/-client-settings/#clientsettings","text":"[jvm] Content fun ClientSettings (format: SerializationFormat, useCookies: Boolean = true, headers: Map < String , List < String >> = LinkedHashMap(), user: String ? = null, password: String ? = null, insecure: Boolean = false) fun ClientSettings (contentType: String ? = null, useCookies: Boolean = true, headers: Map < String , List < String >> = LinkedHashMap(), user: String ? = null, password: String ? = null, insecure: Boolean = false, sslSettings: SslSettings? = null)","title":"ClientSettings"},{"location":"port_http_client/com.hexagonkt.http.client/-client-settings/content-type/","text":"// port_http_client / com.hexagonkt.http.client / ClientSettings / contentType contentType \u00b6 [jvm] Content val contentType : String ? = null","title":"Content type"},{"location":"port_http_client/com.hexagonkt.http.client/-client-settings/content-type/#contenttype","text":"[jvm] Content val contentType : String ? = null","title":"contentType"},{"location":"port_http_client/com.hexagonkt.http.client/-client-settings/headers/","text":"// port_http_client / com.hexagonkt.http.client / ClientSettings / headers headers \u00b6 [jvm] Content val headers : Map < String , List < String >>","title":"Headers"},{"location":"port_http_client/com.hexagonkt.http.client/-client-settings/headers/#headers","text":"[jvm] Content val headers : Map < String , List < String >>","title":"headers"},{"location":"port_http_client/com.hexagonkt.http.client/-client-settings/insecure/","text":"// port_http_client / com.hexagonkt.http.client / ClientSettings / insecure insecure \u00b6 [jvm] Content val insecure : Boolean = false","title":"Insecure"},{"location":"port_http_client/com.hexagonkt.http.client/-client-settings/insecure/#insecure","text":"[jvm] Content val insecure : Boolean = false","title":"insecure"},{"location":"port_http_client/com.hexagonkt.http.client/-client-settings/password/","text":"// port_http_client / com.hexagonkt.http.client / ClientSettings / password password \u00b6 [jvm] Content val password : String ? = null","title":"Password"},{"location":"port_http_client/com.hexagonkt.http.client/-client-settings/password/#password","text":"[jvm] Content val password : String ? = null","title":"password"},{"location":"port_http_client/com.hexagonkt.http.client/-client-settings/ssl-settings/","text":"// port_http_client / com.hexagonkt.http.client / ClientSettings / sslSettings sslSettings \u00b6 [jvm] Content val sslSettings : SslSettings? = null","title":"Ssl settings"},{"location":"port_http_client/com.hexagonkt.http.client/-client-settings/ssl-settings/#sslsettings","text":"[jvm] Content val sslSettings : SslSettings? = null","title":"sslSettings"},{"location":"port_http_client/com.hexagonkt.http.client/-client-settings/use-cookies/","text":"// port_http_client / com.hexagonkt.http.client / ClientSettings / useCookies useCookies \u00b6 [jvm] Content val useCookies : Boolean = true","title":"Use cookies"},{"location":"port_http_client/com.hexagonkt.http.client/-client-settings/use-cookies/#usecookies","text":"[jvm] Content val useCookies : Boolean = true","title":"useCookies"},{"location":"port_http_client/com.hexagonkt.http.client/-client-settings/user/","text":"// port_http_client / com.hexagonkt.http.client / ClientSettings / user user \u00b6 [jvm] Content val user : String ? = null","title":"User"},{"location":"port_http_client/com.hexagonkt.http.client/-client-settings/user/#user","text":"[jvm] Content val user : String ? = null","title":"user"},{"location":"port_http_client/com.hexagonkt.http.client/-request/","text":"// port_http_client / com.hexagonkt.http.client / Request Request \u00b6 [jvm] data class Request ( method : Method, path : Path, body : Any ?, headers : Map < String , List < String >>, pathParameters : Map < String , List < String >>, formParameters : Map < String , List < String >>, parts : Map < String , Part>, contentType : String ?) HTTP request send to the server. Constructors \u00b6 Request [jvm] fun Request (method: Method, path: String , body: Any ? = null, headers: Map < String , List < String >> = emptyMap(), pathParameters: Map < String , List < String >> = emptyMap(), formParameters: Map < String , List < String >> = emptyMap(), parts: Map < String , Part> = emptyMap(), contentType: String ? = null) Request [jvm] fun Request (method: Method, path: Path, body: Any ? = null, headers: Map < String , List < String >> = emptyMap(), pathParameters: Map < String , List < String >> = emptyMap(), formParameters: Map < String , List < String >> = emptyMap(), parts: Map < String , Part> = emptyMap(), contentType: String ? = null) Properties \u00b6 Name Summary body [jvm] val body : Any ? = null contentType [jvm] val contentType : String ? = null formParameters [jvm] val formParameters : Map < String , List < String >> headers [jvm] val headers : Map < String , List < String >> method [jvm] val method : Method parts [jvm] val parts : Map < String , Part> path [jvm] val path : Path pathParameters [jvm] val pathParameters : Map < String , List < String >>","title":"Index"},{"location":"port_http_client/com.hexagonkt.http.client/-request/#request","text":"[jvm] data class Request ( method : Method, path : Path, body : Any ?, headers : Map < String , List < String >>, pathParameters : Map < String , List < String >>, formParameters : Map < String , List < String >>, parts : Map < String , Part>, contentType : String ?) HTTP request send to the server.","title":"Request"},{"location":"port_http_client/com.hexagonkt.http.client/-request/#constructors","text":"Request [jvm] fun Request (method: Method, path: String , body: Any ? = null, headers: Map < String , List < String >> = emptyMap(), pathParameters: Map < String , List < String >> = emptyMap(), formParameters: Map < String , List < String >> = emptyMap(), parts: Map < String , Part> = emptyMap(), contentType: String ? = null) Request [jvm] fun Request (method: Method, path: Path, body: Any ? = null, headers: Map < String , List < String >> = emptyMap(), pathParameters: Map < String , List < String >> = emptyMap(), formParameters: Map < String , List < String >> = emptyMap(), parts: Map < String , Part> = emptyMap(), contentType: String ? = null)","title":"Constructors"},{"location":"port_http_client/com.hexagonkt.http.client/-request/#properties","text":"Name Summary body [jvm] val body : Any ? = null contentType [jvm] val contentType : String ? = null formParameters [jvm] val formParameters : Map < String , List < String >> headers [jvm] val headers : Map < String , List < String >> method [jvm] val method : Method parts [jvm] val parts : Map < String , Part> path [jvm] val path : Path pathParameters [jvm] val pathParameters : Map < String , List < String >>","title":"Properties"},{"location":"port_http_client/com.hexagonkt.http.client/-request/-request/","text":"// port_http_client / com.hexagonkt.http.client / Request / Request Request \u00b6 [jvm] Content fun Request (method: Method, path: String , body: Any ? = null, headers: Map < String , List < String >> = emptyMap(), pathParameters: Map < String , List < String >> = emptyMap(), formParameters: Map < String , List < String >> = emptyMap(), parts: Map < String , Part> = emptyMap(), contentType: String ? = null) fun Request (method: Method, path: Path, body: Any ? = null, headers: Map < String , List < String >> = emptyMap(), pathParameters: Map < String , List < String >> = emptyMap(), formParameters: Map < String , List < String >> = emptyMap(), parts: Map < String , Part> = emptyMap(), contentType: String ? = null)","title":" request"},{"location":"port_http_client/com.hexagonkt.http.client/-request/-request/#request","text":"[jvm] Content fun Request (method: Method, path: String , body: Any ? = null, headers: Map < String , List < String >> = emptyMap(), pathParameters: Map < String , List < String >> = emptyMap(), formParameters: Map < String , List < String >> = emptyMap(), parts: Map < String , Part> = emptyMap(), contentType: String ? = null) fun Request (method: Method, path: Path, body: Any ? = null, headers: Map < String , List < String >> = emptyMap(), pathParameters: Map < String , List < String >> = emptyMap(), formParameters: Map < String , List < String >> = emptyMap(), parts: Map < String , Part> = emptyMap(), contentType: String ? = null)","title":"Request"},{"location":"port_http_client/com.hexagonkt.http.client/-request/body/","text":"// port_http_client / com.hexagonkt.http.client / Request / body body \u00b6 [jvm] Content val body : Any ? = null","title":"Body"},{"location":"port_http_client/com.hexagonkt.http.client/-request/body/#body","text":"[jvm] Content val body : Any ? = null","title":"body"},{"location":"port_http_client/com.hexagonkt.http.client/-request/content-type/","text":"// port_http_client / com.hexagonkt.http.client / Request / contentType contentType \u00b6 [jvm] Content val contentType : String ? = null","title":"Content type"},{"location":"port_http_client/com.hexagonkt.http.client/-request/content-type/#contenttype","text":"[jvm] Content val contentType : String ? = null","title":"contentType"},{"location":"port_http_client/com.hexagonkt.http.client/-request/form-parameters/","text":"// port_http_client / com.hexagonkt.http.client / Request / formParameters formParameters \u00b6 [jvm] Content val formParameters : Map < String , List < String >>","title":"Form parameters"},{"location":"port_http_client/com.hexagonkt.http.client/-request/form-parameters/#formparameters","text":"[jvm] Content val formParameters : Map < String , List < String >>","title":"formParameters"},{"location":"port_http_client/com.hexagonkt.http.client/-request/headers/","text":"// port_http_client / com.hexagonkt.http.client / Request / headers headers \u00b6 [jvm] Content val headers : Map < String , List < String >>","title":"Headers"},{"location":"port_http_client/com.hexagonkt.http.client/-request/headers/#headers","text":"[jvm] Content val headers : Map < String , List < String >>","title":"headers"},{"location":"port_http_client/com.hexagonkt.http.client/-request/method/","text":"// port_http_client / com.hexagonkt.http.client / Request / method method \u00b6 [jvm] Content val method : Method","title":"Method"},{"location":"port_http_client/com.hexagonkt.http.client/-request/method/#method","text":"[jvm] Content val method : Method","title":"method"},{"location":"port_http_client/com.hexagonkt.http.client/-request/parts/","text":"// port_http_client / com.hexagonkt.http.client / Request / parts parts \u00b6 [jvm] Content val parts : Map < String , Part>","title":"Parts"},{"location":"port_http_client/com.hexagonkt.http.client/-request/parts/#parts","text":"[jvm] Content val parts : Map < String , Part>","title":"parts"},{"location":"port_http_client/com.hexagonkt.http.client/-request/path-parameters/","text":"// port_http_client / com.hexagonkt.http.client / Request / pathParameters pathParameters \u00b6 [jvm] Content val pathParameters : Map < String , List < String >>","title":"Path parameters"},{"location":"port_http_client/com.hexagonkt.http.client/-request/path-parameters/#pathparameters","text":"[jvm] Content val pathParameters : Map < String , List < String >>","title":"pathParameters"},{"location":"port_http_client/com.hexagonkt.http.client/-request/path/","text":"// port_http_client / com.hexagonkt.http.client / Request / path path \u00b6 [jvm] Content val path : Path","title":"Path"},{"location":"port_http_client/com.hexagonkt.http.client/-request/path/#path","text":"[jvm] Content val path : Path","title":"path"},{"location":"port_http_client/com.hexagonkt.http.client/-response/","text":"// port_http_client / com.hexagonkt.http.client / Response Response \u00b6 [jvm] data class Response ( status : Int , body : String ?, headers : MutableMap < String , List < String >>, contentType : String ?, inputStream : InputStream ) HTTP response fetched from a server request. Constructors \u00b6 Response [jvm] fun Response (status: Int , body: String ?, headers: MutableMap < String , List < String >>, contentType: String ?, inputStream: InputStream ) Properties \u00b6 Name Summary body [jvm] var body : String ? contentType [jvm] var contentType : String ? headers [jvm] val headers : MutableMap < String , List < String >> inputStream [jvm] val inputStream : InputStream status [jvm] var status : Int","title":"Index"},{"location":"port_http_client/com.hexagonkt.http.client/-response/#response","text":"[jvm] data class Response ( status : Int , body : String ?, headers : MutableMap < String , List < String >>, contentType : String ?, inputStream : InputStream ) HTTP response fetched from a server request.","title":"Response"},{"location":"port_http_client/com.hexagonkt.http.client/-response/#constructors","text":"Response [jvm] fun Response (status: Int , body: String ?, headers: MutableMap < String , List < String >>, contentType: String ?, inputStream: InputStream )","title":"Constructors"},{"location":"port_http_client/com.hexagonkt.http.client/-response/#properties","text":"Name Summary body [jvm] var body : String ? contentType [jvm] var contentType : String ? headers [jvm] val headers : MutableMap < String , List < String >> inputStream [jvm] val inputStream : InputStream status [jvm] var status : Int","title":"Properties"},{"location":"port_http_client/com.hexagonkt.http.client/-response/-response/","text":"// port_http_client / com.hexagonkt.http.client / Response / Response Response \u00b6 [jvm] Content fun Response (status: Int , body: String ?, headers: MutableMap < String , List < String >>, contentType: String ?, inputStream: InputStream )","title":" response"},{"location":"port_http_client/com.hexagonkt.http.client/-response/-response/#response","text":"[jvm] Content fun Response (status: Int , body: String ?, headers: MutableMap < String , List < String >>, contentType: String ?, inputStream: InputStream )","title":"Response"},{"location":"port_http_client/com.hexagonkt.http.client/-response/body/","text":"// port_http_client / com.hexagonkt.http.client / Response / body body \u00b6 [jvm] Content var body : String ?","title":"Body"},{"location":"port_http_client/com.hexagonkt.http.client/-response/body/#body","text":"[jvm] Content var body : String ?","title":"body"},{"location":"port_http_client/com.hexagonkt.http.client/-response/content-type/","text":"// port_http_client / com.hexagonkt.http.client / Response / contentType contentType \u00b6 [jvm] Content var contentType : String ?","title":"Content type"},{"location":"port_http_client/com.hexagonkt.http.client/-response/content-type/#contenttype","text":"[jvm] Content var contentType : String ?","title":"contentType"},{"location":"port_http_client/com.hexagonkt.http.client/-response/headers/","text":"// port_http_client / com.hexagonkt.http.client / Response / headers headers \u00b6 [jvm] Content val headers : MutableMap < String , List < String >>","title":"Headers"},{"location":"port_http_client/com.hexagonkt.http.client/-response/headers/#headers","text":"[jvm] Content val headers : MutableMap < String , List < String >>","title":"headers"},{"location":"port_http_client/com.hexagonkt.http.client/-response/input-stream/","text":"// port_http_client / com.hexagonkt.http.client / Response / inputStream inputStream \u00b6 [jvm] Content val inputStream : InputStream","title":"Input stream"},{"location":"port_http_client/com.hexagonkt.http.client/-response/input-stream/#inputstream","text":"[jvm] Content val inputStream : InputStream","title":"inputStream"},{"location":"port_http_client/com.hexagonkt.http.client/-response/status/","text":"// port_http_client / com.hexagonkt.http.client / Response / status status \u00b6 [jvm] Content var status : Int","title":"Status"},{"location":"port_http_client/com.hexagonkt.http.client/-response/status/#status","text":"[jvm] Content var status : Int","title":"status"},{"location":"port_http_server/","text":"// port_http_server port_http_server \u00b6 [jvm] This port's purpose is to develop HTTP servers (REST services or Web applications). It defines a DSL to declare HTTP request handlers. Adapters implementing this port are in charge of transforming the DSL into a runtime. And allows you to switch implementations without changing the service. The /hexagon_web module provides utilities on top of this port for Web application development (like templates helpers). Install the Dependency \u00b6 This module is not meant to be used directly. You should include and Adapter implementing this feature (as /http_server_jetty) in order to create an HTTP server. Server \u00b6 A server is a process listening to HTTP requests on a TCP port. You can run multiple ones on different ports at the same time (this can be useful to test many microservices at the same time). The server can be configured with different properties. If you do not provide a value for them, they are searched inside the application settings and lastly, a default value is picked. This is the parameters list: banner: informative text shown at start up logs. If not set only runtime information is displayed. bindAddress: address to which this process is bound. If none is provided, 127.0.0.1 is taken. bindPort: the port which the process listens to. By default, it is 2010. contextPath: initial path used for the rest of the routes, by default it is empty. You can inject an adapter for the Server port using the InjectionManager object: InjectionManager.bindObject (JettyServletAdapter()) To create a server, you need to provide a router (check the next section for more information), and after creating a server you can run it or stop it with start() and stop() methods. Packages \u00b6 Name com.hexagonkt.http.server com.hexagonkt.http.server.examples com.hexagonkt.http.server.test","title":"HTTP Server"},{"location":"port_http_server/#port_http_server","text":"[jvm] This port's purpose is to develop HTTP servers (REST services or Web applications). It defines a DSL to declare HTTP request handlers. Adapters implementing this port are in charge of transforming the DSL into a runtime. And allows you to switch implementations without changing the service. The /hexagon_web module provides utilities on top of this port for Web application development (like templates helpers).","title":"port_http_server"},{"location":"port_http_server/#install-the-dependency","text":"This module is not meant to be used directly. You should include and Adapter implementing this feature (as /http_server_jetty) in order to create an HTTP server.","title":"Install the Dependency"},{"location":"port_http_server/#server","text":"A server is a process listening to HTTP requests on a TCP port. You can run multiple ones on different ports at the same time (this can be useful to test many microservices at the same time). The server can be configured with different properties. If you do not provide a value for them, they are searched inside the application settings and lastly, a default value is picked. This is the parameters list: banner: informative text shown at start up logs. If not set only runtime information is displayed. bindAddress: address to which this process is bound. If none is provided, 127.0.0.1 is taken. bindPort: the port which the process listens to. By default, it is 2010. contextPath: initial path used for the rest of the routes, by default it is empty. You can inject an adapter for the Server port using the InjectionManager object: InjectionManager.bindObject (JettyServletAdapter()) To create a server, you need to provide a router (check the next section for more information), and after creating a server you can run it or stop it with start() and stop() methods.","title":"Server"},{"location":"port_http_server/#packages","text":"Name com.hexagonkt.http.server com.hexagonkt.http.server.examples com.hexagonkt.http.server.test","title":"Packages"},{"location":"port_http_server/port_http_server/","text":"Module port_http_server \u00b6 This port's purpose is to develop HTTP servers (REST services or Web applications). It defines a DSL to declare HTTP request handlers. Adapters implementing this port are in charge of transforming the DSL into a runtime. And allows you to switch implementations without changing the service. The hexagon_web module provides utilities on top of this port for Web application development (like templates helpers). Install the Dependency \u00b6 This module is not meant to be used directly. You should include and Adapter implementing this feature (as http_server_jetty ) in order to create an HTTP server. Server \u00b6 A server is a process listening to HTTP requests on a TCP port. You can run multiple ones on different ports at the same time (this can be useful to test many microservices at the same time). The server can be configured with different properties. If you do not provide a value for them, they are searched inside the application settings and lastly, a default value is picked. This is the parameters list: banner: informative text shown at start up logs. If not set only runtime information is displayed. bindAddress: address to which this process is bound. If none is provided, 127.0.0.1 is taken. bindPort: the port which the process listens to. By default, it is 2010 . contextPath: initial path used for the rest of the routes, by default it is empty. You can inject an adapter for the Server port using the InjectionManager object: InjectionManager.bindObject<ServerPort>(JettyServletAdapter()) To create a server, you need to provide a router (check the next section for more information), and after creating a server you can run it or stop it with start() and stop() methods. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 /* * All settings are optional, you can supply any combination * Parameters not set will fall back to the defaults */ val settings = ServerSettings ( bindAddress = InetAddress . getByName ( \"0.0.0\" ), bindPort = 2020 , contextPath = \"/context\" , banner = \"name\" ) val router = Router { get ( \"/hello\" ) { ok ( \"Hello World!\" ) } } val customServer = Server ( adapter , router , settings ) customServer . start () val customClient = Client ( AhcAdapter (), \"http://localhost: ${ customServer . runtimePort } \" ) assert ( customServer . started ()) assert ( customClient . get ( \"/context/hello\" ). body == \"Hello World!\" ) customServer . stop () /* * You can skip the adapter is you previously bound one * You may also skip the settings an the defaults will be used */ InjectionManager . bind ( adapter ) val defaultServer = Server ( router = router ) defaultServer . start () val defaultClient = Client ( AhcAdapter (), \"http://localhost: ${ defaultServer . runtimePort } \" ) assert ( defaultServer . started ()) assert ( defaultClient . get ( \"/hello\" ). body == \"Hello World!\" ) defaultServer . stop () Servlet Web server \u00b6 There is a special server adapter for running inside Servlet Containers. To use it you should import the Servlet HTTP Server Adapter into your project. Check the http_server_servlet module for more information. Routes \u00b6 The main building block of a Hexagon HTTP service is a set of routes. A route is made up of three simple pieces: A verb (get, post, put, delete, head, trace, connect, options). It can also be any . A path (/hello, /users/{name}). Paths must start with '/' and trailing slash is ignored. A callback code block. The callback has a void return type. You should use Call.send() to set the response which will be returned to the user. Routes are matched in the order they are defined. The first route that matches the request is invoked, and the following ones are ignored. Check the next snippet for usage examples: 1 2 3 4 5 6 7 get ( \"/hello\" ) { ok ( \"Get greeting\" )} put ( \"/hello\" ) { ok ( \"Put greeting\" )} post ( \"/hello\" ) { ok ( \"Post greeting\" )} any ( \"/hello\" ) { ok ( \"Fallback if HTTP verb was not used before\" )} get { ok ( \"Get at '/' if no route matched before\" ) } HTTP clients will be able to reuse the routes to create REST services clients. Route groups \u00b6 Routes can be nested by calling the path() method, which takes a String prefix and gives you a scope to declare routes and filters (or more nested paths). Ie: 1 2 3 4 5 6 7 8 9 path ( \"/nested\" ) { get ( \"/hello\" ) { ok ( \"Greeting\" )} path ( \"/secondLevel\" ) { get ( \"/hello\" ) { ok ( \"Second level greeting\" )} } get { ok ( \"Get at '/nested'\" ) } } Routers \u00b6 If you have a lot of routes, it can be helpful to group them into routers. You can create routers to mount a group of routes in different paths (allowing you to reuse them). Check this snippet: 1 2 3 4 5 6 7 8 9 10 fun personRouter ( kind : String ) = Router { get { ok ( \"Get $ kind \" ) } put { ok ( \"Put $ kind \" ) } post { ok ( \"Post $ kind \" ) } } val server = Server ( adapter ) { path ( \"/clients\" , personRouter ( \"client\" )) path ( \"/customers\" , personRouter ( \"customer\" )) } Callbacks \u00b6 Callbacks are request's handling blocks that are bound to routes or filters. They make the request, response and session objects available to the handling code. Call \u00b6 The Call object provides you with everything you need to handle a http-request. It contains the underlying request and response, and a bunch of utility methods to return results, read parameters or pass attributes among filters/routes. The methods are available directly from the callback ( Call is the callback receiver). You can check the API documentation for the full list of methods. This sample code illustrates the usage: 1 2 3 4 5 6 7 8 get ( \"/call\" ) { attributes // the attributes list attributes [ \"foo\" ] // value of foo attribute attributes [ \"A\" ] = \"V\" // sets value of attribute A to V ok ( \"Response body\" ) // returns a 200 status send ( 400 , \"Invalid request\" ) // returns any status } Request \u00b6 Request functionality is provided by the request field: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 get ( \"/request\" ) { // URL Information request . method // the HTTP method (GET, ..etc) request . scheme // http or https request . secure // true if scheme is https request . host // the host, e.g. \"example.com\" request . ip // client IP address request . port // the server port request . path // the request path, e.g. /result.jsp request . body // request body sent by the client request . url // the url. e.g. \"http://example.com/foo\" // Headers request . headers // the HTTP header list with first values only request . headers [ \"BAR\" ] // first value of BAR header request . headersValues // the HTTP header list with their full values list request . headersValues [ \"BAR\" ] // list of values of BAR header // Common headers shortcuts request . contentType // content type of request.body request . acceptValues // Client accepted content types request . userAgent // user agent (browser requests) request . origin // origin (browser requests) // Parameters request . pathParameters // map with all path parameters request . formParameters // map with first values of all form fields request . formParametersValues // map with all form fields values request . queryParameters // map with first values of all query parameters request . queryParametersValues // map with all query parameters values // Body processing request . contentLength // length of request body request . body ( Type :: class ) // Object passed in the body as a typed object request . body < Type > () // Syntactic sugar for the previous statement request . bodyObjects ( Type :: class ) // Object(s) passed in the body as a typed list request . bodyObjects < Type > () // Syntactic sugar for the previous statement request . body ( Map :: class ) // Object passed in the body as a field map request . body < Map <* , *>> () // Syntactic sugar for the previous statement request . bodyObjects ( Map :: class ) // Object(s) passed in the body as a list of maps request . bodyObjects < Map <* , *>> () // Syntactic sugar for the previous statement } Path Parameters \u00b6 Route patterns can include named parameters, accessible via the pathParameters map on the request object: 1 2 3 4 get ( \"/pathParam/{foo}\" ) { request . pathParameters [ \"foo\" ] // value of foo path parameter request . pathParameters // map with all parameters } Query Parameters \u00b6 It is possible to access the whole query string or only a specific query parameter using the parameters map on the request object: 1 2 3 4 5 6 7 get ( \"/queryParam\" ) { request . queryString request . queryParameters // the query param list request . queryParameters [ \"FOO\" ] // value of FOO query param request . queryParametersValues // the query param list request . queryParametersValues [ \"FOO\" ] // all values of FOO query param } Form Parameters \u00b6 HTML Form processing. Don't parse body! 1 2 3 4 5 6 get ( \"/formParam\" ) { request . formParameters // the query param list request . formParameters [ \"FOO\" ] // value of FOO query param request . formParametersValues // the query param list request . formParametersValues [ \"FOO\" ] // all values of FOO query param } File Uploads \u00b6 Multipart Requests 1 2 3 4 post ( \"/file\" ) { val filePart = request . parts [ \"file\" ] ?: error ( \"File not available\" ) ok ( filePart . inputStream . reader (). readText ()) } Response \u00b6 Response information is provided by the response field: 1 2 3 4 5 6 7 8 9 10 get ( \"/response\" ) { response . body // get response content response . body = \"Hello\" // sets content to Hello response . headers [ \"FOO\" ] = \"bar\" // sets header FOO with single value bar response . headersValues [ \"FOO\" ] = listOf ( \"bar\" ) // sets header FOO values with [ bar ] response . status // get the response status response . status = 401 // set status code to 401 response . contentType // get the content type response . contentType = \"text/xml\" // set content type to text/xml } Redirects \u00b6 You can redirect requests (returning 30x codes) by using Call utility methods: 1 2 3 get ( \"/redirect\" ) { redirect ( \"/call\" ) // browser redirect to /call } Cookies \u00b6 The request and response cookie functions provide a convenient way for sharing information between handlers, requests, or even servers. You can read client sent cookies from the request's cookies read only map. To change cookies or add new ones you have to use response.addCookie() and response.removeCookie() methods. Check the following sample code for details: 1 2 3 4 5 6 7 8 9 10 get ( \"/cookie\" ) { request . cookies // get map of all request cookies request . cookies [ \"foo\" ] // access request cookie by name val cookie = Cookie ( \"new_foo\" , \"bar\" ) response . addCookie ( cookie ) // set cookie with a value response . addCookie ( cookie . copy ( maxAge = 3600 )) // set cookie with a max-age response . addCookie ( cookie . copy ( secure = true )) // secure cookie response . removeCookie ( \"foo\" ) // remove cookie } Sessions \u00b6 Every request has access to the session created on the server side, the session object provides the following methods: 1 2 3 4 5 6 7 8 9 get ( \"/session\" ) { session // create and return session session . attributes [ \"user\" ] // Get session attribute 'user' session . set ( \"user\" , \"foo\" ) // Set session attribute 'user' session . removeAttribute ( \"user\" ) // Remove session attribute 'user' session . attributes // Get all session attributes session . id // Get session id session . isNew () // Check if session is new } Halting \u00b6 To immediately stop a request within a filter or route use halt() . halt() is not intended to be used inside exception-mappers. Check the following snippet for an example: 1 2 3 4 5 6 7 8 9 10 get ( \"/halt\" ) { halt () // halt with status 500 and stop route processing /* * These are just examples the following code will never be reached */ halt ( 401 ) // halt with status halt ( \"Body Message\" ) // halt with message (status 500) halt ( 401 , \"Go away!\" ) // halt with status and message } Filters \u00b6 You might know filters as interceptors, or middleware from other libraries. Filters are blocks of code executed before or after one or more routes. They can read the request and read/modify the response. All filters that match a route are executed in the order they are declared. Filters optionally take a pattern, causing them to be executed only if the request path matches that pattern. Before and after filters are always executed (if the route is matched). However, any of them may stop the execution chain if halted. If halt() is called in one filter, filter processing is stopped for that kind of filter ( before or after ). In the case of before filters, this also prevent the route from being executed (but after filters are executed anyway). The following code details filters usage: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 before { response . headersValues [ \"b_all\" ] = listOf ( \"true\" ) } before ( \"/filters/*\" ) { response . headersValues [ \"b_filters\" ] = listOf ( \"true\" ) } get ( \"/filters/route\" ) { ok ( \"filters route\" ) } after ( \"/filters/*\" ) { response . headersValues [ \"a_filters\" ] = listOf ( \"true\" ) } get ( \"/filters\" ) { ok ( \"filters\" ) } path ( \"/nested\" ) { before { response . headersValues [ \"b_nested\" ] = listOf ( \"true\" ) } before ( \"/\" ) { response . headersValues [ \"b_nested_2\" ] = listOf ( \"true\" ) } get ( \"/filters\" ) { ok ( \"nested filters\" ) } get ( \"/halted\" ) { halt ( 499 , \"halted\" ) } get { ok ( \"nested also\" ) } after { response . headersValues [ \"a_nested\" ] = listOf ( \"true\" ) } } after { response . headersValues [ \"a_all\" ] = listOf ( \"true\" ) } Error Handling \u00b6 You can provide handlers for runtime errors. Errors are unhandled thrown exceptions in the callbacks, or handlers halted with an error code. Error handlers for a given code or exception are unique, and the first one defined is the one which will be used. HTTP Errors Handlers \u00b6 Allows handling routes halted with a given code. These handlers are only applied if the route is halted, if the error code is returned with send it won't be handled as an error. Example: 1 2 3 4 5 // Register handler for routes halted with 512 code error ( 512 ) { send ( 500 , \"Ouch\" )} // If status code (512) is returned with `send` error won't be triggered get ( \"/errors\" ) { halt ( 512 ) } Exception Mapping \u00b6 You can handle exceptions of a given type for all routes and filters. The handler allows you to refer to the thrown exception. Look at the following code for a detailed example: 1 2 3 4 5 // Register handler for routes which callbacks throw exceptions error ( CodedException :: class ) { send ( 599 , it . message ?: \"empty\" ) } error ( IllegalStateException :: class ) { send ( 505 , it . message ?: \"empty\" ) } get ( \"/exceptions\" ) { error ( \"Message\" ) } get ( \"/codedExceptions\" ) { halt ( 509 , \"code\" ) } Static Files \u00b6 You can use a folder in the classpath for serving static files with the get() methods. Note that the public directory name is not included in the URL. Asset mapping is handled like any other route, so if an asset mapping is matched, no other route will be checked (assets or other routes). Also, if a previous route is matched, the asset mapping will never be checked. Being get(resource) a shortcut of get(\"/*\", resource) it should be placed as the last route. Check the next example for details: 1 2 3 4 5 6 7 8 get ( \"/web/file.txt\" ) { ok ( \"It matches this route and won't search for the file\" ) } // Expose resources on the '/public' resource folder over the '/web' HTTP path get ( \"/web/*\" , URL ( \"classpath:public\" )) // Maps resources on 'assets' on the server root (assets/f.css -> /f.css) // '/public/css/style.css' resource would be: 'http://{host}:{port}/css/style.css' get ( URL ( \"classpath:assets\" )) MIME types \u00b6 The MIME types of static files are computed from the file extension using the SerializationManager.contentTypeOf() method. CORS \u00b6 CORS behaviour can be different depending on the path. You can attach different CorsSettings to different routers. Check CorsSettings class for more details. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 val server : Server = Server ( adapter ) { corsPath ( \"/default\" , CorsSettings ()) corsPath ( \"/example/org\" , CorsSettings ( \"example.org\" )) corsPath ( \"/no/credentials\" , CorsSettings ( supportCredentials = false )) corsPath ( \"/only/post\" , CorsSettings ( allowedMethods = setOf ( POST ))) corsPath ( \"/cache\" , CorsSettings ( preFlightMaxAge = 10 )) corsPath ( \"/exposed/headers\" , CorsSettings ( exposedHeaders = setOf ( \"head\" ))) corsPath ( \"/allowed/headers\" , CorsSettings ( allowedHeaders = setOf ( \"head\" ))) } private fun Router . corsPath ( path : String , settings : CorsSettings ) { path ( path ) { // CORS settings can change for different routes cors ( settings ) get ( \"/path\" ) { ok ( request . method ) } post ( \"/path\" ) { ok ( request . method ) } put ( \"/path\" ) { ok ( request . method ) } delete ( \"/path\" ) { ok ( request . method ) } get { ok ( request . method ) } post { ok ( request . method ) } put { ok ( request . method ) } delete { ok ( request . method ) } } } HTTPS \u00b6 It is possible to start a secure server enabling HTTPS. For this, you have to provide a server certificate and its key in the server's SslSettings . Once you use a server certificate, it is also possible to serve content using HTTP/2 , for this to work, ALPN is required (however, this is already handled if you use Java 11). The certificate common name should match the host that will serve the content in order to be accepted by an HTTP client without a security error. There is a Gradle helper to create sample certificates for development purposes. HTTP clients can also be configured to use a certificate. This is required to implement a double ended authorization ( mutual TLS ). This is also done by passing a SslSettings object the HTTP client. If you want to implement mutual trust, you must enforce client certificate in the server configuration (check SslSettings.clientAuth ). If this is done, you can access the certificate the client used to connect (assuming it is valid, if not the connection will end with an error) with the Request.certificateChain property. Below you can find a simple example to set up an HTTPS server and client with mutual TLS: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // Key store files val identity = \"hexagonkt.p12\" val trust = \"trust.p12\" // Default passwords are file name reversed val keyStorePassword = identity . reversed () val trustStorePassword = trust . reversed () // Key stores can be set as URIs to classpath resources (the triple slash is needed) val keyStore = URL ( \"classpath:ssl/ $ identity \" ) val trustStore = URL ( \"classpath:ssl/ $ trust \" ) val sslSettings = SslSettings ( keyStore = keyStore , keyStorePassword = keyStorePassword , trustStore = trustStore , trustStorePassword = trustStorePassword , clientAuth = true // Requires a valid certificate from the client (mutual TLS) ) val serverSettings = ServerSettings ( bindPort = 0 , protocol = HTTPS , // You can also use HTTP2 sslSettings = sslSettings ) val server = serve ( serverSettings , serverAdapter ) { get ( \"/hello\" ) { // We can access the certificate used by the client from the request val subjectDn = request . certificate ?. subjectDN ?. name response . headers [ \"cert\" ] = subjectDn ok ( \"Hello World!\" ) } } // We'll use the same certificate for the client (in a real scenario it would be different) val clientSettings = ClientSettings ( sslSettings = sslSettings ) // Create a HTTP client and make a HTTPS request val client = Client ( AhcAdapter (), \"https://localhost: ${ server . runtimePort } \" , clientSettings ) client . get ( \"/hello\" ). apply { logger . debug { body } // Assure the certificate received (and returned) by the server is correct assert ( headers . require ( \"cert\" ). first (). startsWith ( \"CN=hexagonkt.com\" )) assert ( body == \"Hello World!\" ) } Testing \u00b6 Integration tests \u00b6 To test HTTP servers from outside using a real Adapter, you can create a server setting 0 as port. This will pick a random free port which you can check later: 1 2 3 4 5 6 7 8 9 10 11 val router = Router { get ( \"/hello\" ) { ok ( \"Hi!\" ) } } val serverSettings = ServerSettings ( InetAddress . getLoopbackAddress (), 0 , banner = \"name\" ) val server = Server ( adapter , router , serverSettings ) server . start () val client = Client ( AhcAdapter (), \"http://localhost: ${ server . runtimePort } \" ) assert ( client . get ( \"/hello\" ). body == \"Hi!\" ) server . stop () To do this kind of tests without creating a custom server (using the real production code). Check the tests of the starter projects . If you have an OpenAPI/Swagger spec defined for your server, you can also make use of the mock server ( see below ). Mocking calls \u00b6 To unit test callbacks you can create test calls with hardcoded requests, responses and sessions. To use it in your project you'll have to include a dependency (with test scope): build.gradle 1 2 3 4 5 repositories { mavenCentral () } testImplementation ( \"com.hexagonkt:port_http_server:$hexagonVersion:test\" ) pom.xml 1 2 3 4 5 6 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> port_http_server </artifactId> <version> $hexagonVersion </version> <scope> test </scope> </dependency> Check testCall , TestRequest , TestResponse and TestSession for more details. For a quick sample, check the snipped below: 1 2 3 4 5 6 7 8 9 10 11 12 13 private fun Call . testedCallback () { if ( request . body == \"weird\" ) send ( 999 , \"Weird error\" ) } @Test fun `Test call behaves as expected` () { val testCall = testCall ( TestRequest ( body = \"weird\" )) testCall . testedCallback () assert ( testCall . response . status == 999 ) assert ( testCall . response . body == \"Weird error\" ) } OpenAPI Mock Server \u00b6 The mock server is able to create and return a Server from the information of an OpenAPI/Swagger spec file. The path to the spec file can either be a URL or a local file. It can be either in JSON or YAML format. The mock server takes all its data from the spec and the request and response of the routes is determined by the routes' examples and schemas. During handling of a request, the mock server validates the request parameters against those specified in the spec file and returns an appropriate response from the provided examples . If any authentication requirements are specified, they are validated as well. How to Use \u00b6 First, add the required dependencies: 1 2 implementation ( \"com.hexagonkt:port_http_server: $ hexagonVersion :test\" ) implementation ( \"io.swagger.parser.v3:swagger-parser: $ swaggerParserVersion \" ) To create the mock server object: 1 val mockServer = MockServer ( \"https://petstore3.swagger.io/api/v3/openapi.json\" ) Optionally, you can also explicitly specify a port number: 1 val mockServer = MockServer ( \"https://petstore3.swagger.io/api/v3/openapi.json\" , port = 9090 ) To get the actual server object: 1 val server = mockServer . server Finally, to run the server: 1 server . start () OpenAPI Spec File Requirements \u00b6 The file provided should be a syntactically valid OpenAPI spec file. If it is not, an error will be raised at initialization time. For each path in the spec file, descriptions for 200 and 400 (in case parameter verification fails) status codes must be provided. If the path contains authentication requirements, a 401 status code description must also be provided. In addition, for each status code, at least one example must be provided. Note that, at present, only the application/json media type is supported. Supported Authentication Methods \u00b6 Currently, the following Authentication methods/mechanisms are supported: API Key authentication (key may be present in the headers, query parameters or cookies) HTTP Authentication (Basic or Bearer authentication) Providing Examples \u00b6 There are several ways to define response examples in an OpenAPI spec file. If there are multiple examples defined for a particular path status code, you can specify a particular response by using the X-Mock-Response-Example header with the name of the desired example. The mock server follows the following priority order when parsing the spec file for examples: 1. If the X-Mock-Response-Example header is present, then the example corresponding to the value of that header is immediately fetched and returned. 2. If no X-Mock-Response-Example header is present, it first tries to fetch an example from the schema key within the media type object. 3. If no example is found here, it then attempts to fetch the example from the example key in the media type object. 4. Next, it attempts to fetch the first value found in the examples key of the media type object. 5. If still no example is found, it simply raises an exception. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \"content\" : { \"application/json\" : { \"schema\" : { \"example\" : \"This value is checked first\" }, \"example\" : \"This value is checked second\" , \"examples\" : { \"example1\" : { \"value\" : \"This value is checked third\" }, \"example2\" : { \"value\" : \"This value would be returned if the X-Mock-Response-Example header is passed with value 'example2'\" } } } } Package com.hexagonkt.http.server \u00b6 This package defines the classes used in the HTTP DSL.","title":"HTTP Server"},{"location":"port_http_server/port_http_server/#module-port_http_server","text":"This port's purpose is to develop HTTP servers (REST services or Web applications). It defines a DSL to declare HTTP request handlers. Adapters implementing this port are in charge of transforming the DSL into a runtime. And allows you to switch implementations without changing the service. The hexagon_web module provides utilities on top of this port for Web application development (like templates helpers).","title":"Module port_http_server"},{"location":"port_http_server/port_http_server/#install-the-dependency","text":"This module is not meant to be used directly. You should include and Adapter implementing this feature (as http_server_jetty ) in order to create an HTTP server.","title":"Install the Dependency"},{"location":"port_http_server/port_http_server/#server","text":"A server is a process listening to HTTP requests on a TCP port. You can run multiple ones on different ports at the same time (this can be useful to test many microservices at the same time). The server can be configured with different properties. If you do not provide a value for them, they are searched inside the application settings and lastly, a default value is picked. This is the parameters list: banner: informative text shown at start up logs. If not set only runtime information is displayed. bindAddress: address to which this process is bound. If none is provided, 127.0.0.1 is taken. bindPort: the port which the process listens to. By default, it is 2010 . contextPath: initial path used for the rest of the routes, by default it is empty. You can inject an adapter for the Server port using the InjectionManager object: InjectionManager.bindObject<ServerPort>(JettyServletAdapter()) To create a server, you need to provide a router (check the next section for more information), and after creating a server you can run it or stop it with start() and stop() methods. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 /* * All settings are optional, you can supply any combination * Parameters not set will fall back to the defaults */ val settings = ServerSettings ( bindAddress = InetAddress . getByName ( \"0.0.0\" ), bindPort = 2020 , contextPath = \"/context\" , banner = \"name\" ) val router = Router { get ( \"/hello\" ) { ok ( \"Hello World!\" ) } } val customServer = Server ( adapter , router , settings ) customServer . start () val customClient = Client ( AhcAdapter (), \"http://localhost: ${ customServer . runtimePort } \" ) assert ( customServer . started ()) assert ( customClient . get ( \"/context/hello\" ). body == \"Hello World!\" ) customServer . stop () /* * You can skip the adapter is you previously bound one * You may also skip the settings an the defaults will be used */ InjectionManager . bind ( adapter ) val defaultServer = Server ( router = router ) defaultServer . start () val defaultClient = Client ( AhcAdapter (), \"http://localhost: ${ defaultServer . runtimePort } \" ) assert ( defaultServer . started ()) assert ( defaultClient . get ( \"/hello\" ). body == \"Hello World!\" ) defaultServer . stop ()","title":"Server"},{"location":"port_http_server/port_http_server/#servlet-web-server","text":"There is a special server adapter for running inside Servlet Containers. To use it you should import the Servlet HTTP Server Adapter into your project. Check the http_server_servlet module for more information.","title":"Servlet Web server"},{"location":"port_http_server/port_http_server/#routes","text":"The main building block of a Hexagon HTTP service is a set of routes. A route is made up of three simple pieces: A verb (get, post, put, delete, head, trace, connect, options). It can also be any . A path (/hello, /users/{name}). Paths must start with '/' and trailing slash is ignored. A callback code block. The callback has a void return type. You should use Call.send() to set the response which will be returned to the user. Routes are matched in the order they are defined. The first route that matches the request is invoked, and the following ones are ignored. Check the next snippet for usage examples: 1 2 3 4 5 6 7 get ( \"/hello\" ) { ok ( \"Get greeting\" )} put ( \"/hello\" ) { ok ( \"Put greeting\" )} post ( \"/hello\" ) { ok ( \"Post greeting\" )} any ( \"/hello\" ) { ok ( \"Fallback if HTTP verb was not used before\" )} get { ok ( \"Get at '/' if no route matched before\" ) } HTTP clients will be able to reuse the routes to create REST services clients.","title":"Routes"},{"location":"port_http_server/port_http_server/#route-groups","text":"Routes can be nested by calling the path() method, which takes a String prefix and gives you a scope to declare routes and filters (or more nested paths). Ie: 1 2 3 4 5 6 7 8 9 path ( \"/nested\" ) { get ( \"/hello\" ) { ok ( \"Greeting\" )} path ( \"/secondLevel\" ) { get ( \"/hello\" ) { ok ( \"Second level greeting\" )} } get { ok ( \"Get at '/nested'\" ) } }","title":"Route groups"},{"location":"port_http_server/port_http_server/#routers","text":"If you have a lot of routes, it can be helpful to group them into routers. You can create routers to mount a group of routes in different paths (allowing you to reuse them). Check this snippet: 1 2 3 4 5 6 7 8 9 10 fun personRouter ( kind : String ) = Router { get { ok ( \"Get $ kind \" ) } put { ok ( \"Put $ kind \" ) } post { ok ( \"Post $ kind \" ) } } val server = Server ( adapter ) { path ( \"/clients\" , personRouter ( \"client\" )) path ( \"/customers\" , personRouter ( \"customer\" )) }","title":"Routers"},{"location":"port_http_server/port_http_server/#callbacks","text":"Callbacks are request's handling blocks that are bound to routes or filters. They make the request, response and session objects available to the handling code.","title":"Callbacks"},{"location":"port_http_server/port_http_server/#call","text":"The Call object provides you with everything you need to handle a http-request. It contains the underlying request and response, and a bunch of utility methods to return results, read parameters or pass attributes among filters/routes. The methods are available directly from the callback ( Call is the callback receiver). You can check the API documentation for the full list of methods. This sample code illustrates the usage: 1 2 3 4 5 6 7 8 get ( \"/call\" ) { attributes // the attributes list attributes [ \"foo\" ] // value of foo attribute attributes [ \"A\" ] = \"V\" // sets value of attribute A to V ok ( \"Response body\" ) // returns a 200 status send ( 400 , \"Invalid request\" ) // returns any status }","title":"Call"},{"location":"port_http_server/port_http_server/#request","text":"Request functionality is provided by the request field: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 get ( \"/request\" ) { // URL Information request . method // the HTTP method (GET, ..etc) request . scheme // http or https request . secure // true if scheme is https request . host // the host, e.g. \"example.com\" request . ip // client IP address request . port // the server port request . path // the request path, e.g. /result.jsp request . body // request body sent by the client request . url // the url. e.g. \"http://example.com/foo\" // Headers request . headers // the HTTP header list with first values only request . headers [ \"BAR\" ] // first value of BAR header request . headersValues // the HTTP header list with their full values list request . headersValues [ \"BAR\" ] // list of values of BAR header // Common headers shortcuts request . contentType // content type of request.body request . acceptValues // Client accepted content types request . userAgent // user agent (browser requests) request . origin // origin (browser requests) // Parameters request . pathParameters // map with all path parameters request . formParameters // map with first values of all form fields request . formParametersValues // map with all form fields values request . queryParameters // map with first values of all query parameters request . queryParametersValues // map with all query parameters values // Body processing request . contentLength // length of request body request . body ( Type :: class ) // Object passed in the body as a typed object request . body < Type > () // Syntactic sugar for the previous statement request . bodyObjects ( Type :: class ) // Object(s) passed in the body as a typed list request . bodyObjects < Type > () // Syntactic sugar for the previous statement request . body ( Map :: class ) // Object passed in the body as a field map request . body < Map <* , *>> () // Syntactic sugar for the previous statement request . bodyObjects ( Map :: class ) // Object(s) passed in the body as a list of maps request . bodyObjects < Map <* , *>> () // Syntactic sugar for the previous statement }","title":"Request"},{"location":"port_http_server/port_http_server/#path-parameters","text":"Route patterns can include named parameters, accessible via the pathParameters map on the request object: 1 2 3 4 get ( \"/pathParam/{foo}\" ) { request . pathParameters [ \"foo\" ] // value of foo path parameter request . pathParameters // map with all parameters }","title":"Path Parameters"},{"location":"port_http_server/port_http_server/#query-parameters","text":"It is possible to access the whole query string or only a specific query parameter using the parameters map on the request object: 1 2 3 4 5 6 7 get ( \"/queryParam\" ) { request . queryString request . queryParameters // the query param list request . queryParameters [ \"FOO\" ] // value of FOO query param request . queryParametersValues // the query param list request . queryParametersValues [ \"FOO\" ] // all values of FOO query param }","title":"Query Parameters"},{"location":"port_http_server/port_http_server/#form-parameters","text":"HTML Form processing. Don't parse body! 1 2 3 4 5 6 get ( \"/formParam\" ) { request . formParameters // the query param list request . formParameters [ \"FOO\" ] // value of FOO query param request . formParametersValues // the query param list request . formParametersValues [ \"FOO\" ] // all values of FOO query param }","title":"Form Parameters"},{"location":"port_http_server/port_http_server/#file-uploads","text":"Multipart Requests 1 2 3 4 post ( \"/file\" ) { val filePart = request . parts [ \"file\" ] ?: error ( \"File not available\" ) ok ( filePart . inputStream . reader (). readText ()) }","title":"File Uploads"},{"location":"port_http_server/port_http_server/#response","text":"Response information is provided by the response field: 1 2 3 4 5 6 7 8 9 10 get ( \"/response\" ) { response . body // get response content response . body = \"Hello\" // sets content to Hello response . headers [ \"FOO\" ] = \"bar\" // sets header FOO with single value bar response . headersValues [ \"FOO\" ] = listOf ( \"bar\" ) // sets header FOO values with [ bar ] response . status // get the response status response . status = 401 // set status code to 401 response . contentType // get the content type response . contentType = \"text/xml\" // set content type to text/xml }","title":"Response"},{"location":"port_http_server/port_http_server/#redirects","text":"You can redirect requests (returning 30x codes) by using Call utility methods: 1 2 3 get ( \"/redirect\" ) { redirect ( \"/call\" ) // browser redirect to /call }","title":"Redirects"},{"location":"port_http_server/port_http_server/#cookies","text":"The request and response cookie functions provide a convenient way for sharing information between handlers, requests, or even servers. You can read client sent cookies from the request's cookies read only map. To change cookies or add new ones you have to use response.addCookie() and response.removeCookie() methods. Check the following sample code for details: 1 2 3 4 5 6 7 8 9 10 get ( \"/cookie\" ) { request . cookies // get map of all request cookies request . cookies [ \"foo\" ] // access request cookie by name val cookie = Cookie ( \"new_foo\" , \"bar\" ) response . addCookie ( cookie ) // set cookie with a value response . addCookie ( cookie . copy ( maxAge = 3600 )) // set cookie with a max-age response . addCookie ( cookie . copy ( secure = true )) // secure cookie response . removeCookie ( \"foo\" ) // remove cookie }","title":"Cookies"},{"location":"port_http_server/port_http_server/#sessions","text":"Every request has access to the session created on the server side, the session object provides the following methods: 1 2 3 4 5 6 7 8 9 get ( \"/session\" ) { session // create and return session session . attributes [ \"user\" ] // Get session attribute 'user' session . set ( \"user\" , \"foo\" ) // Set session attribute 'user' session . removeAttribute ( \"user\" ) // Remove session attribute 'user' session . attributes // Get all session attributes session . id // Get session id session . isNew () // Check if session is new }","title":"Sessions"},{"location":"port_http_server/port_http_server/#halting","text":"To immediately stop a request within a filter or route use halt() . halt() is not intended to be used inside exception-mappers. Check the following snippet for an example: 1 2 3 4 5 6 7 8 9 10 get ( \"/halt\" ) { halt () // halt with status 500 and stop route processing /* * These are just examples the following code will never be reached */ halt ( 401 ) // halt with status halt ( \"Body Message\" ) // halt with message (status 500) halt ( 401 , \"Go away!\" ) // halt with status and message }","title":"Halting"},{"location":"port_http_server/port_http_server/#filters","text":"You might know filters as interceptors, or middleware from other libraries. Filters are blocks of code executed before or after one or more routes. They can read the request and read/modify the response. All filters that match a route are executed in the order they are declared. Filters optionally take a pattern, causing them to be executed only if the request path matches that pattern. Before and after filters are always executed (if the route is matched). However, any of them may stop the execution chain if halted. If halt() is called in one filter, filter processing is stopped for that kind of filter ( before or after ). In the case of before filters, this also prevent the route from being executed (but after filters are executed anyway). The following code details filters usage: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 before { response . headersValues [ \"b_all\" ] = listOf ( \"true\" ) } before ( \"/filters/*\" ) { response . headersValues [ \"b_filters\" ] = listOf ( \"true\" ) } get ( \"/filters/route\" ) { ok ( \"filters route\" ) } after ( \"/filters/*\" ) { response . headersValues [ \"a_filters\" ] = listOf ( \"true\" ) } get ( \"/filters\" ) { ok ( \"filters\" ) } path ( \"/nested\" ) { before { response . headersValues [ \"b_nested\" ] = listOf ( \"true\" ) } before ( \"/\" ) { response . headersValues [ \"b_nested_2\" ] = listOf ( \"true\" ) } get ( \"/filters\" ) { ok ( \"nested filters\" ) } get ( \"/halted\" ) { halt ( 499 , \"halted\" ) } get { ok ( \"nested also\" ) } after { response . headersValues [ \"a_nested\" ] = listOf ( \"true\" ) } } after { response . headersValues [ \"a_all\" ] = listOf ( \"true\" ) }","title":"Filters"},{"location":"port_http_server/port_http_server/#error-handling","text":"You can provide handlers for runtime errors. Errors are unhandled thrown exceptions in the callbacks, or handlers halted with an error code. Error handlers for a given code or exception are unique, and the first one defined is the one which will be used.","title":"Error Handling"},{"location":"port_http_server/port_http_server/#http-errors-handlers","text":"Allows handling routes halted with a given code. These handlers are only applied if the route is halted, if the error code is returned with send it won't be handled as an error. Example: 1 2 3 4 5 // Register handler for routes halted with 512 code error ( 512 ) { send ( 500 , \"Ouch\" )} // If status code (512) is returned with `send` error won't be triggered get ( \"/errors\" ) { halt ( 512 ) }","title":"HTTP Errors Handlers"},{"location":"port_http_server/port_http_server/#exception-mapping","text":"You can handle exceptions of a given type for all routes and filters. The handler allows you to refer to the thrown exception. Look at the following code for a detailed example: 1 2 3 4 5 // Register handler for routes which callbacks throw exceptions error ( CodedException :: class ) { send ( 599 , it . message ?: \"empty\" ) } error ( IllegalStateException :: class ) { send ( 505 , it . message ?: \"empty\" ) } get ( \"/exceptions\" ) { error ( \"Message\" ) } get ( \"/codedExceptions\" ) { halt ( 509 , \"code\" ) }","title":"Exception Mapping"},{"location":"port_http_server/port_http_server/#static-files","text":"You can use a folder in the classpath for serving static files with the get() methods. Note that the public directory name is not included in the URL. Asset mapping is handled like any other route, so if an asset mapping is matched, no other route will be checked (assets or other routes). Also, if a previous route is matched, the asset mapping will never be checked. Being get(resource) a shortcut of get(\"/*\", resource) it should be placed as the last route. Check the next example for details: 1 2 3 4 5 6 7 8 get ( \"/web/file.txt\" ) { ok ( \"It matches this route and won't search for the file\" ) } // Expose resources on the '/public' resource folder over the '/web' HTTP path get ( \"/web/*\" , URL ( \"classpath:public\" )) // Maps resources on 'assets' on the server root (assets/f.css -> /f.css) // '/public/css/style.css' resource would be: 'http://{host}:{port}/css/style.css' get ( URL ( \"classpath:assets\" ))","title":"Static Files"},{"location":"port_http_server/port_http_server/#mime-types","text":"The MIME types of static files are computed from the file extension using the SerializationManager.contentTypeOf() method.","title":"MIME types"},{"location":"port_http_server/port_http_server/#cors","text":"CORS behaviour can be different depending on the path. You can attach different CorsSettings to different routers. Check CorsSettings class for more details. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 val server : Server = Server ( adapter ) { corsPath ( \"/default\" , CorsSettings ()) corsPath ( \"/example/org\" , CorsSettings ( \"example.org\" )) corsPath ( \"/no/credentials\" , CorsSettings ( supportCredentials = false )) corsPath ( \"/only/post\" , CorsSettings ( allowedMethods = setOf ( POST ))) corsPath ( \"/cache\" , CorsSettings ( preFlightMaxAge = 10 )) corsPath ( \"/exposed/headers\" , CorsSettings ( exposedHeaders = setOf ( \"head\" ))) corsPath ( \"/allowed/headers\" , CorsSettings ( allowedHeaders = setOf ( \"head\" ))) } private fun Router . corsPath ( path : String , settings : CorsSettings ) { path ( path ) { // CORS settings can change for different routes cors ( settings ) get ( \"/path\" ) { ok ( request . method ) } post ( \"/path\" ) { ok ( request . method ) } put ( \"/path\" ) { ok ( request . method ) } delete ( \"/path\" ) { ok ( request . method ) } get { ok ( request . method ) } post { ok ( request . method ) } put { ok ( request . method ) } delete { ok ( request . method ) } } }","title":"CORS"},{"location":"port_http_server/port_http_server/#https","text":"It is possible to start a secure server enabling HTTPS. For this, you have to provide a server certificate and its key in the server's SslSettings . Once you use a server certificate, it is also possible to serve content using HTTP/2 , for this to work, ALPN is required (however, this is already handled if you use Java 11). The certificate common name should match the host that will serve the content in order to be accepted by an HTTP client without a security error. There is a Gradle helper to create sample certificates for development purposes. HTTP clients can also be configured to use a certificate. This is required to implement a double ended authorization ( mutual TLS ). This is also done by passing a SslSettings object the HTTP client. If you want to implement mutual trust, you must enforce client certificate in the server configuration (check SslSettings.clientAuth ). If this is done, you can access the certificate the client used to connect (assuming it is valid, if not the connection will end with an error) with the Request.certificateChain property. Below you can find a simple example to set up an HTTPS server and client with mutual TLS: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // Key store files val identity = \"hexagonkt.p12\" val trust = \"trust.p12\" // Default passwords are file name reversed val keyStorePassword = identity . reversed () val trustStorePassword = trust . reversed () // Key stores can be set as URIs to classpath resources (the triple slash is needed) val keyStore = URL ( \"classpath:ssl/ $ identity \" ) val trustStore = URL ( \"classpath:ssl/ $ trust \" ) val sslSettings = SslSettings ( keyStore = keyStore , keyStorePassword = keyStorePassword , trustStore = trustStore , trustStorePassword = trustStorePassword , clientAuth = true // Requires a valid certificate from the client (mutual TLS) ) val serverSettings = ServerSettings ( bindPort = 0 , protocol = HTTPS , // You can also use HTTP2 sslSettings = sslSettings ) val server = serve ( serverSettings , serverAdapter ) { get ( \"/hello\" ) { // We can access the certificate used by the client from the request val subjectDn = request . certificate ?. subjectDN ?. name response . headers [ \"cert\" ] = subjectDn ok ( \"Hello World!\" ) } } // We'll use the same certificate for the client (in a real scenario it would be different) val clientSettings = ClientSettings ( sslSettings = sslSettings ) // Create a HTTP client and make a HTTPS request val client = Client ( AhcAdapter (), \"https://localhost: ${ server . runtimePort } \" , clientSettings ) client . get ( \"/hello\" ). apply { logger . debug { body } // Assure the certificate received (and returned) by the server is correct assert ( headers . require ( \"cert\" ). first (). startsWith ( \"CN=hexagonkt.com\" )) assert ( body == \"Hello World!\" ) }","title":"HTTPS"},{"location":"port_http_server/port_http_server/#testing","text":"","title":"Testing"},{"location":"port_http_server/port_http_server/#integration-tests","text":"To test HTTP servers from outside using a real Adapter, you can create a server setting 0 as port. This will pick a random free port which you can check later: 1 2 3 4 5 6 7 8 9 10 11 val router = Router { get ( \"/hello\" ) { ok ( \"Hi!\" ) } } val serverSettings = ServerSettings ( InetAddress . getLoopbackAddress (), 0 , banner = \"name\" ) val server = Server ( adapter , router , serverSettings ) server . start () val client = Client ( AhcAdapter (), \"http://localhost: ${ server . runtimePort } \" ) assert ( client . get ( \"/hello\" ). body == \"Hi!\" ) server . stop () To do this kind of tests without creating a custom server (using the real production code). Check the tests of the starter projects . If you have an OpenAPI/Swagger spec defined for your server, you can also make use of the mock server ( see below ).","title":"Integration tests"},{"location":"port_http_server/port_http_server/#mocking-calls","text":"To unit test callbacks you can create test calls with hardcoded requests, responses and sessions. To use it in your project you'll have to include a dependency (with test scope): build.gradle 1 2 3 4 5 repositories { mavenCentral () } testImplementation ( \"com.hexagonkt:port_http_server:$hexagonVersion:test\" ) pom.xml 1 2 3 4 5 6 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> port_http_server </artifactId> <version> $hexagonVersion </version> <scope> test </scope> </dependency> Check testCall , TestRequest , TestResponse and TestSession for more details. For a quick sample, check the snipped below: 1 2 3 4 5 6 7 8 9 10 11 12 13 private fun Call . testedCallback () { if ( request . body == \"weird\" ) send ( 999 , \"Weird error\" ) } @Test fun `Test call behaves as expected` () { val testCall = testCall ( TestRequest ( body = \"weird\" )) testCall . testedCallback () assert ( testCall . response . status == 999 ) assert ( testCall . response . body == \"Weird error\" ) }","title":"Mocking calls"},{"location":"port_http_server/port_http_server/#openapi-mock-server","text":"The mock server is able to create and return a Server from the information of an OpenAPI/Swagger spec file. The path to the spec file can either be a URL or a local file. It can be either in JSON or YAML format. The mock server takes all its data from the spec and the request and response of the routes is determined by the routes' examples and schemas. During handling of a request, the mock server validates the request parameters against those specified in the spec file and returns an appropriate response from the provided examples . If any authentication requirements are specified, they are validated as well.","title":"OpenAPI Mock Server"},{"location":"port_http_server/port_http_server/#how-to-use","text":"First, add the required dependencies: 1 2 implementation ( \"com.hexagonkt:port_http_server: $ hexagonVersion :test\" ) implementation ( \"io.swagger.parser.v3:swagger-parser: $ swaggerParserVersion \" ) To create the mock server object: 1 val mockServer = MockServer ( \"https://petstore3.swagger.io/api/v3/openapi.json\" ) Optionally, you can also explicitly specify a port number: 1 val mockServer = MockServer ( \"https://petstore3.swagger.io/api/v3/openapi.json\" , port = 9090 ) To get the actual server object: 1 val server = mockServer . server Finally, to run the server: 1 server . start ()","title":"How to Use"},{"location":"port_http_server/port_http_server/#openapi-spec-file-requirements","text":"The file provided should be a syntactically valid OpenAPI spec file. If it is not, an error will be raised at initialization time. For each path in the spec file, descriptions for 200 and 400 (in case parameter verification fails) status codes must be provided. If the path contains authentication requirements, a 401 status code description must also be provided. In addition, for each status code, at least one example must be provided. Note that, at present, only the application/json media type is supported.","title":"OpenAPI Spec File Requirements"},{"location":"port_http_server/port_http_server/#supported-authentication-methods","text":"Currently, the following Authentication methods/mechanisms are supported: API Key authentication (key may be present in the headers, query parameters or cookies) HTTP Authentication (Basic or Bearer authentication)","title":"Supported Authentication Methods"},{"location":"port_http_server/port_http_server/#providing-examples","text":"There are several ways to define response examples in an OpenAPI spec file. If there are multiple examples defined for a particular path status code, you can specify a particular response by using the X-Mock-Response-Example header with the name of the desired example. The mock server follows the following priority order when parsing the spec file for examples: 1. If the X-Mock-Response-Example header is present, then the example corresponding to the value of that header is immediately fetched and returned. 2. If no X-Mock-Response-Example header is present, it first tries to fetch an example from the schema key within the media type object. 3. If no example is found here, it then attempts to fetch the example from the example key in the media type object. 4. Next, it attempts to fetch the first value found in the examples key of the media type object. 5. If still no example is found, it simply raises an exception. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \"content\" : { \"application/json\" : { \"schema\" : { \"example\" : \"This value is checked first\" }, \"example\" : \"This value is checked second\" , \"examples\" : { \"example1\" : { \"value\" : \"This value is checked third\" }, \"example2\" : { \"value\" : \"This value would be returned if the X-Mock-Response-Example header is passed with value 'example2'\" } } } }","title":"Providing Examples"},{"location":"port_http_server/port_http_server/#package-comhexagonkthttpserver","text":"This package defines the classes used in the HTTP DSL.","title":"Package com.hexagonkt.http.server"},{"location":"port_http_server/com.hexagonkt.http.server/","text":"// port_http_server / com.hexagonkt.http.server Package com.hexagonkt.http.server \u00b6 [jvm] This package defines the classes used in the HTTP DSL. Types \u00b6 Name Summary Call [jvm] Content class Call ( request : Request , response : Response , session : Session ) More info HTTP request context. CorsSettings [jvm] Content data class CorsSettings ( allowedOrigin : Regex , allowedMethods : Set , allowedHeaders : Set < String >, exposedHeaders : Set < String >, supportCredentials : Boolean , preFlightStatus : Int , preFlightMaxAge : Long ) More info HTTP CORS setting. ErrorCodeCallback [jvm] Content typealias ErrorCodeCallback = Call .(CodedException) -> Unit More info Alias for errors' callbacks. Functions executed to handle a HTTP error code. ExceptionCallback [jvm] Content typealias ExceptionCallback = Call .( Exception ) -> Unit More info Alias for exceptions' callbacks. Functions executed when an exception is thrown. FilterOrder [jvm] Content enum FilterOrder : Enum < FilterOrder > More info Type of filter. PortHttpServerSamplesTest [jvm] Content abstract class PortHttpServerSamplesTest ( adapter : ServerPort ) Request [jvm] Content class Request ( adapter : RequestPort ) More info Lists would be initialized loading all elements when they are used (set it as lazy in implementations) this will have a performance penalty in favor of ease of use. RequestHandler [jvm] Content sealed class RequestHandler More info Base class for request handlers. RequestPort [jvm] Content interface RequestPort Response [jvm] Content class Response ( adapter : ResponsePort ) More info Check 'Request' comment. ResponsePort [jvm] Content interface ResponsePort RouteCallback [jvm] Content typealias RouteCallback = Call .() -> Unit More info Alias for routes' and filters' callbacks. Functions executed when a route is matched. Router [jvm] Content class Router ( block : Router .() -> Unit ) More info Creates and initializes a Router based on a code block. Server [jvm] Content data class Server ( adapter : ServerPort , router : Router , settings : ServerSettings ) More info Server that listen to HTTP connections on a port and address and route requests using a router. ServerFeature [jvm] Content enum ServerFeature : Enum < ServerFeature > More info Toolkit feature that may or may not be implemented by a server adapter. ServerPort [jvm] Content interface ServerPort More info Server instance of one kind. ServerSettings [jvm] Content data class ServerSettings ( bindAddress : InetAddress , bindPort : Int , contextPath : String , protocol : Protocol, sslSettings : SslSettings?, banner : String ?, features : Set < ServerFeature >, options : Map < String , Any >) More info Holds server settings info. Session [jvm] Content class Session ( adapter : SessionPort ) More info Provides session information. SessionPort [jvm] Content interface SessionPort UnsupportedSessionAdapter [jvm] Content object UnsupportedSessionAdapter : SessionPort Functions \u00b6 Name Summary serve [jvm] Content fun serve (settings: ServerSettings = ServerSettings(), router: Router , adapter: ServerPort = InjectionManager.inject()): Server fun serve (settings: ServerSettings = ServerSettings(), adapter: ServerPort = InjectionManager.inject(), block: Router .() -> Unit ): Server More info Create a server and start it.","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/#package-comhexagonkthttpserver","text":"[jvm] This package defines the classes used in the HTTP DSL.","title":"Package com.hexagonkt.http.server"},{"location":"port_http_server/com.hexagonkt.http.server/#types","text":"Name Summary Call [jvm] Content class Call ( request : Request , response : Response , session : Session ) More info HTTP request context. CorsSettings [jvm] Content data class CorsSettings ( allowedOrigin : Regex , allowedMethods : Set , allowedHeaders : Set < String >, exposedHeaders : Set < String >, supportCredentials : Boolean , preFlightStatus : Int , preFlightMaxAge : Long ) More info HTTP CORS setting. ErrorCodeCallback [jvm] Content typealias ErrorCodeCallback = Call .(CodedException) -> Unit More info Alias for errors' callbacks. Functions executed to handle a HTTP error code. ExceptionCallback [jvm] Content typealias ExceptionCallback = Call .( Exception ) -> Unit More info Alias for exceptions' callbacks. Functions executed when an exception is thrown. FilterOrder [jvm] Content enum FilterOrder : Enum < FilterOrder > More info Type of filter. PortHttpServerSamplesTest [jvm] Content abstract class PortHttpServerSamplesTest ( adapter : ServerPort ) Request [jvm] Content class Request ( adapter : RequestPort ) More info Lists would be initialized loading all elements when they are used (set it as lazy in implementations) this will have a performance penalty in favor of ease of use. RequestHandler [jvm] Content sealed class RequestHandler More info Base class for request handlers. RequestPort [jvm] Content interface RequestPort Response [jvm] Content class Response ( adapter : ResponsePort ) More info Check 'Request' comment. ResponsePort [jvm] Content interface ResponsePort RouteCallback [jvm] Content typealias RouteCallback = Call .() -> Unit More info Alias for routes' and filters' callbacks. Functions executed when a route is matched. Router [jvm] Content class Router ( block : Router .() -> Unit ) More info Creates and initializes a Router based on a code block. Server [jvm] Content data class Server ( adapter : ServerPort , router : Router , settings : ServerSettings ) More info Server that listen to HTTP connections on a port and address and route requests using a router. ServerFeature [jvm] Content enum ServerFeature : Enum < ServerFeature > More info Toolkit feature that may or may not be implemented by a server adapter. ServerPort [jvm] Content interface ServerPort More info Server instance of one kind. ServerSettings [jvm] Content data class ServerSettings ( bindAddress : InetAddress , bindPort : Int , contextPath : String , protocol : Protocol, sslSettings : SslSettings?, banner : String ?, features : Set < ServerFeature >, options : Map < String , Any >) More info Holds server settings info. Session [jvm] Content class Session ( adapter : SessionPort ) More info Provides session information. SessionPort [jvm] Content interface SessionPort UnsupportedSessionAdapter [jvm] Content object UnsupportedSessionAdapter : SessionPort","title":"Types"},{"location":"port_http_server/com.hexagonkt.http.server/#functions","text":"Name Summary serve [jvm] Content fun serve (settings: ServerSettings = ServerSettings(), router: Router , adapter: ServerPort = InjectionManager.inject()): Server fun serve (settings: ServerSettings = ServerSettings(), adapter: ServerPort = InjectionManager.inject(), block: Router .() -> Unit ): Server More info Create a server and start it.","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server/serve/","text":"// port_http_server / com.hexagonkt.http.server / serve serve \u00b6 [jvm] Content fun serve (settings: ServerSettings = ServerSettings(), router: Router , adapter: ServerPort = InjectionManager.inject()): Server More info Create a server and start it. Return \u00b6 The started Server instance. Parameters \u00b6 jvm settings Server settings info . router Router instance. adapter Adapter instance which implements ServerPort . [jvm] Content fun serve (settings: ServerSettings = ServerSettings(), adapter: ServerPort = InjectionManager.inject(), block: Router .() -> Unit ): Server More info Create a server and start it. Return \u00b6 The started Server instance. Parameters \u00b6 jvm settings Server settings info. adapter Adapter instance which implements ServerPort . block Lambda to be used to create a Router instance.","title":"Serve"},{"location":"port_http_server/com.hexagonkt.http.server/serve/#serve","text":"[jvm] Content fun serve (settings: ServerSettings = ServerSettings(), router: Router , adapter: ServerPort = InjectionManager.inject()): Server More info Create a server and start it.","title":"serve"},{"location":"port_http_server/com.hexagonkt.http.server/serve/#return","text":"The started Server instance.","title":"Return"},{"location":"port_http_server/com.hexagonkt.http.server/serve/#parameters","text":"jvm settings Server settings info . router Router instance. adapter Adapter instance which implements ServerPort . [jvm] Content fun serve (settings: ServerSettings = ServerSettings(), adapter: ServerPort = InjectionManager.inject(), block: Router .() -> Unit ): Server More info Create a server and start it.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/serve/#return_1","text":"The started Server instance.","title":"Return"},{"location":"port_http_server/com.hexagonkt.http.server/serve/#parameters_1","text":"jvm settings Server settings info. adapter Adapter instance which implements ServerPort . block Lambda to be used to create a Router instance.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-call/","text":"// port_http_server / com.hexagonkt.http.server / Call Call \u00b6 [jvm] class Call ( request : Request , response : Response , session : Session ) HTTP request context. It holds client supplied data and methods to change the response. Constructors \u00b6 Call [jvm] fun Call (request: Request , response: Response , session: Session ) Functions \u00b6 Name Summary halt [jvm] Content fun halt (content: Any ): Nothing fun halt (code: Int = 500, content: Any = \"\"): Nothing More info Sends error response. ok [jvm] Content fun ok (content: Any = \"\", contentType: String ? = null) More info Sends success response with given content type. [jvm] Content fun ok (content: Any , serializationFormat: SerializationFormat = responseFormat, charset: Charset ? = null) More info Sends success response serialized using given SerializationFormat and Charset . redirect [jvm] Content fun redirect (url: String ) More info Sends a redirect response to the client using the specified redirect URL. send [jvm] Content fun send (code: Int , content: Any , contentType: ContentType) More info Sends response to the client after serializing using given ContentType instance. [jvm] Content fun send (code: Int , content: Any = \"\", contentType: String ? = null) More info Sends response to the client. [jvm] Content fun send (code: Int , content: Any , serializationFormat: SerializationFormat, charset: Charset ?) More info Sends response to the client after serializing using given SerializationFormat and Charset . Properties \u00b6 Name Summary attributes [jvm] val attributes : MutableMap < String , Any >Call attributes (for the current request). formParameters [jvm] val formParameters : Map < String , String > formParametersValues [jvm] val formParametersValues : Map < String , List < String >> pathParameters [jvm] val pathParameters : Map < String , String > queryParameters [jvm] val queryParameters : Map < String , String > queryParametersValues [jvm] val queryParametersValues : Map < String , List < String >> request [jvm] val request : Request requestFormat [jvm] val requestFormat : SerializationFormat requestType [jvm] val requestType : String response [jvm] val response : Response responseFormat [jvm] val responseFormat : SerializationFormat responseType [jvm] val responseType : String session [jvm] val session : Session","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-call/#call","text":"[jvm] class Call ( request : Request , response : Response , session : Session ) HTTP request context. It holds client supplied data and methods to change the response.","title":"Call"},{"location":"port_http_server/com.hexagonkt.http.server/-call/#constructors","text":"Call [jvm] fun Call (request: Request , response: Response , session: Session )","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-call/#functions","text":"Name Summary halt [jvm] Content fun halt (content: Any ): Nothing fun halt (code: Int = 500, content: Any = \"\"): Nothing More info Sends error response. ok [jvm] Content fun ok (content: Any = \"\", contentType: String ? = null) More info Sends success response with given content type. [jvm] Content fun ok (content: Any , serializationFormat: SerializationFormat = responseFormat, charset: Charset ? = null) More info Sends success response serialized using given SerializationFormat and Charset . redirect [jvm] Content fun redirect (url: String ) More info Sends a redirect response to the client using the specified redirect URL. send [jvm] Content fun send (code: Int , content: Any , contentType: ContentType) More info Sends response to the client after serializing using given ContentType instance. [jvm] Content fun send (code: Int , content: Any = \"\", contentType: String ? = null) More info Sends response to the client. [jvm] Content fun send (code: Int , content: Any , serializationFormat: SerializationFormat, charset: Charset ?) More info Sends response to the client after serializing using given SerializationFormat and Charset .","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server/-call/#properties","text":"Name Summary attributes [jvm] val attributes : MutableMap < String , Any >Call attributes (for the current request). formParameters [jvm] val formParameters : Map < String , String > formParametersValues [jvm] val formParametersValues : Map < String , List < String >> pathParameters [jvm] val pathParameters : Map < String , String > queryParameters [jvm] val queryParameters : Map < String , String > queryParametersValues [jvm] val queryParametersValues : Map < String , List < String >> request [jvm] val request : Request requestFormat [jvm] val requestFormat : SerializationFormat requestType [jvm] val requestType : String response [jvm] val response : Response responseFormat [jvm] val responseFormat : SerializationFormat responseType [jvm] val responseType : String session [jvm] val session : Session","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-call/-call/","text":"// port_http_server / com.hexagonkt.http.server / Call / Call Call \u00b6 [jvm] Content fun Call (request: Request , response: Response , session: Session )","title":" call"},{"location":"port_http_server/com.hexagonkt.http.server/-call/-call/#call","text":"[jvm] Content fun Call (request: Request , response: Response , session: Session )","title":"Call"},{"location":"port_http_server/com.hexagonkt.http.server/-call/attributes/","text":"// port_http_server / com.hexagonkt.http.server / Call / attributes attributes \u00b6 [jvm] Content val attributes : MutableMap < String , Any > More info Call attributes (for the current request). Same as HttpServletRequest.setAttribute().","title":"Attributes"},{"location":"port_http_server/com.hexagonkt.http.server/-call/attributes/#attributes","text":"[jvm] Content val attributes : MutableMap < String , Any > More info Call attributes (for the current request). Same as HttpServletRequest.setAttribute().","title":"attributes"},{"location":"port_http_server/com.hexagonkt.http.server/-call/form-parameters-values/","text":"// port_http_server / com.hexagonkt.http.server / Call / formParametersValues formParametersValues \u00b6 [jvm] Content val formParametersValues : Map < String , List < String >>","title":"Form parameters values"},{"location":"port_http_server/com.hexagonkt.http.server/-call/form-parameters-values/#formparametersvalues","text":"[jvm] Content val formParametersValues : Map < String , List < String >>","title":"formParametersValues"},{"location":"port_http_server/com.hexagonkt.http.server/-call/form-parameters/","text":"// port_http_server / com.hexagonkt.http.server / Call / formParameters formParameters \u00b6 [jvm] Content val formParameters : Map < String , String >","title":"Form parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-call/form-parameters/#formparameters","text":"[jvm] Content val formParameters : Map < String , String >","title":"formParameters"},{"location":"port_http_server/com.hexagonkt.http.server/-call/halt/","text":"// port_http_server / com.hexagonkt.http.server / Call / halt halt \u00b6 [jvm] Content fun halt (content: Any ): Nothing More info Sends error response. Parameters \u00b6 jvm content Message for error response. [jvm] Content fun halt (code: Int = 500, content: Any = \"\"): Nothing More info Sends error response. Parameters \u00b6 jvm code Status code for error response. content Message for error response.","title":"Halt"},{"location":"port_http_server/com.hexagonkt.http.server/-call/halt/#halt","text":"[jvm] Content fun halt (content: Any ): Nothing More info Sends error response.","title":"halt"},{"location":"port_http_server/com.hexagonkt.http.server/-call/halt/#parameters","text":"jvm content Message for error response. [jvm] Content fun halt (code: Int = 500, content: Any = \"\"): Nothing More info Sends error response.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-call/halt/#parameters_1","text":"jvm code Status code for error response. content Message for error response.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-call/ok/","text":"// port_http_server / com.hexagonkt.http.server / Call / ok ok \u00b6 [jvm] Content fun ok (content: Any = \"\", contentType: String ? = null) More info Sends success response with given content type. Parameters \u00b6 jvm content Content of the response. contentType Content type of the response. [jvm] Content fun ok (content: Any , serializationFormat: SerializationFormat = responseFormat, charset: Charset ? = null) More info Sends success response serialized using given SerializationFormat and Charset . Parameters \u00b6 jvm content Content of the response. serializationFormat Serialization format for serializing the response. charset Character Set to be used for the content type.","title":"Ok"},{"location":"port_http_server/com.hexagonkt.http.server/-call/ok/#ok","text":"[jvm] Content fun ok (content: Any = \"\", contentType: String ? = null) More info Sends success response with given content type.","title":"ok"},{"location":"port_http_server/com.hexagonkt.http.server/-call/ok/#parameters","text":"jvm content Content of the response. contentType Content type of the response. [jvm] Content fun ok (content: Any , serializationFormat: SerializationFormat = responseFormat, charset: Charset ? = null) More info Sends success response serialized using given SerializationFormat and Charset .","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-call/ok/#parameters_1","text":"jvm content Content of the response. serializationFormat Serialization format for serializing the response. charset Character Set to be used for the content type.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-call/path-parameters/","text":"// port_http_server / com.hexagonkt.http.server / Call / pathParameters pathParameters \u00b6 [jvm] Content val pathParameters : Map < String , String >","title":"Path parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-call/path-parameters/#pathparameters","text":"[jvm] Content val pathParameters : Map < String , String >","title":"pathParameters"},{"location":"port_http_server/com.hexagonkt.http.server/-call/query-parameters-values/","text":"// port_http_server / com.hexagonkt.http.server / Call / queryParametersValues queryParametersValues \u00b6 [jvm] Content val queryParametersValues : Map < String , List < String >>","title":"Query parameters values"},{"location":"port_http_server/com.hexagonkt.http.server/-call/query-parameters-values/#queryparametersvalues","text":"[jvm] Content val queryParametersValues : Map < String , List < String >>","title":"queryParametersValues"},{"location":"port_http_server/com.hexagonkt.http.server/-call/query-parameters/","text":"// port_http_server / com.hexagonkt.http.server / Call / queryParameters queryParameters \u00b6 [jvm] Content val queryParameters : Map < String , String >","title":"Query parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-call/query-parameters/#queryparameters","text":"[jvm] Content val queryParameters : Map < String , String >","title":"queryParameters"},{"location":"port_http_server/com.hexagonkt.http.server/-call/redirect/","text":"// port_http_server / com.hexagonkt.http.server / Call / redirect redirect \u00b6 [jvm] Content fun redirect (url: String ) More info Sends a redirect response to the client using the specified redirect URL. Parameters \u00b6 jvm url Redirect URL.","title":"Redirect"},{"location":"port_http_server/com.hexagonkt.http.server/-call/redirect/#redirect","text":"[jvm] Content fun redirect (url: String ) More info Sends a redirect response to the client using the specified redirect URL.","title":"redirect"},{"location":"port_http_server/com.hexagonkt.http.server/-call/redirect/#parameters","text":"jvm url Redirect URL.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-call/request-format/","text":"// port_http_server / com.hexagonkt.http.server / Call / requestFormat requestFormat \u00b6 [jvm] Content val requestFormat : SerializationFormat","title":"Request format"},{"location":"port_http_server/com.hexagonkt.http.server/-call/request-format/#requestformat","text":"[jvm] Content val requestFormat : SerializationFormat","title":"requestFormat"},{"location":"port_http_server/com.hexagonkt.http.server/-call/request-type/","text":"// port_http_server / com.hexagonkt.http.server / Call / requestType requestType \u00b6 [jvm] Content val requestType : String","title":"Request type"},{"location":"port_http_server/com.hexagonkt.http.server/-call/request-type/#requesttype","text":"[jvm] Content val requestType : String","title":"requestType"},{"location":"port_http_server/com.hexagonkt.http.server/-call/request/","text":"// port_http_server / com.hexagonkt.http.server / Call / request request \u00b6 [jvm] Content val request : Request","title":"Request"},{"location":"port_http_server/com.hexagonkt.http.server/-call/request/#request","text":"[jvm] Content val request : Request","title":"request"},{"location":"port_http_server/com.hexagonkt.http.server/-call/response-format/","text":"// port_http_server / com.hexagonkt.http.server / Call / responseFormat responseFormat \u00b6 [jvm] Content val responseFormat : SerializationFormat","title":"Response format"},{"location":"port_http_server/com.hexagonkt.http.server/-call/response-format/#responseformat","text":"[jvm] Content val responseFormat : SerializationFormat","title":"responseFormat"},{"location":"port_http_server/com.hexagonkt.http.server/-call/response-type/","text":"// port_http_server / com.hexagonkt.http.server / Call / responseType responseType \u00b6 [jvm] Content val responseType : String","title":"Response type"},{"location":"port_http_server/com.hexagonkt.http.server/-call/response-type/#responsetype","text":"[jvm] Content val responseType : String","title":"responseType"},{"location":"port_http_server/com.hexagonkt.http.server/-call/response/","text":"// port_http_server / com.hexagonkt.http.server / Call / response response \u00b6 [jvm] Content val response : Response","title":"Response"},{"location":"port_http_server/com.hexagonkt.http.server/-call/response/#response","text":"[jvm] Content val response : Response","title":"response"},{"location":"port_http_server/com.hexagonkt.http.server/-call/send/","text":"// port_http_server / com.hexagonkt.http.server / Call / send send \u00b6 [jvm] Content fun send (code: Int , content: Any = \"\", contentType: String ? = null) More info Sends response to the client. Parameters \u00b6 jvm code Status code of the response. content Content of the response. contentType Content type of the response. [jvm] Content fun send (code: Int , content: Any , serializationFormat: SerializationFormat, charset: Charset ?) More info Sends response to the client after serializing using given SerializationFormat and Charset . Parameters \u00b6 jvm code Status code of the response. content Content of the response. serializationFormat Serialization format for serializing the response. charset Character Set to be used for the content type. [jvm] Content fun send (code: Int , content: Any , contentType: ContentType) More info Sends response to the client after serializing using given ContentType instance. Parameters \u00b6 jvm code Status code of the response. content Content of the response. contentType Content type of the response.","title":"Send"},{"location":"port_http_server/com.hexagonkt.http.server/-call/send/#send","text":"[jvm] Content fun send (code: Int , content: Any = \"\", contentType: String ? = null) More info Sends response to the client.","title":"send"},{"location":"port_http_server/com.hexagonkt.http.server/-call/send/#parameters","text":"jvm code Status code of the response. content Content of the response. contentType Content type of the response. [jvm] Content fun send (code: Int , content: Any , serializationFormat: SerializationFormat, charset: Charset ?) More info Sends response to the client after serializing using given SerializationFormat and Charset .","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-call/send/#parameters_1","text":"jvm code Status code of the response. content Content of the response. serializationFormat Serialization format for serializing the response. charset Character Set to be used for the content type. [jvm] Content fun send (code: Int , content: Any , contentType: ContentType) More info Sends response to the client after serializing using given ContentType instance.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-call/send/#parameters_2","text":"jvm code Status code of the response. content Content of the response. contentType Content type of the response.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-call/session/","text":"// port_http_server / com.hexagonkt.http.server / Call / session session \u00b6 [jvm] Content val session : Session","title":"Session"},{"location":"port_http_server/com.hexagonkt.http.server/-call/session/#session","text":"[jvm] Content val session : Session","title":"session"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/","text":"// port_http_server / com.hexagonkt.http.server / CorsSettings CorsSettings \u00b6 [jvm] data class CorsSettings ( allowedOrigin : Regex , allowedMethods : Set , allowedHeaders : Set < String >, exposedHeaders : Set < String >, supportCredentials : Boolean , preFlightStatus : Int , preFlightMaxAge : Long ) HTTP CORS setting. It holds info for CORS. Constructors \u00b6 CorsSettings [jvm] fun CorsSettings (allowedOrigin: String = \"*\", allowedMethods: Set = ALL, allowedHeaders: Set < String > = emptySet(), exposedHeaders: Set < String > = emptySet(), supportCredentials: Boolean = true, preFlightStatus: Int = 204, preFlightMaxAge: Long = 0) CorsSettings [jvm] fun CorsSettings (allowedOrigin: Regex , allowedMethods: Set = ALL, allowedHeaders: Set < String > = emptySet(), exposedHeaders: Set < String > = emptySet(), supportCredentials: Boolean = true, preFlightStatus: Int = 204, preFlightMaxAge: Long = 0) Functions \u00b6 Name Summary accessControlAllowOrigin [jvm] Content fun accessControlAllowOrigin (origin: String ): String More info Provides the origin based on access control check for CORS. allowOrigin [jvm] Content fun allowOrigin (origin: String ): Boolean More info Checks whether given origin is allowed. Properties \u00b6 Name Summary allowedHeaders [jvm] val allowedHeaders : Set < String > allowedMethods [jvm] val allowedMethods : Set allowedOrigin [jvm] val allowedOrigin : Regex exposedHeaders [jvm] val exposedHeaders : Set < String > preFlightMaxAge [jvm] val preFlightMaxAge : Long = 0 preFlightStatus [jvm] val preFlightStatus : Int = 204 supportCredentials [jvm] val supportCredentials : Boolean = true","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/#corssettings","text":"[jvm] data class CorsSettings ( allowedOrigin : Regex , allowedMethods : Set , allowedHeaders : Set < String >, exposedHeaders : Set < String >, supportCredentials : Boolean , preFlightStatus : Int , preFlightMaxAge : Long ) HTTP CORS setting. It holds info for CORS.","title":"CorsSettings"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/#constructors","text":"CorsSettings [jvm] fun CorsSettings (allowedOrigin: String = \"*\", allowedMethods: Set = ALL, allowedHeaders: Set < String > = emptySet(), exposedHeaders: Set < String > = emptySet(), supportCredentials: Boolean = true, preFlightStatus: Int = 204, preFlightMaxAge: Long = 0) CorsSettings [jvm] fun CorsSettings (allowedOrigin: Regex , allowedMethods: Set = ALL, allowedHeaders: Set < String > = emptySet(), exposedHeaders: Set < String > = emptySet(), supportCredentials: Boolean = true, preFlightStatus: Int = 204, preFlightMaxAge: Long = 0)","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/#functions","text":"Name Summary accessControlAllowOrigin [jvm] Content fun accessControlAllowOrigin (origin: String ): String More info Provides the origin based on access control check for CORS. allowOrigin [jvm] Content fun allowOrigin (origin: String ): Boolean More info Checks whether given origin is allowed.","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/#properties","text":"Name Summary allowedHeaders [jvm] val allowedHeaders : Set < String > allowedMethods [jvm] val allowedMethods : Set allowedOrigin [jvm] val allowedOrigin : Regex exposedHeaders [jvm] val exposedHeaders : Set < String > preFlightMaxAge [jvm] val preFlightMaxAge : Long = 0 preFlightStatus [jvm] val preFlightStatus : Int = 204 supportCredentials [jvm] val supportCredentials : Boolean = true","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/-cors-settings/","text":"// port_http_server / com.hexagonkt.http.server / CorsSettings / CorsSettings CorsSettings \u00b6 [jvm] Content fun CorsSettings (allowedOrigin: String = \"*\", allowedMethods: Set = ALL, allowedHeaders: Set < String > = emptySet(), exposedHeaders: Set < String > = emptySet(), supportCredentials: Boolean = true, preFlightStatus: Int = 204, preFlightMaxAge: Long = 0) fun CorsSettings (allowedOrigin: Regex , allowedMethods: Set = ALL, allowedHeaders: Set < String > = emptySet(), exposedHeaders: Set < String > = emptySet(), supportCredentials: Boolean = true, preFlightStatus: Int = 204, preFlightMaxAge: Long = 0)","title":" cors settings"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/-cors-settings/#corssettings","text":"[jvm] Content fun CorsSettings (allowedOrigin: String = \"*\", allowedMethods: Set = ALL, allowedHeaders: Set < String > = emptySet(), exposedHeaders: Set < String > = emptySet(), supportCredentials: Boolean = true, preFlightStatus: Int = 204, preFlightMaxAge: Long = 0) fun CorsSettings (allowedOrigin: Regex , allowedMethods: Set = ALL, allowedHeaders: Set < String > = emptySet(), exposedHeaders: Set < String > = emptySet(), supportCredentials: Boolean = true, preFlightStatus: Int = 204, preFlightMaxAge: Long = 0)","title":"CorsSettings"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/access-control-allow-origin/","text":"// port_http_server / com.hexagonkt.http.server / CorsSettings / accessControlAllowOrigin accessControlAllowOrigin \u00b6 [jvm] Content fun accessControlAllowOrigin (origin: String ): String More info Provides the origin based on access control check for CORS.","title":"Access control allow origin"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/access-control-allow-origin/#accesscontrolalloworigin","text":"[jvm] Content fun accessControlAllowOrigin (origin: String ): String More info Provides the origin based on access control check for CORS.","title":"accessControlAllowOrigin"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/allow-origin/","text":"// port_http_server / com.hexagonkt.http.server / CorsSettings / allowOrigin allowOrigin \u00b6 [jvm] Content fun allowOrigin (origin: String ): Boolean More info Checks whether given origin is allowed. Return \u00b6 True, if given origin is allowed, else false.","title":"Allow origin"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/allow-origin/#alloworigin","text":"[jvm] Content fun allowOrigin (origin: String ): Boolean More info Checks whether given origin is allowed.","title":"allowOrigin"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/allow-origin/#return","text":"True, if given origin is allowed, else false.","title":"Return"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/allowed-headers/","text":"// port_http_server / com.hexagonkt.http.server / CorsSettings / allowedHeaders allowedHeaders \u00b6 [jvm] Content val allowedHeaders : Set < String >","title":"Allowed headers"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/allowed-headers/#allowedheaders","text":"[jvm] Content val allowedHeaders : Set < String >","title":"allowedHeaders"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/allowed-methods/","text":"// port_http_server / com.hexagonkt.http.server / CorsSettings / allowedMethods allowedMethods \u00b6 [jvm] Content val allowedMethods : Set","title":"Allowed methods"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/allowed-methods/#allowedmethods","text":"[jvm] Content val allowedMethods : Set","title":"allowedMethods"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/allowed-origin/","text":"// port_http_server / com.hexagonkt.http.server / CorsSettings / allowedOrigin allowedOrigin \u00b6 [jvm] Content val allowedOrigin : Regex","title":"Allowed origin"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/allowed-origin/#allowedorigin","text":"[jvm] Content val allowedOrigin : Regex","title":"allowedOrigin"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/exposed-headers/","text":"// port_http_server / com.hexagonkt.http.server / CorsSettings / exposedHeaders exposedHeaders \u00b6 [jvm] Content val exposedHeaders : Set < String >","title":"Exposed headers"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/exposed-headers/#exposedheaders","text":"[jvm] Content val exposedHeaders : Set < String >","title":"exposedHeaders"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/pre-flight-max-age/","text":"// port_http_server / com.hexagonkt.http.server / CorsSettings / preFlightMaxAge preFlightMaxAge \u00b6 [jvm] Content val preFlightMaxAge : Long = 0","title":"Pre flight max age"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/pre-flight-max-age/#preflightmaxage","text":"[jvm] Content val preFlightMaxAge : Long = 0","title":"preFlightMaxAge"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/pre-flight-status/","text":"// port_http_server / com.hexagonkt.http.server / CorsSettings / preFlightStatus preFlightStatus \u00b6 [jvm] Content val preFlightStatus : Int = 204","title":"Pre flight status"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/pre-flight-status/#preflightstatus","text":"[jvm] Content val preFlightStatus : Int = 204","title":"preFlightStatus"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/support-credentials/","text":"// port_http_server / com.hexagonkt.http.server / CorsSettings / supportCredentials supportCredentials \u00b6 [jvm] Content val supportCredentials : Boolean = true","title":"Support credentials"},{"location":"port_http_server/com.hexagonkt.http.server/-cors-settings/support-credentials/#supportcredentials","text":"[jvm] Content val supportCredentials : Boolean = true","title":"supportCredentials"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/","text":"// port_http_server / com.hexagonkt.http.server / FilterOrder FilterOrder \u00b6 [jvm] enum FilterOrder : Enum < FilterOrder > Type of filter. Indicates when the filter is executed. Entries \u00b6 BEFORE [jvm] BEFORE () Filter executed before the route is processed. AFTER [jvm] AFTER () Filter executed after the route is processed. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/#filterorder","text":"[jvm] enum FilterOrder : Enum < FilterOrder > Type of filter. Indicates when the filter is executed.","title":"FilterOrder"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/#entries","text":"BEFORE [jvm] BEFORE () Filter executed before the route is processed. AFTER [jvm] AFTER () Filter executed after the route is processed.","title":"Entries"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/-a-f-t-e-r/","text":"// port_http_server / com.hexagonkt.http.server / FilterOrder / AFTER AFTER \u00b6 [jvm] AFTER () Filter executed after the route is processed. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/-a-f-t-e-r/#after","text":"[jvm] AFTER () Filter executed after the route is processed.","title":"AFTER"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/-a-f-t-e-r/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/-a-f-t-e-r/name/","text":"// port_http_server / com.hexagonkt.http.server / FilterOrder / AFTER / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/-a-f-t-e-r/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/-a-f-t-e-r/ordinal/","text":"// port_http_server / com.hexagonkt.http.server / FilterOrder / AFTER / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/-a-f-t-e-r/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/-b-e-f-o-r-e/","text":"// port_http_server / com.hexagonkt.http.server / FilterOrder / BEFORE BEFORE \u00b6 [jvm] BEFORE () Filter executed before the route is processed. Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/-b-e-f-o-r-e/#before","text":"[jvm] BEFORE () Filter executed before the route is processed.","title":"BEFORE"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/-b-e-f-o-r-e/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/-b-e-f-o-r-e/name/","text":"// port_http_server / com.hexagonkt.http.server / FilterOrder / BEFORE / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/-b-e-f-o-r-e/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/-b-e-f-o-r-e/ordinal/","text":"// port_http_server / com.hexagonkt.http.server / FilterOrder / BEFORE / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"port_http_server/com.hexagonkt.http.server/-filter-order/-b-e-f-o-r-e/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/","text":"// port_http_server / com.hexagonkt.http.server / PortHttpServerSamplesTest PortHttpServerSamplesTest \u00b6 [jvm] abstract class PortHttpServerSamplesTest ( adapter : ServerPort ) Functions \u00b6 Name Summary callbacks [jvm] Content fun callbacks () errors [jvm] Content fun errors () files [jvm] Content fun files () filters [jvm] Content fun filters () initialize [jvm] Content fun initialize () routeGroups [jvm] Content fun routeGroups () routers [jvm] Content fun routers () routesCreation [jvm] Content fun routesCreation () serverCreation [jvm] Content fun serverCreation () test [jvm] Content fun test () Properties \u00b6 Name Summary adapter [jvm] val adapter : ServerPort","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/#porthttpserversamplestest","text":"[jvm] abstract class PortHttpServerSamplesTest ( adapter : ServerPort )","title":"PortHttpServerSamplesTest"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/#functions","text":"Name Summary callbacks [jvm] Content fun callbacks () errors [jvm] Content fun errors () files [jvm] Content fun files () filters [jvm] Content fun filters () initialize [jvm] Content fun initialize () routeGroups [jvm] Content fun routeGroups () routers [jvm] Content fun routers () routesCreation [jvm] Content fun routesCreation () serverCreation [jvm] Content fun serverCreation () test [jvm] Content fun test ()","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/#properties","text":"Name Summary adapter [jvm] val adapter : ServerPort","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/-port-http-server-samples-test/","text":"// port_http_server / com.hexagonkt.http.server / PortHttpServerSamplesTest / PortHttpServerSamplesTest PortHttpServerSamplesTest \u00b6 [jvm] Content fun PortHttpServerSamplesTest (adapter: ServerPort )","title":" port http server samples test"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/-port-http-server-samples-test/#porthttpserversamplestest","text":"[jvm] Content fun PortHttpServerSamplesTest (adapter: ServerPort )","title":"PortHttpServerSamplesTest"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/adapter/","text":"// port_http_server / com.hexagonkt.http.server / PortHttpServerSamplesTest / adapter adapter \u00b6 [jvm] Content val adapter : ServerPort","title":"Adapter"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/adapter/#adapter","text":"[jvm] Content val adapter : ServerPort","title":"adapter"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/callbacks/","text":"// port_http_server / com.hexagonkt.http.server / PortHttpServerSamplesTest / callbacks callbacks \u00b6 [jvm] Content fun callbacks ()","title":"Callbacks"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/callbacks/#callbacks","text":"[jvm] Content fun callbacks ()","title":"callbacks"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/errors/","text":"// port_http_server / com.hexagonkt.http.server / PortHttpServerSamplesTest / errors errors \u00b6 [jvm] Content fun errors ()","title":"Errors"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/errors/#errors","text":"[jvm] Content fun errors ()","title":"errors"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/files/","text":"// port_http_server / com.hexagonkt.http.server / PortHttpServerSamplesTest / files files \u00b6 [jvm] Content fun files ()","title":"Files"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/files/#files","text":"[jvm] Content fun files ()","title":"files"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/filters/","text":"// port_http_server / com.hexagonkt.http.server / PortHttpServerSamplesTest / filters filters \u00b6 [jvm] Content fun filters ()","title":"Filters"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/filters/#filters","text":"[jvm] Content fun filters ()","title":"filters"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/initialize/","text":"// port_http_server / com.hexagonkt.http.server / PortHttpServerSamplesTest / initialize initialize \u00b6 [jvm] Content fun initialize ()","title":"Initialize"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/initialize/#initialize","text":"[jvm] Content fun initialize ()","title":"initialize"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/route-groups/","text":"// port_http_server / com.hexagonkt.http.server / PortHttpServerSamplesTest / routeGroups routeGroups \u00b6 [jvm] Content fun routeGroups ()","title":"Route groups"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/route-groups/#routegroups","text":"[jvm] Content fun routeGroups ()","title":"routeGroups"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/routers/","text":"// port_http_server / com.hexagonkt.http.server / PortHttpServerSamplesTest / routers routers \u00b6 [jvm] Content fun routers ()","title":"Routers"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/routers/#routers","text":"[jvm] Content fun routers ()","title":"routers"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/routes-creation/","text":"// port_http_server / com.hexagonkt.http.server / PortHttpServerSamplesTest / routesCreation routesCreation \u00b6 [jvm] Content fun routesCreation ()","title":"Routes creation"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/routes-creation/#routescreation","text":"[jvm] Content fun routesCreation ()","title":"routesCreation"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/server-creation/","text":"// port_http_server / com.hexagonkt.http.server / PortHttpServerSamplesTest / serverCreation serverCreation \u00b6 [jvm] Content fun serverCreation ()","title":"Server creation"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/server-creation/#servercreation","text":"[jvm] Content fun serverCreation ()","title":"serverCreation"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/test/","text":"// port_http_server / com.hexagonkt.http.server / PortHttpServerSamplesTest / test test \u00b6 [jvm] Content fun test ()","title":"Test"},{"location":"port_http_server/com.hexagonkt.http.server/-port-http-server-samples-test/test/#test","text":"[jvm] Content fun test ()","title":"test"},{"location":"port_http_server/com.hexagonkt.http.server/-request/","text":"// port_http_server / com.hexagonkt.http.server / Request Request \u00b6 [jvm] class Request ( adapter : RequestPort ) Lists would be initialized loading all elements when they are used (set it as lazy in implementations) this will have a performance penalty in favor of ease of use. The alternative would be using a 'Map/List wrapper that delegates calls to abstract methods in the interface (I won't do this just now). HTTP request context. It holds client supplied data and methods to change the response. Constructors \u00b6 Request [jvm] fun Request (adapter: RequestPort ) Functions \u00b6 Name Summary body [jvm] Content inline fun < T : Any > body (): T More info Parses request body. [jvm] Content fun < T : Any > body (type: KClass < T >): T More info Parses request body according to given type . bodyObjects [jvm] Content inline fun < T : Any > bodyObjects (): List < T > More info Parses request body objects. [jvm] Content fun < T : Any > bodyObjects (type: KClass < T >): List < T > More info Parses request body objects to given type . parseAllParameters [jvm] Content fun < T : Any > parseAllParameters (type: KClass < T >): T ? More info This function aggregates path parameters, form parameters and query parameters into a map and convert it into given class using object mapper Usage : request. Properties \u00b6 Name Summary accept [jvm] val accept : String ?First value in \"Accept\" header key. acceptValues [jvm] val acceptValues : List < String > List of parameters for \"Accept\" header key. body [jvm] val body : String Request body sent by the client. certificate [jvm] val certificate : X509Certificate ?First certificate in the certificateChain . certificateChain [jvm] val certificateChain : List < X509Certificate >Provides a List of certificate chain used for SSL. contentLength [jvm] val contentLength : Long Length of the request body. contentType [jvm] val contentType : String ?Content type of the request body. cookies [jvm] val cookies : Map < String , Cookie> Map of the cookies contained in the browser. formParameters [jvm] val formParameters : Map < String , String >Provides a Map of first values of all form fields. formParametersValues [jvm] val formParametersValues : Map < String , List < String >>Provides Map of request parameters contained in form fields. headers [jvm] val headers : Map < String , String > Map of first values of the headers of the request. headersValues [jvm] val headersValues : Map < String , List < String >> Map of header values of the request. host [jvm] val host : String Provides the fully qualified name of the client. ip [jvm] val ip : String Provides the client IP address. method [jvm] val method : MethodProvides the HTTP method of the request. origin [jvm] val origin : String ?First value of \"Origin\" header key. parts [jvm] val parts : Map < String , Part>Provides a Map of multipart parts in the request. path [jvm] val path : String Provides the servlet path of the request. pathParameters [jvm] val pathParameters : Map < String , String >Provides a Map of all path parameters. port [jvm] val port : Int Provides the port number used to make the request. preferredType [jvm] val preferredType : String ?Preferred content-type specified under \"Accept\" header key. queryParameters [jvm] val queryParameters : Map < String , String >Provides a Map of first values of all query parameters in the request. queryParametersValues [jvm] val queryParametersValues : Map < String , List < String >>Provides Map of parsed key-value pairs of query parameters in the request. queryString [jvm] val queryString : String Provides the query string of the request. referer [jvm] val referer : String ?First value of \"Referer\" header key. scheme [jvm] val scheme : String Provides the name of the scheme used to make this request. secure [jvm] val secure : Boolean Check if the request is secure. url [jvm] val url : String Provides the URL client used to make the request. userAgent [jvm] val userAgent : String ?First value of \"User-Agent\" header key.","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-request/#request","text":"[jvm] class Request ( adapter : RequestPort ) Lists would be initialized loading all elements when they are used (set it as lazy in implementations) this will have a performance penalty in favor of ease of use. The alternative would be using a 'Map/List wrapper that delegates calls to abstract methods in the interface (I won't do this just now). HTTP request context. It holds client supplied data and methods to change the response.","title":"Request"},{"location":"port_http_server/com.hexagonkt.http.server/-request/#constructors","text":"Request [jvm] fun Request (adapter: RequestPort )","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-request/#functions","text":"Name Summary body [jvm] Content inline fun < T : Any > body (): T More info Parses request body. [jvm] Content fun < T : Any > body (type: KClass < T >): T More info Parses request body according to given type . bodyObjects [jvm] Content inline fun < T : Any > bodyObjects (): List < T > More info Parses request body objects. [jvm] Content fun < T : Any > bodyObjects (type: KClass < T >): List < T > More info Parses request body objects to given type . parseAllParameters [jvm] Content fun < T : Any > parseAllParameters (type: KClass < T >): T ? More info This function aggregates path parameters, form parameters and query parameters into a map and convert it into given class using object mapper Usage : request.","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server/-request/#properties","text":"Name Summary accept [jvm] val accept : String ?First value in \"Accept\" header key. acceptValues [jvm] val acceptValues : List < String > List of parameters for \"Accept\" header key. body [jvm] val body : String Request body sent by the client. certificate [jvm] val certificate : X509Certificate ?First certificate in the certificateChain . certificateChain [jvm] val certificateChain : List < X509Certificate >Provides a List of certificate chain used for SSL. contentLength [jvm] val contentLength : Long Length of the request body. contentType [jvm] val contentType : String ?Content type of the request body. cookies [jvm] val cookies : Map < String , Cookie> Map of the cookies contained in the browser. formParameters [jvm] val formParameters : Map < String , String >Provides a Map of first values of all form fields. formParametersValues [jvm] val formParametersValues : Map < String , List < String >>Provides Map of request parameters contained in form fields. headers [jvm] val headers : Map < String , String > Map of first values of the headers of the request. headersValues [jvm] val headersValues : Map < String , List < String >> Map of header values of the request. host [jvm] val host : String Provides the fully qualified name of the client. ip [jvm] val ip : String Provides the client IP address. method [jvm] val method : MethodProvides the HTTP method of the request. origin [jvm] val origin : String ?First value of \"Origin\" header key. parts [jvm] val parts : Map < String , Part>Provides a Map of multipart parts in the request. path [jvm] val path : String Provides the servlet path of the request. pathParameters [jvm] val pathParameters : Map < String , String >Provides a Map of all path parameters. port [jvm] val port : Int Provides the port number used to make the request. preferredType [jvm] val preferredType : String ?Preferred content-type specified under \"Accept\" header key. queryParameters [jvm] val queryParameters : Map < String , String >Provides a Map of first values of all query parameters in the request. queryParametersValues [jvm] val queryParametersValues : Map < String , List < String >>Provides Map of parsed key-value pairs of query parameters in the request. queryString [jvm] val queryString : String Provides the query string of the request. referer [jvm] val referer : String ?First value of \"Referer\" header key. scheme [jvm] val scheme : String Provides the name of the scheme used to make this request. secure [jvm] val secure : Boolean Check if the request is secure. url [jvm] val url : String Provides the URL client used to make the request. userAgent [jvm] val userAgent : String ?First value of \"User-Agent\" header key.","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-request/-request/","text":"// port_http_server / com.hexagonkt.http.server / Request / Request Request \u00b6 [jvm] Content fun Request (adapter: RequestPort )","title":" request"},{"location":"port_http_server/com.hexagonkt.http.server/-request/-request/#request","text":"[jvm] Content fun Request (adapter: RequestPort )","title":"Request"},{"location":"port_http_server/com.hexagonkt.http.server/-request/accept-values/","text":"// port_http_server / com.hexagonkt.http.server / Request / acceptValues acceptValues \u00b6 [jvm] Content val acceptValues : List < String > More info List of parameters for \"Accept\" header key.","title":"Accept values"},{"location":"port_http_server/com.hexagonkt.http.server/-request/accept-values/#acceptvalues","text":"[jvm] Content val acceptValues : List < String > More info List of parameters for \"Accept\" header key.","title":"acceptValues"},{"location":"port_http_server/com.hexagonkt.http.server/-request/accept/","text":"// port_http_server / com.hexagonkt.http.server / Request / accept accept \u00b6 [jvm] Content val accept : String ? More info First value in \"Accept\" header key.","title":"Accept"},{"location":"port_http_server/com.hexagonkt.http.server/-request/accept/#accept","text":"[jvm] Content val accept : String ? More info First value in \"Accept\" header key.","title":"accept"},{"location":"port_http_server/com.hexagonkt.http.server/-request/body-objects/","text":"// port_http_server / com.hexagonkt.http.server / Request / bodyObjects bodyObjects \u00b6 [jvm] Content fun < T : Any > bodyObjects (type: KClass < T >): List < T > More info Parses request body objects to given type . Parameters \u00b6 jvm type Class specifying the type to which the objects are to be parsed [jvm] Content inline fun < T : Any > bodyObjects (): List < T > More info Parses request body objects.","title":"Body objects"},{"location":"port_http_server/com.hexagonkt.http.server/-request/body-objects/#bodyobjects","text":"[jvm] Content fun < T : Any > bodyObjects (type: KClass < T >): List < T > More info Parses request body objects to given type .","title":"bodyObjects"},{"location":"port_http_server/com.hexagonkt.http.server/-request/body-objects/#parameters","text":"jvm type Class specifying the type to which the objects are to be parsed [jvm] Content inline fun < T : Any > bodyObjects (): List < T > More info Parses request body objects.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request/body/","text":"// port_http_server / com.hexagonkt.http.server / Request / body body \u00b6 [jvm] Content fun < T : Any > body (type: KClass < T >): T More info Parses request body according to given type . Parameters \u00b6 jvm type Class specifying the type to which the body is to be parsed [jvm] Content inline fun < T : Any > body (): T More info Parses request body. [jvm] Content val body : String More info Request body sent by the client.","title":"Body"},{"location":"port_http_server/com.hexagonkt.http.server/-request/body/#body","text":"[jvm] Content fun < T : Any > body (type: KClass < T >): T More info Parses request body according to given type .","title":"body"},{"location":"port_http_server/com.hexagonkt.http.server/-request/body/#parameters","text":"jvm type Class specifying the type to which the body is to be parsed [jvm] Content inline fun < T : Any > body (): T More info Parses request body. [jvm] Content val body : String More info Request body sent by the client.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request/certificate-chain/","text":"// port_http_server / com.hexagonkt.http.server / Request / certificateChain certificateChain \u00b6 [jvm] Content val certificateChain : List < X509Certificate > More info Provides a List of certificate chain used for SSL.","title":"Certificate chain"},{"location":"port_http_server/com.hexagonkt.http.server/-request/certificate-chain/#certificatechain","text":"[jvm] Content val certificateChain : List < X509Certificate > More info Provides a List of certificate chain used for SSL.","title":"certificateChain"},{"location":"port_http_server/com.hexagonkt.http.server/-request/certificate/","text":"// port_http_server / com.hexagonkt.http.server / Request / certificate certificate \u00b6 [jvm] Content val certificate : X509Certificate ? More info First certificate in the certificateChain .","title":"Certificate"},{"location":"port_http_server/com.hexagonkt.http.server/-request/certificate/#certificate","text":"[jvm] Content val certificate : X509Certificate ? More info First certificate in the certificateChain .","title":"certificate"},{"location":"port_http_server/com.hexagonkt.http.server/-request/content-length/","text":"// port_http_server / com.hexagonkt.http.server / Request / contentLength contentLength \u00b6 [jvm] Content val contentLength : Long More info Length of the request body.","title":"Content length"},{"location":"port_http_server/com.hexagonkt.http.server/-request/content-length/#contentlength","text":"[jvm] Content val contentLength : Long More info Length of the request body.","title":"contentLength"},{"location":"port_http_server/com.hexagonkt.http.server/-request/content-type/","text":"// port_http_server / com.hexagonkt.http.server / Request / contentType contentType \u00b6 [jvm] Content val contentType : String ? More info Content type of the request body.","title":"Content type"},{"location":"port_http_server/com.hexagonkt.http.server/-request/content-type/#contenttype","text":"[jvm] Content val contentType : String ? More info Content type of the request body.","title":"contentType"},{"location":"port_http_server/com.hexagonkt.http.server/-request/cookies/","text":"// port_http_server / com.hexagonkt.http.server / Request / cookies cookies \u00b6 [jvm] Content val cookies : Map < String , Cookie> More info Map of the cookies contained in the browser.","title":"Cookies"},{"location":"port_http_server/com.hexagonkt.http.server/-request/cookies/#cookies","text":"[jvm] Content val cookies : Map < String , Cookie> More info Map of the cookies contained in the browser.","title":"cookies"},{"location":"port_http_server/com.hexagonkt.http.server/-request/form-parameters-values/","text":"// port_http_server / com.hexagonkt.http.server / Request / formParametersValues formParametersValues \u00b6 [jvm] Content val formParametersValues : Map < String , List < String >> More info Provides Map of request parameters contained in form fields.","title":"Form parameters values"},{"location":"port_http_server/com.hexagonkt.http.server/-request/form-parameters-values/#formparametersvalues","text":"[jvm] Content val formParametersValues : Map < String , List < String >> More info Provides Map of request parameters contained in form fields.","title":"formParametersValues"},{"location":"port_http_server/com.hexagonkt.http.server/-request/form-parameters/","text":"// port_http_server / com.hexagonkt.http.server / Request / formParameters formParameters \u00b6 [jvm] Content val formParameters : Map < String , String > More info Provides a Map of first values of all form fields.","title":"Form parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request/form-parameters/#formparameters","text":"[jvm] Content val formParameters : Map < String , String > More info Provides a Map of first values of all form fields.","title":"formParameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request/headers-values/","text":"// port_http_server / com.hexagonkt.http.server / Request / headersValues headersValues \u00b6 [jvm] Content val headersValues : Map < String , List < String >> More info Map of header values of the request.","title":"Headers values"},{"location":"port_http_server/com.hexagonkt.http.server/-request/headers-values/#headersvalues","text":"[jvm] Content val headersValues : Map < String , List < String >> More info Map of header values of the request.","title":"headersValues"},{"location":"port_http_server/com.hexagonkt.http.server/-request/headers/","text":"// port_http_server / com.hexagonkt.http.server / Request / headers headers \u00b6 [jvm] Content val headers : Map < String , String > More info Map of first values of the headers of the request.","title":"Headers"},{"location":"port_http_server/com.hexagonkt.http.server/-request/headers/#headers","text":"[jvm] Content val headers : Map < String , String > More info Map of first values of the headers of the request.","title":"headers"},{"location":"port_http_server/com.hexagonkt.http.server/-request/host/","text":"// port_http_server / com.hexagonkt.http.server / Request / host host \u00b6 [jvm] Content val host : String More info Provides the fully qualified name of the client.","title":"Host"},{"location":"port_http_server/com.hexagonkt.http.server/-request/host/#host","text":"[jvm] Content val host : String More info Provides the fully qualified name of the client.","title":"host"},{"location":"port_http_server/com.hexagonkt.http.server/-request/ip/","text":"// port_http_server / com.hexagonkt.http.server / Request / ip ip \u00b6 [jvm] Content val ip : String More info Provides the client IP address.","title":"Ip"},{"location":"port_http_server/com.hexagonkt.http.server/-request/ip/#ip","text":"[jvm] Content val ip : String More info Provides the client IP address.","title":"ip"},{"location":"port_http_server/com.hexagonkt.http.server/-request/method/","text":"// port_http_server / com.hexagonkt.http.server / Request / method method \u00b6 [jvm] Content val method : Method More info Provides the HTTP method of the request.","title":"Method"},{"location":"port_http_server/com.hexagonkt.http.server/-request/method/#method","text":"[jvm] Content val method : Method More info Provides the HTTP method of the request.","title":"method"},{"location":"port_http_server/com.hexagonkt.http.server/-request/origin/","text":"// port_http_server / com.hexagonkt.http.server / Request / origin origin \u00b6 [jvm] Content val origin : String ? More info First value of \"Origin\" header key.","title":"Origin"},{"location":"port_http_server/com.hexagonkt.http.server/-request/origin/#origin","text":"[jvm] Content val origin : String ? More info First value of \"Origin\" header key.","title":"origin"},{"location":"port_http_server/com.hexagonkt.http.server/-request/parse-all-parameters/","text":"// port_http_server / com.hexagonkt.http.server / Request / parseAllParameters parseAllParameters \u00b6 [jvm] Content fun < T : Any > parseAllParameters (type: KClass < T >): T ? More info This function aggregates path parameters, form parameters and query parameters into a map and convert it into given class using object mapper Usage : request.parseAllParameters(MyCustomDataClass::class) Return \u00b6 an object of type T (eg: MyCustomDataClass()) Parameters \u00b6 jvm type is the KotlinClass of type T (where T can be any class eg:MyCustomDataClass)","title":"Parse all parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request/parse-all-parameters/#parseallparameters","text":"[jvm] Content fun < T : Any > parseAllParameters (type: KClass < T >): T ? More info This function aggregates path parameters, form parameters and query parameters into a map and convert it into given class using object mapper Usage : request.parseAllParameters(MyCustomDataClass::class)","title":"parseAllParameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request/parse-all-parameters/#return","text":"an object of type T (eg: MyCustomDataClass())","title":"Return"},{"location":"port_http_server/com.hexagonkt.http.server/-request/parse-all-parameters/#parameters","text":"jvm type is the KotlinClass of type T (where T can be any class eg:MyCustomDataClass)","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request/parts/","text":"// port_http_server / com.hexagonkt.http.server / Request / parts parts \u00b6 [jvm] Content val parts : Map < String , Part> More info Provides a Map of multipart parts in the request.","title":"Parts"},{"location":"port_http_server/com.hexagonkt.http.server/-request/parts/#parts","text":"[jvm] Content val parts : Map < String , Part> More info Provides a Map of multipart parts in the request.","title":"parts"},{"location":"port_http_server/com.hexagonkt.http.server/-request/path-parameters/","text":"// port_http_server / com.hexagonkt.http.server / Request / pathParameters pathParameters \u00b6 [jvm] Content val pathParameters : Map < String , String > More info Provides a Map of all path parameters.","title":"Path parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request/path-parameters/#pathparameters","text":"[jvm] Content val pathParameters : Map < String , String > More info Provides a Map of all path parameters.","title":"pathParameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request/path/","text":"// port_http_server / com.hexagonkt.http.server / Request / path path \u00b6 [jvm] Content val path : String More info Provides the servlet path of the request.","title":"Path"},{"location":"port_http_server/com.hexagonkt.http.server/-request/path/#path","text":"[jvm] Content val path : String More info Provides the servlet path of the request.","title":"path"},{"location":"port_http_server/com.hexagonkt.http.server/-request/port/","text":"// port_http_server / com.hexagonkt.http.server / Request / port port \u00b6 [jvm] Content val port : Int More info Provides the port number used to make the request.","title":"Port"},{"location":"port_http_server/com.hexagonkt.http.server/-request/port/#port","text":"[jvm] Content val port : Int More info Provides the port number used to make the request.","title":"port"},{"location":"port_http_server/com.hexagonkt.http.server/-request/preferred-type/","text":"// port_http_server / com.hexagonkt.http.server / Request / preferredType preferredType \u00b6 [jvm] Content val preferredType : String ? More info Preferred content-type specified under \"Accept\" header key.","title":"Preferred type"},{"location":"port_http_server/com.hexagonkt.http.server/-request/preferred-type/#preferredtype","text":"[jvm] Content val preferredType : String ? More info Preferred content-type specified under \"Accept\" header key.","title":"preferredType"},{"location":"port_http_server/com.hexagonkt.http.server/-request/query-parameters-values/","text":"// port_http_server / com.hexagonkt.http.server / Request / queryParametersValues queryParametersValues \u00b6 [jvm] Content val queryParametersValues : Map < String , List < String >> More info Provides Map of parsed key-value pairs of query parameters in the request.","title":"Query parameters values"},{"location":"port_http_server/com.hexagonkt.http.server/-request/query-parameters-values/#queryparametersvalues","text":"[jvm] Content val queryParametersValues : Map < String , List < String >> More info Provides Map of parsed key-value pairs of query parameters in the request.","title":"queryParametersValues"},{"location":"port_http_server/com.hexagonkt.http.server/-request/query-parameters/","text":"// port_http_server / com.hexagonkt.http.server / Request / queryParameters queryParameters \u00b6 [jvm] Content val queryParameters : Map < String , String > More info Provides a Map of first values of all query parameters in the request.","title":"Query parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request/query-parameters/#queryparameters","text":"[jvm] Content val queryParameters : Map < String , String > More info Provides a Map of first values of all query parameters in the request.","title":"queryParameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request/query-string/","text":"// port_http_server / com.hexagonkt.http.server / Request / queryString queryString \u00b6 [jvm] Content val queryString : String More info Provides the query string of the request.","title":"Query string"},{"location":"port_http_server/com.hexagonkt.http.server/-request/query-string/#querystring","text":"[jvm] Content val queryString : String More info Provides the query string of the request.","title":"queryString"},{"location":"port_http_server/com.hexagonkt.http.server/-request/referer/","text":"// port_http_server / com.hexagonkt.http.server / Request / referer referer \u00b6 [jvm] Content val referer : String ? More info First value of \"Referer\" header key.","title":"Referer"},{"location":"port_http_server/com.hexagonkt.http.server/-request/referer/#referer","text":"[jvm] Content val referer : String ? More info First value of \"Referer\" header key.","title":"referer"},{"location":"port_http_server/com.hexagonkt.http.server/-request/scheme/","text":"// port_http_server / com.hexagonkt.http.server / Request / scheme scheme \u00b6 [jvm] Content val scheme : String More info Provides the name of the scheme used to make this request.","title":"Scheme"},{"location":"port_http_server/com.hexagonkt.http.server/-request/scheme/#scheme","text":"[jvm] Content val scheme : String More info Provides the name of the scheme used to make this request.","title":"scheme"},{"location":"port_http_server/com.hexagonkt.http.server/-request/secure/","text":"// port_http_server / com.hexagonkt.http.server / Request / secure secure \u00b6 [jvm] Content val secure : Boolean More info Check if the request is secure.","title":"Secure"},{"location":"port_http_server/com.hexagonkt.http.server/-request/secure/#secure","text":"[jvm] Content val secure : Boolean More info Check if the request is secure.","title":"secure"},{"location":"port_http_server/com.hexagonkt.http.server/-request/url/","text":"// port_http_server / com.hexagonkt.http.server / Request / url url \u00b6 [jvm] Content val url : String More info Provides the URL client used to make the request.","title":"Url"},{"location":"port_http_server/com.hexagonkt.http.server/-request/url/#url","text":"[jvm] Content val url : String More info Provides the URL client used to make the request.","title":"url"},{"location":"port_http_server/com.hexagonkt.http.server/-request/user-agent/","text":"// port_http_server / com.hexagonkt.http.server / Request / userAgent userAgent \u00b6 [jvm] Content val userAgent : String ? More info First value of \"User-Agent\" header key.","title":"User agent"},{"location":"port_http_server/com.hexagonkt.http.server/-request/user-agent/#useragent","text":"[jvm] Content val userAgent : String ? More info First value of \"User-Agent\" header key.","title":"userAgent"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler RequestHandler \u00b6 [jvm] sealed class RequestHandler Base class for request handlers. Types \u00b6 Name Summary CodeHandler [jvm] Content data class CodeHandler ( route : Route, code : Int , callback : ErrorCodeCallback ) : RequestHandler More info Handler for a given status code on the given route. ExceptionHandler [jvm] Content data class ExceptionHandler ( route : Route, exception : Class Exception >, callback : ExceptionCallback ) : RequestHandler More info Handler for exceptions on the given route. FileHandler [jvm] Content data class FileHandler ( route : Route, file : File ) : RequestHandler More info Handler for file. FilterHandler [jvm] Content data class FilterHandler ( route : Route, order : FilterOrder , callback : RouteCallback ) : RequestHandler More info Handler for given FilterOrder for executing the callback . PathHandler [jvm] Content data class PathHandler ( route : Route, router : Router ) : RequestHandler More info Handler for nested routes. ResourceHandler [jvm] Content data class ResourceHandler ( route : Route, resource : URL ) : RequestHandler More info Handler for URL resources. RouteHandler [jvm] Content data class RouteHandler ( route : Route, callback : RouteCallback ) : RequestHandler More info Handler for routes on HTTP methods. Properties \u00b6 Name Summary route [jvm] abstract val route : Route Inheritors \u00b6 Name RequestHandler RequestHandler RequestHandler RequestHandler RequestHandler RequestHandler RequestHandler","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/#requesthandler","text":"[jvm] sealed class RequestHandler Base class for request handlers.","title":"RequestHandler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/#types","text":"Name Summary CodeHandler [jvm] Content data class CodeHandler ( route : Route, code : Int , callback : ErrorCodeCallback ) : RequestHandler More info Handler for a given status code on the given route. ExceptionHandler [jvm] Content data class ExceptionHandler ( route : Route, exception : Class Exception >, callback : ExceptionCallback ) : RequestHandler More info Handler for exceptions on the given route. FileHandler [jvm] Content data class FileHandler ( route : Route, file : File ) : RequestHandler More info Handler for file. FilterHandler [jvm] Content data class FilterHandler ( route : Route, order : FilterOrder , callback : RouteCallback ) : RequestHandler More info Handler for given FilterOrder for executing the callback . PathHandler [jvm] Content data class PathHandler ( route : Route, router : Router ) : RequestHandler More info Handler for nested routes. ResourceHandler [jvm] Content data class ResourceHandler ( route : Route, resource : URL ) : RequestHandler More info Handler for URL resources. RouteHandler [jvm] Content data class RouteHandler ( route : Route, callback : RouteCallback ) : RequestHandler More info Handler for routes on HTTP methods.","title":"Types"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/#properties","text":"Name Summary route [jvm] abstract val route : Route","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/#inheritors","text":"Name RequestHandler RequestHandler RequestHandler RequestHandler RequestHandler RequestHandler RequestHandler","title":"Inheritors"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/route/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / route route \u00b6 [jvm] Content abstract val route : Route","title":"Route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/route/#route","text":"[jvm] Content abstract val route : Route","title":"route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / CodeHandler CodeHandler \u00b6 [jvm] data class CodeHandler ( route : Route, code : Int , callback : ErrorCodeCallback ) : RequestHandler Handler for a given status code on the given route. Constructors \u00b6 CodeHandler [jvm] fun CodeHandler (route: Route, code: Int , callback: ErrorCodeCallback ) Properties \u00b6 Name Summary callback [jvm] val callback : ErrorCodeCallback code [jvm] val code : Int route [jvm] open override val route : Route","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/#codehandler","text":"[jvm] data class CodeHandler ( route : Route, code : Int , callback : ErrorCodeCallback ) : RequestHandler Handler for a given status code on the given route.","title":"CodeHandler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/#constructors","text":"CodeHandler [jvm] fun CodeHandler (route: Route, code: Int , callback: ErrorCodeCallback )","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/#properties","text":"Name Summary callback [jvm] val callback : ErrorCodeCallback code [jvm] val code : Int route [jvm] open override val route : Route","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/-code-handler/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / CodeHandler / CodeHandler CodeHandler \u00b6 [jvm] Content fun CodeHandler (route: Route, code: Int , callback: ErrorCodeCallback )","title":" code handler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/-code-handler/#codehandler","text":"[jvm] Content fun CodeHandler (route: Route, code: Int , callback: ErrorCodeCallback )","title":"CodeHandler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/callback/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / CodeHandler / callback callback \u00b6 [jvm] Content val callback : ErrorCodeCallback","title":"Callback"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/callback/#callback","text":"[jvm] Content val callback : ErrorCodeCallback","title":"callback"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/code/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / CodeHandler / code code \u00b6 [jvm] Content val code : Int","title":"Code"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/code/#code","text":"[jvm] Content val code : Int","title":"code"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/route/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / CodeHandler / route route \u00b6 [jvm] Content open override val route : Route","title":"Route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-code-handler/route/#route","text":"[jvm] Content open override val route : Route","title":"route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / ExceptionHandler ExceptionHandler \u00b6 [jvm] data class ExceptionHandler ( route : Route, exception : Class Exception >, callback : ExceptionCallback ) : RequestHandler Handler for exceptions on the given route. Constructors \u00b6 ExceptionHandler [jvm] fun ExceptionHandler (route: Route, exception: Class Exception >, callback: ExceptionCallback ) Properties \u00b6 Name Summary callback [jvm] val callback : ExceptionCallback exception [jvm] val exception : Class Exception > route [jvm] open override val route : Route","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/#exceptionhandler","text":"[jvm] data class ExceptionHandler ( route : Route, exception : Class Exception >, callback : ExceptionCallback ) : RequestHandler Handler for exceptions on the given route.","title":"ExceptionHandler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/#constructors","text":"ExceptionHandler [jvm] fun ExceptionHandler (route: Route, exception: Class Exception >, callback: ExceptionCallback )","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/#properties","text":"Name Summary callback [jvm] val callback : ExceptionCallback exception [jvm] val exception : Class Exception > route [jvm] open override val route : Route","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/-exception-handler/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / ExceptionHandler / ExceptionHandler ExceptionHandler \u00b6 [jvm] Content fun ExceptionHandler (route: Route, exception: Class Exception >, callback: ExceptionCallback )","title":" exception handler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/-exception-handler/#exceptionhandler","text":"[jvm] Content fun ExceptionHandler (route: Route, exception: Class Exception >, callback: ExceptionCallback )","title":"ExceptionHandler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/callback/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / ExceptionHandler / callback callback \u00b6 [jvm] Content val callback : ExceptionCallback","title":"Callback"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/callback/#callback","text":"[jvm] Content val callback : ExceptionCallback","title":"callback"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/exception/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / ExceptionHandler / exception exception \u00b6 [jvm] Content val exception : Class Exception >","title":"Exception"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/exception/#exception","text":"[jvm] Content val exception : Class Exception >","title":"exception"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/route/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / ExceptionHandler / route route \u00b6 [jvm] Content open override val route : Route","title":"Route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-exception-handler/route/#route","text":"[jvm] Content open override val route : Route","title":"route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-file-handler/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / FileHandler FileHandler \u00b6 [jvm] data class FileHandler ( route : Route, file : File ) : RequestHandler Handler for file. Constructors \u00b6 FileHandler [jvm] fun FileHandler (route: Route, file: File ) Properties \u00b6 Name Summary file [jvm] val file : File route [jvm] open override val route : Route","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-file-handler/#filehandler","text":"[jvm] data class FileHandler ( route : Route, file : File ) : RequestHandler Handler for file.","title":"FileHandler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-file-handler/#constructors","text":"FileHandler [jvm] fun FileHandler (route: Route, file: File )","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-file-handler/#properties","text":"Name Summary file [jvm] val file : File route [jvm] open override val route : Route","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-file-handler/-file-handler/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / FileHandler / FileHandler FileHandler \u00b6 [jvm] Content fun FileHandler (route: Route, file: File )","title":" file handler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-file-handler/-file-handler/#filehandler","text":"[jvm] Content fun FileHandler (route: Route, file: File )","title":"FileHandler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-file-handler/file/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / FileHandler / file file \u00b6 [jvm] Content val file : File","title":"File"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-file-handler/file/#file","text":"[jvm] Content val file : File","title":"file"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-file-handler/route/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / FileHandler / route route \u00b6 [jvm] Content open override val route : Route","title":"Route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-file-handler/route/#route","text":"[jvm] Content open override val route : Route","title":"route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / FilterHandler FilterHandler \u00b6 [jvm] data class FilterHandler ( route : Route, order : FilterOrder , callback : RouteCallback ) : RequestHandler Handler for given FilterOrder for executing the callback . Constructors \u00b6 FilterHandler [jvm] fun FilterHandler (route: Route, order: FilterOrder , callback: RouteCallback ) Properties \u00b6 Name Summary callback [jvm] val callback : RouteCallback order [jvm] val order : FilterOrder route [jvm] open override val route : Route","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/#filterhandler","text":"[jvm] data class FilterHandler ( route : Route, order : FilterOrder , callback : RouteCallback ) : RequestHandler Handler for given FilterOrder for executing the callback .","title":"FilterHandler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/#constructors","text":"FilterHandler [jvm] fun FilterHandler (route: Route, order: FilterOrder , callback: RouteCallback )","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/#properties","text":"Name Summary callback [jvm] val callback : RouteCallback order [jvm] val order : FilterOrder route [jvm] open override val route : Route","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/-filter-handler/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / FilterHandler / FilterHandler FilterHandler \u00b6 [jvm] Content fun FilterHandler (route: Route, order: FilterOrder , callback: RouteCallback )","title":" filter handler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/-filter-handler/#filterhandler","text":"[jvm] Content fun FilterHandler (route: Route, order: FilterOrder , callback: RouteCallback )","title":"FilterHandler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/callback/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / FilterHandler / callback callback \u00b6 [jvm] Content val callback : RouteCallback","title":"Callback"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/callback/#callback","text":"[jvm] Content val callback : RouteCallback","title":"callback"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/order/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / FilterHandler / order order \u00b6 [jvm] Content val order : FilterOrder","title":"Order"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/order/#order","text":"[jvm] Content val order : FilterOrder","title":"order"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/route/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / FilterHandler / route route \u00b6 [jvm] Content open override val route : Route","title":"Route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-filter-handler/route/#route","text":"[jvm] Content open override val route : Route","title":"route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-path-handler/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / PathHandler PathHandler \u00b6 [jvm] data class PathHandler ( route : Route, router : Router ) : RequestHandler Handler for nested routes. Constructors \u00b6 PathHandler [jvm] fun PathHandler (route: Route, router: Router ) Properties \u00b6 Name Summary route [jvm] open override val route : Route router [jvm] val router : Router","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-path-handler/#pathhandler","text":"[jvm] data class PathHandler ( route : Route, router : Router ) : RequestHandler Handler for nested routes.","title":"PathHandler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-path-handler/#constructors","text":"PathHandler [jvm] fun PathHandler (route: Route, router: Router )","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-path-handler/#properties","text":"Name Summary route [jvm] open override val route : Route router [jvm] val router : Router","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-path-handler/-path-handler/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / PathHandler / PathHandler PathHandler \u00b6 [jvm] Content fun PathHandler (route: Route, router: Router )","title":" path handler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-path-handler/-path-handler/#pathhandler","text":"[jvm] Content fun PathHandler (route: Route, router: Router )","title":"PathHandler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-path-handler/route/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / PathHandler / route route \u00b6 [jvm] Content open override val route : Route","title":"Route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-path-handler/route/#route","text":"[jvm] Content open override val route : Route","title":"route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-path-handler/router/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / PathHandler / router router \u00b6 [jvm] Content val router : Router","title":"Router"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-path-handler/router/#router","text":"[jvm] Content val router : Router","title":"router"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-resource-handler/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / ResourceHandler ResourceHandler \u00b6 [jvm] data class ResourceHandler ( route : Route, resource : URL ) : RequestHandler Handler for URL resources. Constructors \u00b6 ResourceHandler [jvm] fun ResourceHandler (route: Route, resource: URL ) Properties \u00b6 Name Summary resource [jvm] val resource : URL route [jvm] open override val route : Route","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-resource-handler/#resourcehandler","text":"[jvm] data class ResourceHandler ( route : Route, resource : URL ) : RequestHandler Handler for URL resources.","title":"ResourceHandler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-resource-handler/#constructors","text":"ResourceHandler [jvm] fun ResourceHandler (route: Route, resource: URL )","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-resource-handler/#properties","text":"Name Summary resource [jvm] val resource : URL route [jvm] open override val route : Route","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-resource-handler/-resource-handler/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / ResourceHandler / ResourceHandler ResourceHandler \u00b6 [jvm] Content fun ResourceHandler (route: Route, resource: URL )","title":" resource handler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-resource-handler/-resource-handler/#resourcehandler","text":"[jvm] Content fun ResourceHandler (route: Route, resource: URL )","title":"ResourceHandler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-resource-handler/resource/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / ResourceHandler / resource resource \u00b6 [jvm] Content val resource : URL","title":"Resource"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-resource-handler/resource/#resource","text":"[jvm] Content val resource : URL","title":"resource"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-resource-handler/route/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / ResourceHandler / route route \u00b6 [jvm] Content open override val route : Route","title":"Route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-resource-handler/route/#route","text":"[jvm] Content open override val route : Route","title":"route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-route-handler/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / RouteHandler RouteHandler \u00b6 [jvm] data class RouteHandler ( route : Route, callback : RouteCallback ) : RequestHandler Handler for routes on HTTP methods. Constructors \u00b6 RouteHandler [jvm] fun RouteHandler (route: Route, callback: RouteCallback ) Properties \u00b6 Name Summary callback [jvm] val callback : RouteCallback route [jvm] open override val route : Route","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-route-handler/#routehandler","text":"[jvm] data class RouteHandler ( route : Route, callback : RouteCallback ) : RequestHandler Handler for routes on HTTP methods.","title":"RouteHandler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-route-handler/#constructors","text":"RouteHandler [jvm] fun RouteHandler (route: Route, callback: RouteCallback )","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-route-handler/#properties","text":"Name Summary callback [jvm] val callback : RouteCallback route [jvm] open override val route : Route","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-route-handler/-route-handler/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / RouteHandler / RouteHandler RouteHandler \u00b6 [jvm] Content fun RouteHandler (route: Route, callback: RouteCallback )","title":" route handler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-route-handler/-route-handler/#routehandler","text":"[jvm] Content fun RouteHandler (route: Route, callback: RouteCallback )","title":"RouteHandler"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-route-handler/callback/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / RouteHandler / callback callback \u00b6 [jvm] Content val callback : RouteCallback","title":"Callback"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-route-handler/callback/#callback","text":"[jvm] Content val callback : RouteCallback","title":"callback"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-route-handler/route/","text":"// port_http_server / com.hexagonkt.http.server / RequestHandler / RouteHandler / route route \u00b6 [jvm] Content open override val route : Route","title":"Route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-handler/-route-handler/route/#route","text":"[jvm] Content open override val route : Route","title":"route"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/","text":"// port_http_server / com.hexagonkt.http.server / RequestPort RequestPort \u00b6 [jvm] interface RequestPort Functions \u00b6 Name Summary certificateChain [jvm] Content abstract fun certificateChain (): List < X509Certificate > contentLength [jvm] Content abstract fun contentLength (): Long contentType [jvm] Content abstract fun contentType (): String ? cookies [jvm] Content abstract fun cookies (): Map < String , Cookie> formParameters [jvm] Content abstract fun formParameters (): Map < String , List < String >> headers [jvm] Content abstract fun headers (): Map < String , List < String >> host [jvm] Content abstract fun host (): String ip [jvm] Content abstract fun ip (): String loadBody [jvm] Content abstract fun loadBody (): String method [jvm] Content abstract fun method (): Method parts [jvm] Content abstract fun parts (): Map < String , Part> path [jvm] Content abstract fun path (): String pathParameters [jvm] Content abstract fun pathParameters (): Map < String , String > port [jvm] Content abstract fun port (): Int queryParameters [jvm] Content abstract fun queryParameters (): Map < String , List < String >> queryString [jvm] Content abstract fun queryString (): String scheme [jvm] Content abstract fun scheme (): String url [jvm] Content abstract fun url (): String Inheritors \u00b6 Name TestRequest","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/#requestport","text":"[jvm] interface RequestPort","title":"RequestPort"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/#functions","text":"Name Summary certificateChain [jvm] Content abstract fun certificateChain (): List < X509Certificate > contentLength [jvm] Content abstract fun contentLength (): Long contentType [jvm] Content abstract fun contentType (): String ? cookies [jvm] Content abstract fun cookies (): Map < String , Cookie> formParameters [jvm] Content abstract fun formParameters (): Map < String , List < String >> headers [jvm] Content abstract fun headers (): Map < String , List < String >> host [jvm] Content abstract fun host (): String ip [jvm] Content abstract fun ip (): String loadBody [jvm] Content abstract fun loadBody (): String method [jvm] Content abstract fun method (): Method parts [jvm] Content abstract fun parts (): Map < String , Part> path [jvm] Content abstract fun path (): String pathParameters [jvm] Content abstract fun pathParameters (): Map < String , String > port [jvm] Content abstract fun port (): Int queryParameters [jvm] Content abstract fun queryParameters (): Map < String , List < String >> queryString [jvm] Content abstract fun queryString (): String scheme [jvm] Content abstract fun scheme (): String url [jvm] Content abstract fun url (): String","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/#inheritors","text":"Name TestRequest","title":"Inheritors"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/certificate-chain/","text":"// port_http_server / com.hexagonkt.http.server / RequestPort / certificateChain certificateChain \u00b6 [jvm] Content abstract fun certificateChain (): List < X509Certificate >","title":"Certificate chain"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/certificate-chain/#certificatechain","text":"[jvm] Content abstract fun certificateChain (): List < X509Certificate >","title":"certificateChain"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/content-length/","text":"// port_http_server / com.hexagonkt.http.server / RequestPort / contentLength contentLength \u00b6 [jvm] Content abstract fun contentLength (): Long","title":"Content length"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/content-length/#contentlength","text":"[jvm] Content abstract fun contentLength (): Long","title":"contentLength"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/content-type/","text":"// port_http_server / com.hexagonkt.http.server / RequestPort / contentType contentType \u00b6 [jvm] Content abstract fun contentType (): String ?","title":"Content type"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/content-type/#contenttype","text":"[jvm] Content abstract fun contentType (): String ?","title":"contentType"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/cookies/","text":"// port_http_server / com.hexagonkt.http.server / RequestPort / cookies cookies \u00b6 [jvm] Content abstract fun cookies (): Map < String , Cookie>","title":"Cookies"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/cookies/#cookies","text":"[jvm] Content abstract fun cookies (): Map < String , Cookie>","title":"cookies"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/form-parameters/","text":"// port_http_server / com.hexagonkt.http.server / RequestPort / formParameters formParameters \u00b6 [jvm] Content abstract fun formParameters (): Map < String , List < String >>","title":"Form parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/form-parameters/#formparameters","text":"[jvm] Content abstract fun formParameters (): Map < String , List < String >>","title":"formParameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/headers/","text":"// port_http_server / com.hexagonkt.http.server / RequestPort / headers headers \u00b6 [jvm] Content abstract fun headers (): Map < String , List < String >>","title":"Headers"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/headers/#headers","text":"[jvm] Content abstract fun headers (): Map < String , List < String >>","title":"headers"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/host/","text":"// port_http_server / com.hexagonkt.http.server / RequestPort / host host \u00b6 [jvm] Content abstract fun host (): String","title":"Host"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/host/#host","text":"[jvm] Content abstract fun host (): String","title":"host"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/ip/","text":"// port_http_server / com.hexagonkt.http.server / RequestPort / ip ip \u00b6 [jvm] Content abstract fun ip (): String","title":"Ip"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/ip/#ip","text":"[jvm] Content abstract fun ip (): String","title":"ip"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/load-body/","text":"// port_http_server / com.hexagonkt.http.server / RequestPort / loadBody loadBody \u00b6 [jvm] Content abstract fun loadBody (): String","title":"Load body"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/load-body/#loadbody","text":"[jvm] Content abstract fun loadBody (): String","title":"loadBody"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/method/","text":"// port_http_server / com.hexagonkt.http.server / RequestPort / method method \u00b6 [jvm] Content abstract fun method (): Method","title":"Method"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/method/#method","text":"[jvm] Content abstract fun method (): Method","title":"method"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/parts/","text":"// port_http_server / com.hexagonkt.http.server / RequestPort / parts parts \u00b6 [jvm] Content abstract fun parts (): Map < String , Part>","title":"Parts"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/parts/#parts","text":"[jvm] Content abstract fun parts (): Map < String , Part>","title":"parts"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/path-parameters/","text":"// port_http_server / com.hexagonkt.http.server / RequestPort / pathParameters pathParameters \u00b6 [jvm] Content abstract fun pathParameters (): Map < String , String >","title":"Path parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/path-parameters/#pathparameters","text":"[jvm] Content abstract fun pathParameters (): Map < String , String >","title":"pathParameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/path/","text":"// port_http_server / com.hexagonkt.http.server / RequestPort / path path \u00b6 [jvm] Content abstract fun path (): String","title":"Path"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/path/#path","text":"[jvm] Content abstract fun path (): String","title":"path"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/port/","text":"// port_http_server / com.hexagonkt.http.server / RequestPort / port port \u00b6 [jvm] Content abstract fun port (): Int","title":"Port"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/port/#port","text":"[jvm] Content abstract fun port (): Int","title":"port"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/query-parameters/","text":"// port_http_server / com.hexagonkt.http.server / RequestPort / queryParameters queryParameters \u00b6 [jvm] Content abstract fun queryParameters (): Map < String , List < String >>","title":"Query parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/query-parameters/#queryparameters","text":"[jvm] Content abstract fun queryParameters (): Map < String , List < String >>","title":"queryParameters"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/query-string/","text":"// port_http_server / com.hexagonkt.http.server / RequestPort / queryString queryString \u00b6 [jvm] Content abstract fun queryString (): String","title":"Query string"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/query-string/#querystring","text":"[jvm] Content abstract fun queryString (): String","title":"queryString"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/scheme/","text":"// port_http_server / com.hexagonkt.http.server / RequestPort / scheme scheme \u00b6 [jvm] Content abstract fun scheme (): String","title":"Scheme"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/scheme/#scheme","text":"[jvm] Content abstract fun scheme (): String","title":"scheme"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/url/","text":"// port_http_server / com.hexagonkt.http.server / RequestPort / url url \u00b6 [jvm] Content abstract fun url (): String","title":"Url"},{"location":"port_http_server/com.hexagonkt.http.server/-request-port/url/#url","text":"[jvm] Content abstract fun url (): String","title":"url"},{"location":"port_http_server/com.hexagonkt.http.server/-response/","text":"// port_http_server / com.hexagonkt.http.server / Response Response \u00b6 [jvm] class Response ( adapter : ResponsePort ) Check 'Request' comment. And also note that lists should be updated by engines after callback is processed, this data is like a buffer that needs to be dumped to the real response. HTTP response context. Constructors \u00b6 Response [jvm] fun Response (adapter: ResponsePort ) Types \u00b6 Name Summary MapInterface [jvm] Content interface MapInterface < K , V > Functions \u00b6 Name Summary addCookie [jvm] Content fun addCookie (cookie: Cookie) More info Sends a response by adding the given cookie. redirect [jvm] Content fun redirect (url: String ) More info Sends a redirect response to the client using the specified redirect URL. removeCookie [jvm] Content fun removeCookie (name: String ) More info Sends a response by removing the cookie with specified name. Properties \u00b6 Name Summary adapter [jvm] val adapter : ResponsePort body [jvm] var body : Any Body of the response. contentType [jvm] var contentType : String ?Content Type of the response. headers [jvm] val headers : Response.MapInterface < String , Any >A MapInterface implementation for response headers. headersValues [jvm] val headersValues : MutableMap < String , List < Any >>Response headers. outputStream [jvm] val outputStream : OutputStream Output Stream of the response. status [jvm] var status : Int Status code of the response.","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-response/#response","text":"[jvm] class Response ( adapter : ResponsePort ) Check 'Request' comment. And also note that lists should be updated by engines after callback is processed, this data is like a buffer that needs to be dumped to the real response. HTTP response context.","title":"Response"},{"location":"port_http_server/com.hexagonkt.http.server/-response/#constructors","text":"Response [jvm] fun Response (adapter: ResponsePort )","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-response/#types","text":"Name Summary MapInterface [jvm] Content interface MapInterface < K , V >","title":"Types"},{"location":"port_http_server/com.hexagonkt.http.server/-response/#functions","text":"Name Summary addCookie [jvm] Content fun addCookie (cookie: Cookie) More info Sends a response by adding the given cookie. redirect [jvm] Content fun redirect (url: String ) More info Sends a redirect response to the client using the specified redirect URL. removeCookie [jvm] Content fun removeCookie (name: String ) More info Sends a response by removing the cookie with specified name.","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server/-response/#properties","text":"Name Summary adapter [jvm] val adapter : ResponsePort body [jvm] var body : Any Body of the response. contentType [jvm] var contentType : String ?Content Type of the response. headers [jvm] val headers : Response.MapInterface < String , Any >A MapInterface implementation for response headers. headersValues [jvm] val headersValues : MutableMap < String , List < Any >>Response headers. outputStream [jvm] val outputStream : OutputStream Output Stream of the response. status [jvm] var status : Int Status code of the response.","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-response/-response/","text":"// port_http_server / com.hexagonkt.http.server / Response / Response Response \u00b6 [jvm] Content fun Response (adapter: ResponsePort )","title":" response"},{"location":"port_http_server/com.hexagonkt.http.server/-response/-response/#response","text":"[jvm] Content fun Response (adapter: ResponsePort )","title":"Response"},{"location":"port_http_server/com.hexagonkt.http.server/-response/adapter/","text":"// port_http_server / com.hexagonkt.http.server / Response / adapter adapter \u00b6 [jvm] Content val adapter : ResponsePort","title":"Adapter"},{"location":"port_http_server/com.hexagonkt.http.server/-response/adapter/#adapter","text":"[jvm] Content val adapter : ResponsePort","title":"adapter"},{"location":"port_http_server/com.hexagonkt.http.server/-response/add-cookie/","text":"// port_http_server / com.hexagonkt.http.server / Response / addCookie addCookie \u00b6 [jvm] Content fun addCookie (cookie: Cookie) More info Sends a response by adding the given cookie. Parameters \u00b6 jvm cookie Cookie to be added.","title":"Add cookie"},{"location":"port_http_server/com.hexagonkt.http.server/-response/add-cookie/#addcookie","text":"[jvm] Content fun addCookie (cookie: Cookie) More info Sends a response by adding the given cookie.","title":"addCookie"},{"location":"port_http_server/com.hexagonkt.http.server/-response/add-cookie/#parameters","text":"jvm cookie Cookie to be added.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-response/body/","text":"// port_http_server / com.hexagonkt.http.server / Response / body body \u00b6 [jvm] Content var body : Any More info Body of the response.","title":"Body"},{"location":"port_http_server/com.hexagonkt.http.server/-response/body/#body","text":"[jvm] Content var body : Any More info Body of the response.","title":"body"},{"location":"port_http_server/com.hexagonkt.http.server/-response/content-type/","text":"// port_http_server / com.hexagonkt.http.server / Response / contentType contentType \u00b6 [jvm] Content var contentType : String ? More info Content Type of the response.","title":"Content type"},{"location":"port_http_server/com.hexagonkt.http.server/-response/content-type/#contenttype","text":"[jvm] Content var contentType : String ? More info Content Type of the response.","title":"contentType"},{"location":"port_http_server/com.hexagonkt.http.server/-response/headers-values/","text":"// port_http_server / com.hexagonkt.http.server / Response / headersValues headersValues \u00b6 [jvm] Content val headersValues : MutableMap < String , List < Any >> More info Response headers.","title":"Headers values"},{"location":"port_http_server/com.hexagonkt.http.server/-response/headers-values/#headersvalues","text":"[jvm] Content val headersValues : MutableMap < String , List < Any >> More info Response headers.","title":"headersValues"},{"location":"port_http_server/com.hexagonkt.http.server/-response/headers/","text":"// port_http_server / com.hexagonkt.http.server / Response / headers headers \u00b6 [jvm] Content val headers : Response.MapInterface < String , Any > More info A MapInterface implementation for response headers.","title":"Headers"},{"location":"port_http_server/com.hexagonkt.http.server/-response/headers/#headers","text":"[jvm] Content val headers : Response.MapInterface < String , Any > More info A MapInterface implementation for response headers.","title":"headers"},{"location":"port_http_server/com.hexagonkt.http.server/-response/output-stream/","text":"// port_http_server / com.hexagonkt.http.server / Response / outputStream outputStream \u00b6 [jvm] Content val outputStream : OutputStream More info Output Stream of the response.","title":"Output stream"},{"location":"port_http_server/com.hexagonkt.http.server/-response/output-stream/#outputstream","text":"[jvm] Content val outputStream : OutputStream More info Output Stream of the response.","title":"outputStream"},{"location":"port_http_server/com.hexagonkt.http.server/-response/redirect/","text":"// port_http_server / com.hexagonkt.http.server / Response / redirect redirect \u00b6 [jvm] Content fun redirect (url: String ) More info Sends a redirect response to the client using the specified redirect URL. Parameters \u00b6 jvm url Redirect URL.","title":"Redirect"},{"location":"port_http_server/com.hexagonkt.http.server/-response/redirect/#redirect","text":"[jvm] Content fun redirect (url: String ) More info Sends a redirect response to the client using the specified redirect URL.","title":"redirect"},{"location":"port_http_server/com.hexagonkt.http.server/-response/redirect/#parameters","text":"jvm url Redirect URL.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-response/remove-cookie/","text":"// port_http_server / com.hexagonkt.http.server / Response / removeCookie removeCookie \u00b6 [jvm] Content fun removeCookie (name: String ) More info Sends a response by removing the cookie with specified name. Parameters \u00b6 jvm name Cookie to be deleted.","title":"Remove cookie"},{"location":"port_http_server/com.hexagonkt.http.server/-response/remove-cookie/#removecookie","text":"[jvm] Content fun removeCookie (name: String ) More info Sends a response by removing the cookie with specified name.","title":"removeCookie"},{"location":"port_http_server/com.hexagonkt.http.server/-response/remove-cookie/#parameters","text":"jvm name Cookie to be deleted.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-response/status/","text":"// port_http_server / com.hexagonkt.http.server / Response / status status \u00b6 [jvm] Content var status : Int More info Status code of the response.","title":"Status"},{"location":"port_http_server/com.hexagonkt.http.server/-response/status/#status","text":"[jvm] Content var status : Int More info Status code of the response.","title":"status"},{"location":"port_http_server/com.hexagonkt.http.server/-response/-map-interface/","text":"// port_http_server / com.hexagonkt.http.server / Response / MapInterface MapInterface \u00b6 [jvm] interface MapInterface < K , V > Functions \u00b6 Name Summary get [jvm] Content abstract operator fun get (name: K ): V ? remove [jvm] Content abstract fun remove (name: K ) set [jvm] Content abstract operator fun set (name: K , value: V ?)","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-response/-map-interface/#mapinterface","text":"[jvm] interface MapInterface < K , V >","title":"MapInterface"},{"location":"port_http_server/com.hexagonkt.http.server/-response/-map-interface/#functions","text":"Name Summary get [jvm] Content abstract operator fun get (name: K ): V ? remove [jvm] Content abstract fun remove (name: K ) set [jvm] Content abstract operator fun set (name: K , value: V ?)","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server/-response/-map-interface/get/","text":"// port_http_server / com.hexagonkt.http.server / Response / MapInterface / get get \u00b6 [jvm] Content abstract operator fun get (name: K ): V ?","title":"Get"},{"location":"port_http_server/com.hexagonkt.http.server/-response/-map-interface/get/#get","text":"[jvm] Content abstract operator fun get (name: K ): V ?","title":"get"},{"location":"port_http_server/com.hexagonkt.http.server/-response/-map-interface/remove/","text":"// port_http_server / com.hexagonkt.http.server / Response / MapInterface / remove remove \u00b6 [jvm] Content abstract fun remove (name: K )","title":"Remove"},{"location":"port_http_server/com.hexagonkt.http.server/-response/-map-interface/remove/#remove","text":"[jvm] Content abstract fun remove (name: K )","title":"remove"},{"location":"port_http_server/com.hexagonkt.http.server/-response/-map-interface/set/","text":"// port_http_server / com.hexagonkt.http.server / Response / MapInterface / set set \u00b6 [jvm] Content abstract operator fun set (name: K , value: V ?)","title":"Set"},{"location":"port_http_server/com.hexagonkt.http.server/-response/-map-interface/set/#set","text":"[jvm] Content abstract operator fun set (name: K , value: V ?)","title":"set"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/","text":"// port_http_server / com.hexagonkt.http.server / ResponsePort ResponsePort \u00b6 [jvm] interface ResponsePort Functions \u00b6 Name Summary addCookie [jvm] Content abstract fun addCookie (cookie: Cookie) More info Sends a response by adding the given cookie. body [jvm] Content abstract fun body (): Any More info Provides the body of the response. [jvm] Content abstract fun body (value: Any ) More info Sets the body of the response. contentType [jvm] Content abstract fun contentType (): String ? More info Provides the content type of the response. [jvm] Content abstract fun contentType (value: String ?) More info Sets the content type of the response. outputStream [jvm] Content abstract fun outputStream (): OutputStream More info Provides a OutputStream instance for the response. redirect [jvm] Content abstract fun redirect (url: String ) More info Sends a redirect response to the client using the specified redirect URL. removeCookie [jvm] Content abstract fun removeCookie (name: String ) More info Sends a response by removing the cookie with specified name. status [jvm] Content abstract fun status (): Int More info Provides the status code of the response. [jvm] Content abstract fun status (value: Int ) More info Sets the status code of the response. Inheritors \u00b6 Name TestResponse","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/#responseport","text":"[jvm] interface ResponsePort","title":"ResponsePort"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/#functions","text":"Name Summary addCookie [jvm] Content abstract fun addCookie (cookie: Cookie) More info Sends a response by adding the given cookie. body [jvm] Content abstract fun body (): Any More info Provides the body of the response. [jvm] Content abstract fun body (value: Any ) More info Sets the body of the response. contentType [jvm] Content abstract fun contentType (): String ? More info Provides the content type of the response. [jvm] Content abstract fun contentType (value: String ?) More info Sets the content type of the response. outputStream [jvm] Content abstract fun outputStream (): OutputStream More info Provides a OutputStream instance for the response. redirect [jvm] Content abstract fun redirect (url: String ) More info Sends a redirect response to the client using the specified redirect URL. removeCookie [jvm] Content abstract fun removeCookie (name: String ) More info Sends a response by removing the cookie with specified name. status [jvm] Content abstract fun status (): Int More info Provides the status code of the response. [jvm] Content abstract fun status (value: Int ) More info Sets the status code of the response.","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/#inheritors","text":"Name TestResponse","title":"Inheritors"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/add-cookie/","text":"// port_http_server / com.hexagonkt.http.server / ResponsePort / addCookie addCookie \u00b6 [jvm] Content abstract fun addCookie (cookie: Cookie) More info Sends a response by adding the given cookie. Parameters \u00b6 jvm cookie Cookie to be added.","title":"Add cookie"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/add-cookie/#addcookie","text":"[jvm] Content abstract fun addCookie (cookie: Cookie) More info Sends a response by adding the given cookie.","title":"addCookie"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/add-cookie/#parameters","text":"jvm cookie Cookie to be added.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/body/","text":"// port_http_server / com.hexagonkt.http.server / ResponsePort / body body \u00b6 [jvm] Content abstract fun body (): Any More info Provides the body of the response. [jvm] Content abstract fun body (value: Any ) More info Sets the body of the response. Parameters \u00b6 jvm value Body content.","title":"Body"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/body/#body","text":"[jvm] Content abstract fun body (): Any More info Provides the body of the response. [jvm] Content abstract fun body (value: Any ) More info Sets the body of the response.","title":"body"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/body/#parameters","text":"jvm value Body content.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/content-type/","text":"// port_http_server / com.hexagonkt.http.server / ResponsePort / contentType contentType \u00b6 [jvm] Content abstract fun contentType (): String ? More info Provides the content type of the response. [jvm] Content abstract fun contentType (value: String ?) More info Sets the content type of the response. Parameters \u00b6 jvm value Content type info.","title":"Content type"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/content-type/#contenttype","text":"[jvm] Content abstract fun contentType (): String ? More info Provides the content type of the response. [jvm] Content abstract fun contentType (value: String ?) More info Sets the content type of the response.","title":"contentType"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/content-type/#parameters","text":"jvm value Content type info.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/output-stream/","text":"// port_http_server / com.hexagonkt.http.server / ResponsePort / outputStream outputStream \u00b6 [jvm] Content abstract fun outputStream (): OutputStream More info Provides a OutputStream instance for the response.","title":"Output stream"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/output-stream/#outputstream","text":"[jvm] Content abstract fun outputStream (): OutputStream More info Provides a OutputStream instance for the response.","title":"outputStream"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/redirect/","text":"// port_http_server / com.hexagonkt.http.server / ResponsePort / redirect redirect \u00b6 [jvm] Content abstract fun redirect (url: String ) More info Sends a redirect response to the client using the specified redirect URL. Parameters \u00b6 jvm url Redirect URL.","title":"Redirect"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/redirect/#redirect","text":"[jvm] Content abstract fun redirect (url: String ) More info Sends a redirect response to the client using the specified redirect URL.","title":"redirect"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/redirect/#parameters","text":"jvm url Redirect URL.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/remove-cookie/","text":"// port_http_server / com.hexagonkt.http.server / ResponsePort / removeCookie removeCookie \u00b6 [jvm] Content abstract fun removeCookie (name: String ) More info Sends a response by removing the cookie with specified name. Parameters \u00b6 jvm name Cookie to be deleted.","title":"Remove cookie"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/remove-cookie/#removecookie","text":"[jvm] Content abstract fun removeCookie (name: String ) More info Sends a response by removing the cookie with specified name.","title":"removeCookie"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/remove-cookie/#parameters","text":"jvm name Cookie to be deleted.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/status/","text":"// port_http_server / com.hexagonkt.http.server / ResponsePort / status status \u00b6 [jvm] Content abstract fun status (): Int More info Provides the status code of the response. [jvm] Content abstract fun status (value: Int ) More info Sets the status code of the response. Parameters \u00b6 jvm value Status code.","title":"Status"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/status/#status","text":"[jvm] Content abstract fun status (): Int More info Provides the status code of the response. [jvm] Content abstract fun status (value: Int ) More info Sets the status code of the response.","title":"status"},{"location":"port_http_server/com.hexagonkt.http.server/-response-port/status/#parameters","text":"jvm value Status code.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/","text":"// port_http_server / com.hexagonkt.http.server / Router Router \u00b6 [jvm] class Router ( block : Router .() -> Unit ) Creates and initializes a Router based on a code block. Return \u00b6 A new router initialized by the passed block. Parameters \u00b6 jvm block Router's setup block. Constructors \u00b6 Router [jvm] fun Router (block: Router .() -> Unit = {})Router's setup block. Functions \u00b6 Name Summary after [jvm] Content fun after (path: String = \"*\", block: RouteCallback ) More info Registers FilterHandler with AFTER for given route path . any [jvm] Content fun any (path: String = \"/\", block: RouteCallback ) More info Creates a route for a filter (with all methods) with given RouteCallback to be handled. before [jvm] Content fun before (path: String = \"*\", block: RouteCallback ) More info Registers FilterHandler with BEFORE for given route path . cors [jvm] Content fun cors (settings: CorsSettings ) More info Register CORS for the router. delete [jvm] Content fun delete (path: String = \"/\", block: RouteCallback ) More info Creates DELETE route with given RouteCallback to be handled. error [jvm] Content fun error (exception: Class Exception >, block: ExceptionCallback ) fun error (exception: KClass Exception >, block: ExceptionCallback ) More info Registers handler for routes halted due to specified exception . [jvm] Content fun error (code: Int , block: ErrorCodeCallback ) More info Registers handler for routes halted with specified code . flatRequestHandlers [jvm] Content fun flatRequestHandlers (h: List < RequestHandler > = requestHandlers): List < RequestHandler > More info Flattens the given List of RequestHandler . get [jvm] Content fun get (file: File ) More info Registers FileHandler for given file URL for any route. [jvm] Content fun get (resource: URL ) More info Registers ResourceHandler for given resource URL for any route. [jvm] Content fun get (path: String , file: File ) More info Registers FileHandler for given file at given route path . [jvm] Content fun get (path: String , resource: URL ) More info Registers ResourceHandler for given resource URL at given route path . [jvm] Content fun get (path: String = \"/\", block: RouteCallback ) More info Creates GET route with given RouteCallback to be handled. head [jvm] Content fun head (path: String = \"/\", block: RouteCallback ) More info Creates HEAD route with given RouteCallback to be handled. options [jvm] Content fun options (path: String = \"/\", block: RouteCallback ) More info Creates OPTIONS route with given RouteCallback to be handled. patch [jvm] Content fun patch (path: String = \"/\", block: RouteCallback ) More info Creates PATH route with given RouteCallback to be handled. path [jvm] Content fun path (handler: Router ) More info Registers PathHandler for \"/\" route with given handler . [jvm] Content fun path (block: Router .() -> Unit ) More info Registers PathHandler with specified block . [jvm] Content fun path (path: Path, router: Router ) fun path (path: String , router: Router ) fun path (path: String , block: Router .() -> Unit ) More info Registers PathHandler for given route path . post [jvm] Content fun post (path: String = \"/\", block: RouteCallback ) More info Creates POST route with given RouteCallback to be handled. put [jvm] Content fun put (path: String = \"/\", block: RouteCallback ) More info Creates PUT route with given RouteCallback to be handled. trace [jvm] Content fun trace (path: String = \"/\", block: RouteCallback ) More info Creates TRACE route with given RouteCallback to be handled. Properties \u00b6 Name Summary requestHandlers [jvm] var requestHandlers : List < RequestHandler > List of RequestHandler instances.","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-router/#router","text":"[jvm] class Router ( block : Router .() -> Unit ) Creates and initializes a Router based on a code block.","title":"Router"},{"location":"port_http_server/com.hexagonkt.http.server/-router/#return","text":"A new router initialized by the passed block.","title":"Return"},{"location":"port_http_server/com.hexagonkt.http.server/-router/#parameters","text":"jvm block Router's setup block.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/#constructors","text":"Router [jvm] fun Router (block: Router .() -> Unit = {})Router's setup block.","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-router/#functions","text":"Name Summary after [jvm] Content fun after (path: String = \"*\", block: RouteCallback ) More info Registers FilterHandler with AFTER for given route path . any [jvm] Content fun any (path: String = \"/\", block: RouteCallback ) More info Creates a route for a filter (with all methods) with given RouteCallback to be handled. before [jvm] Content fun before (path: String = \"*\", block: RouteCallback ) More info Registers FilterHandler with BEFORE for given route path . cors [jvm] Content fun cors (settings: CorsSettings ) More info Register CORS for the router. delete [jvm] Content fun delete (path: String = \"/\", block: RouteCallback ) More info Creates DELETE route with given RouteCallback to be handled. error [jvm] Content fun error (exception: Class Exception >, block: ExceptionCallback ) fun error (exception: KClass Exception >, block: ExceptionCallback ) More info Registers handler for routes halted due to specified exception . [jvm] Content fun error (code: Int , block: ErrorCodeCallback ) More info Registers handler for routes halted with specified code . flatRequestHandlers [jvm] Content fun flatRequestHandlers (h: List < RequestHandler > = requestHandlers): List < RequestHandler > More info Flattens the given List of RequestHandler . get [jvm] Content fun get (file: File ) More info Registers FileHandler for given file URL for any route. [jvm] Content fun get (resource: URL ) More info Registers ResourceHandler for given resource URL for any route. [jvm] Content fun get (path: String , file: File ) More info Registers FileHandler for given file at given route path . [jvm] Content fun get (path: String , resource: URL ) More info Registers ResourceHandler for given resource URL at given route path . [jvm] Content fun get (path: String = \"/\", block: RouteCallback ) More info Creates GET route with given RouteCallback to be handled. head [jvm] Content fun head (path: String = \"/\", block: RouteCallback ) More info Creates HEAD route with given RouteCallback to be handled. options [jvm] Content fun options (path: String = \"/\", block: RouteCallback ) More info Creates OPTIONS route with given RouteCallback to be handled. patch [jvm] Content fun patch (path: String = \"/\", block: RouteCallback ) More info Creates PATH route with given RouteCallback to be handled. path [jvm] Content fun path (handler: Router ) More info Registers PathHandler for \"/\" route with given handler . [jvm] Content fun path (block: Router .() -> Unit ) More info Registers PathHandler with specified block . [jvm] Content fun path (path: Path, router: Router ) fun path (path: String , router: Router ) fun path (path: String , block: Router .() -> Unit ) More info Registers PathHandler for given route path . post [jvm] Content fun post (path: String = \"/\", block: RouteCallback ) More info Creates POST route with given RouteCallback to be handled. put [jvm] Content fun put (path: String = \"/\", block: RouteCallback ) More info Creates PUT route with given RouteCallback to be handled. trace [jvm] Content fun trace (path: String = \"/\", block: RouteCallback ) More info Creates TRACE route with given RouteCallback to be handled.","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server/-router/#properties","text":"Name Summary requestHandlers [jvm] var requestHandlers : List < RequestHandler > List of RequestHandler instances.","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-router/-router/","text":"// port_http_server / com.hexagonkt.http.server / Router / Router Router \u00b6 [jvm] Content fun Router (block: Router .() -> Unit = {}) More info Parameters \u00b6 jvm block Router's setup block.","title":" router"},{"location":"port_http_server/com.hexagonkt.http.server/-router/-router/#router","text":"[jvm] Content fun Router (block: Router .() -> Unit = {}) More info","title":"Router"},{"location":"port_http_server/com.hexagonkt.http.server/-router/-router/#parameters","text":"jvm block Router's setup block.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/after/","text":"// port_http_server / com.hexagonkt.http.server / Router / after after \u00b6 [jvm] Content fun after (path: String = \"*\", block: RouteCallback ) More info Registers FilterHandler with AFTER for given route path . Parameters \u00b6 jvm path Route path for which the handler is to be registered. block RouteCallback instance to be execited by the handler.","title":"After"},{"location":"port_http_server/com.hexagonkt.http.server/-router/after/#after","text":"[jvm] Content fun after (path: String = \"*\", block: RouteCallback ) More info Registers FilterHandler with AFTER for given route path .","title":"after"},{"location":"port_http_server/com.hexagonkt.http.server/-router/after/#parameters","text":"jvm path Route path for which the handler is to be registered. block RouteCallback instance to be execited by the handler.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/any/","text":"// port_http_server / com.hexagonkt.http.server / Router / any any \u00b6 [jvm] Content fun any (path: String = \"/\", block: RouteCallback ) More info Creates a route for a filter (with all methods) with given RouteCallback to be handled. Parameters \u00b6 jvm path Route path of the request. block A RouteCallback instance to be executed.","title":"Any"},{"location":"port_http_server/com.hexagonkt.http.server/-router/any/#any","text":"[jvm] Content fun any (path: String = \"/\", block: RouteCallback ) More info Creates a route for a filter (with all methods) with given RouteCallback to be handled.","title":"any"},{"location":"port_http_server/com.hexagonkt.http.server/-router/any/#parameters","text":"jvm path Route path of the request. block A RouteCallback instance to be executed.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/before/","text":"// port_http_server / com.hexagonkt.http.server / Router / before before \u00b6 [jvm] Content fun before (path: String = \"*\", block: RouteCallback ) More info Registers FilterHandler with BEFORE for given route path . Parameters \u00b6 jvm path Route path for which the handler is to be registered. block RouteCallback instance to be executed by the handler.","title":"Before"},{"location":"port_http_server/com.hexagonkt.http.server/-router/before/#before","text":"[jvm] Content fun before (path: String = \"*\", block: RouteCallback ) More info Registers FilterHandler with BEFORE for given route path .","title":"before"},{"location":"port_http_server/com.hexagonkt.http.server/-router/before/#parameters","text":"jvm path Route path for which the handler is to be registered. block RouteCallback instance to be executed by the handler.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/cors/","text":"// port_http_server / com.hexagonkt.http.server / Router / cors cors \u00b6 [jvm] Content fun cors (settings: CorsSettings ) More info Register CORS for the router. Parameters \u00b6 jvm settings Instance of CorsSettings .","title":"Cors"},{"location":"port_http_server/com.hexagonkt.http.server/-router/cors/#cors","text":"[jvm] Content fun cors (settings: CorsSettings ) More info Register CORS for the router.","title":"cors"},{"location":"port_http_server/com.hexagonkt.http.server/-router/cors/#parameters","text":"jvm settings Instance of CorsSettings .","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/delete/","text":"// port_http_server / com.hexagonkt.http.server / Router / delete delete \u00b6 [jvm] Content fun delete (path: String = \"/\", block: RouteCallback ) More info Creates DELETE route with given RouteCallback to be handled. Parameters \u00b6 jvm path Route path of the request. block A RouteCallback instance to be handled.","title":"Delete"},{"location":"port_http_server/com.hexagonkt.http.server/-router/delete/#delete","text":"[jvm] Content fun delete (path: String = \"/\", block: RouteCallback ) More info Creates DELETE route with given RouteCallback to be handled.","title":"delete"},{"location":"port_http_server/com.hexagonkt.http.server/-router/delete/#parameters","text":"jvm path Route path of the request. block A RouteCallback instance to be handled.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/error/","text":"// port_http_server / com.hexagonkt.http.server / Router / error error \u00b6 [jvm] Content fun error (code: Int , block: ErrorCodeCallback ) More info Registers handler for routes halted with specified code . Parameters \u00b6 jvm code Status code. block Callback to be executed by the handler. [jvm] Content fun error (exception: KClass Exception >, block: ExceptionCallback ) More info Registers handler for routes halted due to specified exception . Parameters \u00b6 jvm exception Exception to register callback for. block Callback to be executed by the handler. [jvm] Content fun error (exception: Class Exception >, block: ExceptionCallback ) More info Registers handler for routes halted due to specified exception . Parameters \u00b6 jvm exception Exception to register callback for. block Callback to be executed by the handler.","title":"Error"},{"location":"port_http_server/com.hexagonkt.http.server/-router/error/#error","text":"[jvm] Content fun error (code: Int , block: ErrorCodeCallback ) More info Registers handler for routes halted with specified code .","title":"error"},{"location":"port_http_server/com.hexagonkt.http.server/-router/error/#parameters","text":"jvm code Status code. block Callback to be executed by the handler. [jvm] Content fun error (exception: KClass Exception >, block: ExceptionCallback ) More info Registers handler for routes halted due to specified exception .","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/error/#parameters_1","text":"jvm exception Exception to register callback for. block Callback to be executed by the handler. [jvm] Content fun error (exception: Class Exception >, block: ExceptionCallback ) More info Registers handler for routes halted due to specified exception .","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/error/#parameters_2","text":"jvm exception Exception to register callback for. block Callback to be executed by the handler.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/flat-request-handlers/","text":"// port_http_server / com.hexagonkt.http.server / Router / flatRequestHandlers flatRequestHandlers \u00b6 [jvm] Content fun flatRequestHandlers (h: List < RequestHandler > = requestHandlers): List < RequestHandler > More info Flattens the given List of RequestHandler . Return \u00b6 Flattened List of RequestHandler . Parameters \u00b6 jvm h List of RequestHandler .","title":"Flat request handlers"},{"location":"port_http_server/com.hexagonkt.http.server/-router/flat-request-handlers/#flatrequesthandlers","text":"[jvm] Content fun flatRequestHandlers (h: List < RequestHandler > = requestHandlers): List < RequestHandler > More info Flattens the given List of RequestHandler .","title":"flatRequestHandlers"},{"location":"port_http_server/com.hexagonkt.http.server/-router/flat-request-handlers/#return","text":"Flattened List of RequestHandler .","title":"Return"},{"location":"port_http_server/com.hexagonkt.http.server/-router/flat-request-handlers/#parameters","text":"jvm h List of RequestHandler .","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/get/","text":"// port_http_server / com.hexagonkt.http.server / Router / get get \u00b6 [jvm] Content fun get (path: String = \"/\", block: RouteCallback ) More info Creates GET route with given RouteCallback to be handled. Parameters \u00b6 jvm path Route path of the request. block A RouteCallback instance to be handled. [jvm] Content fun get (resource: URL ) More info Registers ResourceHandler for given resource URL for any route. Parameters \u00b6 jvm resource The URL for which handler is to be registered. [jvm] Content fun get (path: String , resource: URL ) More info Registers ResourceHandler for given resource URL at given route path . Parameters \u00b6 jvm path Route path for which the handler is to be registered. resource The URL for which the handler is to be registered. [jvm] Content fun get (file: File ) More info Registers FileHandler for given file URL for any route. Parameters \u00b6 jvm file The File for which handler is to be registered. [jvm] Content fun get (path: String , file: File ) More info Registers FileHandler for given file at given route path . Parameters \u00b6 jvm path Route path for which the handler is to be registered. file The File for which the handler is to be registered.","title":"Get"},{"location":"port_http_server/com.hexagonkt.http.server/-router/get/#get","text":"[jvm] Content fun get (path: String = \"/\", block: RouteCallback ) More info Creates GET route with given RouteCallback to be handled.","title":"get"},{"location":"port_http_server/com.hexagonkt.http.server/-router/get/#parameters","text":"jvm path Route path of the request. block A RouteCallback instance to be handled. [jvm] Content fun get (resource: URL ) More info Registers ResourceHandler for given resource URL for any route.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/get/#parameters_1","text":"jvm resource The URL for which handler is to be registered. [jvm] Content fun get (path: String , resource: URL ) More info Registers ResourceHandler for given resource URL at given route path .","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/get/#parameters_2","text":"jvm path Route path for which the handler is to be registered. resource The URL for which the handler is to be registered. [jvm] Content fun get (file: File ) More info Registers FileHandler for given file URL for any route.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/get/#parameters_3","text":"jvm file The File for which handler is to be registered. [jvm] Content fun get (path: String , file: File ) More info Registers FileHandler for given file at given route path .","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/get/#parameters_4","text":"jvm path Route path for which the handler is to be registered. file The File for which the handler is to be registered.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/head/","text":"// port_http_server / com.hexagonkt.http.server / Router / head head \u00b6 [jvm] Content fun head (path: String = \"/\", block: RouteCallback ) More info Creates HEAD route with given RouteCallback to be handled. Parameters \u00b6 jvm path Route path of the request. block A RouteCallback instance to be handled.","title":"Head"},{"location":"port_http_server/com.hexagonkt.http.server/-router/head/#head","text":"[jvm] Content fun head (path: String = \"/\", block: RouteCallback ) More info Creates HEAD route with given RouteCallback to be handled.","title":"head"},{"location":"port_http_server/com.hexagonkt.http.server/-router/head/#parameters","text":"jvm path Route path of the request. block A RouteCallback instance to be handled.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/options/","text":"// port_http_server / com.hexagonkt.http.server / Router / options options \u00b6 [jvm] Content fun options (path: String = \"/\", block: RouteCallback ) More info Creates OPTIONS route with given RouteCallback to be handled. Parameters \u00b6 jvm path Route path of the request. block A RouteCallback instance to be handled.","title":"Options"},{"location":"port_http_server/com.hexagonkt.http.server/-router/options/#options","text":"[jvm] Content fun options (path: String = \"/\", block: RouteCallback ) More info Creates OPTIONS route with given RouteCallback to be handled.","title":"options"},{"location":"port_http_server/com.hexagonkt.http.server/-router/options/#parameters","text":"jvm path Route path of the request. block A RouteCallback instance to be handled.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/patch/","text":"// port_http_server / com.hexagonkt.http.server / Router / patch patch \u00b6 [jvm] Content fun patch (path: String = \"/\", block: RouteCallback ) More info Creates PATH route with given RouteCallback to be handled. Parameters \u00b6 jvm path Route path of the request. block A RouteCallback instance to be handled.","title":"Patch"},{"location":"port_http_server/com.hexagonkt.http.server/-router/patch/#patch","text":"[jvm] Content fun patch (path: String = \"/\", block: RouteCallback ) More info Creates PATH route with given RouteCallback to be handled.","title":"patch"},{"location":"port_http_server/com.hexagonkt.http.server/-router/patch/#parameters","text":"jvm path Route path of the request. block A RouteCallback instance to be handled.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/path/","text":"// port_http_server / com.hexagonkt.http.server / Router / path path \u00b6 [jvm] Content fun path (path: Path, router: Router ) More info Registers PathHandler for given route path . Parameters \u00b6 jvm path Route path for which the callback is to be registered. router Nested Router handler. [jvm] Content fun path (handler: Router ) More info Registers PathHandler for \"/\" route with given handler . Parameters \u00b6 jvm handler Nested Router handler. [jvm] Content fun path (block: Router .() -> Unit ) More info Registers PathHandler with specified block . Parameters \u00b6 jvm block Router handler block. [jvm] Content fun path (path: String , router: Router ) More info Registers PathHandler for given route path . Parameters \u00b6 jvm path Route path for which the callback is to be registered. router Nested Router handler. [jvm] Content fun path (path: String , block: Router .() -> Unit ) More info Registers PathHandler for given route path . Parameters \u00b6 jvm path Route path for which the callback is to be registered. block Router handler block.","title":"Path"},{"location":"port_http_server/com.hexagonkt.http.server/-router/path/#path","text":"[jvm] Content fun path (path: Path, router: Router ) More info Registers PathHandler for given route path .","title":"path"},{"location":"port_http_server/com.hexagonkt.http.server/-router/path/#parameters","text":"jvm path Route path for which the callback is to be registered. router Nested Router handler. [jvm] Content fun path (handler: Router ) More info Registers PathHandler for \"/\" route with given handler .","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/path/#parameters_1","text":"jvm handler Nested Router handler. [jvm] Content fun path (block: Router .() -> Unit ) More info Registers PathHandler with specified block .","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/path/#parameters_2","text":"jvm block Router handler block. [jvm] Content fun path (path: String , router: Router ) More info Registers PathHandler for given route path .","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/path/#parameters_3","text":"jvm path Route path for which the callback is to be registered. router Nested Router handler. [jvm] Content fun path (path: String , block: Router .() -> Unit ) More info Registers PathHandler for given route path .","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/path/#parameters_4","text":"jvm path Route path for which the callback is to be registered. block Router handler block.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/post/","text":"// port_http_server / com.hexagonkt.http.server / Router / post post \u00b6 [jvm] Content fun post (path: String = \"/\", block: RouteCallback ) More info Creates POST route with given RouteCallback to be handled. Parameters \u00b6 jvm path Route path of the request. block A RouteCallback instance to be handled.","title":"Post"},{"location":"port_http_server/com.hexagonkt.http.server/-router/post/#post","text":"[jvm] Content fun post (path: String = \"/\", block: RouteCallback ) More info Creates POST route with given RouteCallback to be handled.","title":"post"},{"location":"port_http_server/com.hexagonkt.http.server/-router/post/#parameters","text":"jvm path Route path of the request. block A RouteCallback instance to be handled.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/put/","text":"// port_http_server / com.hexagonkt.http.server / Router / put put \u00b6 [jvm] Content fun put (path: String = \"/\", block: RouteCallback ) More info Creates PUT route with given RouteCallback to be handled. Parameters \u00b6 jvm path Route path of the request. block A RouteCallback instance to be handled.","title":"Put"},{"location":"port_http_server/com.hexagonkt.http.server/-router/put/#put","text":"[jvm] Content fun put (path: String = \"/\", block: RouteCallback ) More info Creates PUT route with given RouteCallback to be handled.","title":"put"},{"location":"port_http_server/com.hexagonkt.http.server/-router/put/#parameters","text":"jvm path Route path of the request. block A RouteCallback instance to be handled.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-router/request-handlers/","text":"// port_http_server / com.hexagonkt.http.server / Router / requestHandlers requestHandlers \u00b6 [jvm] Content var requestHandlers : List < RequestHandler > More info List of RequestHandler instances.","title":"Request handlers"},{"location":"port_http_server/com.hexagonkt.http.server/-router/request-handlers/#requesthandlers","text":"[jvm] Content var requestHandlers : List < RequestHandler > More info List of RequestHandler instances.","title":"requestHandlers"},{"location":"port_http_server/com.hexagonkt.http.server/-router/trace/","text":"// port_http_server / com.hexagonkt.http.server / Router / trace trace \u00b6 [jvm] Content fun trace (path: String = \"/\", block: RouteCallback ) More info Creates TRACE route with given RouteCallback to be handled. Parameters \u00b6 jvm path Route path of the request. block A RouteCallback instance to be handled.","title":"Trace"},{"location":"port_http_server/com.hexagonkt.http.server/-router/trace/#trace","text":"[jvm] Content fun trace (path: String = \"/\", block: RouteCallback ) More info Creates TRACE route with given RouteCallback to be handled.","title":"trace"},{"location":"port_http_server/com.hexagonkt.http.server/-router/trace/#parameters","text":"jvm path Route path of the request. block A RouteCallback instance to be handled.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-server/","text":"// port_http_server / com.hexagonkt.http.server / Server Server \u00b6 [jvm] data class Server ( adapter : ServerPort , router : Router , settings : ServerSettings ) Server that listen to HTTP connections on a port and address and route requests using a router. Constructors \u00b6 Server [jvm] fun Server (adapter: ServerPort = inject(), settings: ServerSettings = injectOrNull() ?: ServerSettings(), block: Router .() -> Unit )Create a server with a router. Server [jvm] fun Server (adapter: ServerPort = inject(), router: Router , settings: ServerSettings = ServerSettings()) Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary start [jvm] Content fun start () More info Start the server with the adapter instance and adds a shutdown hook for stopping the server. started [jvm] Content fun started (): Boolean More info Check whether the server has been started. stop [jvm] Content fun stop () More info Stop the server. Properties \u00b6 Name Summary contextRouter [jvm] val contextRouter : Router Provide a Router instance configured with the context path in ServerSettings . portName [jvm] val portName : String The port name of the server. runtimePort [jvm] val runtimePort : Int Runtime port of the server. settings [jvm] val settings : ServerSettings","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-server/#server","text":"[jvm] data class Server ( adapter : ServerPort , router : Router , settings : ServerSettings ) Server that listen to HTTP connections on a port and address and route requests using a router.","title":"Server"},{"location":"port_http_server/com.hexagonkt.http.server/-server/#constructors","text":"Server [jvm] fun Server (adapter: ServerPort = inject(), settings: ServerSettings = injectOrNull() ?: ServerSettings(), block: Router .() -> Unit )Create a server with a router. Server [jvm] fun Server (adapter: ServerPort = inject(), router: Router , settings: ServerSettings = ServerSettings())","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-server/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"port_http_server/com.hexagonkt.http.server/-server/#functions","text":"Name Summary start [jvm] Content fun start () More info Start the server with the adapter instance and adds a shutdown hook for stopping the server. started [jvm] Content fun started (): Boolean More info Check whether the server has been started. stop [jvm] Content fun stop () More info Stop the server.","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server/-server/#properties","text":"Name Summary contextRouter [jvm] val contextRouter : Router Provide a Router instance configured with the context path in ServerSettings . portName [jvm] val portName : String The port name of the server. runtimePort [jvm] val runtimePort : Int Runtime port of the server. settings [jvm] val settings : ServerSettings","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-server/-server/","text":"// port_http_server / com.hexagonkt.http.server / Server / Server Server \u00b6 [jvm] Content fun Server (adapter: ServerPort = inject(), settings: ServerSettings = injectOrNull() ?: ServerSettings(), block: Router .() -> Unit ) More info Create a server with a router. It is a combination of Server and Router . Return \u00b6 A new server with the built router. Parameters \u00b6 jvm adapter The server engine. settings Server settings. Port and address will be searched in this map. block Router's setup block. [jvm] Content fun Server (adapter: ServerPort = inject(), router: Router , settings: ServerSettings = ServerSettings())","title":" server"},{"location":"port_http_server/com.hexagonkt.http.server/-server/-server/#server","text":"[jvm] Content fun Server (adapter: ServerPort = inject(), settings: ServerSettings = injectOrNull() ?: ServerSettings(), block: Router .() -> Unit ) More info Create a server with a router. It is a combination of Server and Router .","title":"Server"},{"location":"port_http_server/com.hexagonkt.http.server/-server/-server/#return","text":"A new server with the built router.","title":"Return"},{"location":"port_http_server/com.hexagonkt.http.server/-server/-server/#parameters","text":"jvm adapter The server engine. settings Server settings. Port and address will be searched in this map. block Router's setup block. [jvm] Content fun Server (adapter: ServerPort = inject(), router: Router , settings: ServerSettings = ServerSettings())","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-server/context-router/","text":"// port_http_server / com.hexagonkt.http.server / Server / contextRouter contextRouter \u00b6 [jvm] Content val contextRouter : Router More info Provide a Router instance configured with the context path in ServerSettings .","title":"Context router"},{"location":"port_http_server/com.hexagonkt.http.server/-server/context-router/#contextrouter","text":"[jvm] Content val contextRouter : Router More info Provide a Router instance configured with the context path in ServerSettings .","title":"contextRouter"},{"location":"port_http_server/com.hexagonkt.http.server/-server/port-name/","text":"// port_http_server / com.hexagonkt.http.server / Server / portName portName \u00b6 [jvm] Content val portName : String More info The port name of the server.","title":"Port name"},{"location":"port_http_server/com.hexagonkt.http.server/-server/port-name/#portname","text":"[jvm] Content val portName : String More info The port name of the server.","title":"portName"},{"location":"port_http_server/com.hexagonkt.http.server/-server/runtime-port/","text":"// port_http_server / com.hexagonkt.http.server / Server / runtimePort runtimePort \u00b6 [jvm] Content val runtimePort : Int More info Runtime port of the server. Throws \u00b6 kotlin.IllegalStateException Throw an exception if the server hasn't been started.","title":"Runtime port"},{"location":"port_http_server/com.hexagonkt.http.server/-server/runtime-port/#runtimeport","text":"[jvm] Content val runtimePort : Int More info Runtime port of the server.","title":"runtimePort"},{"location":"port_http_server/com.hexagonkt.http.server/-server/runtime-port/#throws","text":"kotlin.IllegalStateException Throw an exception if the server hasn't been started.","title":"Throws"},{"location":"port_http_server/com.hexagonkt.http.server/-server/settings/","text":"// port_http_server / com.hexagonkt.http.server / Server / settings settings \u00b6 [jvm] Content val settings : ServerSettings","title":"Settings"},{"location":"port_http_server/com.hexagonkt.http.server/-server/settings/#settings","text":"[jvm] Content val settings : ServerSettings","title":"settings"},{"location":"port_http_server/com.hexagonkt.http.server/-server/start/","text":"// port_http_server / com.hexagonkt.http.server / Server / start start \u00b6 [jvm] Content fun start () More info Start the server with the adapter instance and adds a shutdown hook for stopping the server.","title":"Start"},{"location":"port_http_server/com.hexagonkt.http.server/-server/start/#start","text":"[jvm] Content fun start () More info Start the server with the adapter instance and adds a shutdown hook for stopping the server.","title":"start"},{"location":"port_http_server/com.hexagonkt.http.server/-server/started/","text":"// port_http_server / com.hexagonkt.http.server / Server / started started \u00b6 [jvm] Content fun started (): Boolean More info Check whether the server has been started. Return \u00b6 True if the server has started, else false.","title":"Started"},{"location":"port_http_server/com.hexagonkt.http.server/-server/started/#started","text":"[jvm] Content fun started (): Boolean More info Check whether the server has been started.","title":"started"},{"location":"port_http_server/com.hexagonkt.http.server/-server/started/#return","text":"True if the server has started, else false.","title":"Return"},{"location":"port_http_server/com.hexagonkt.http.server/-server/stop/","text":"// port_http_server / com.hexagonkt.http.server / Server / stop stop \u00b6 [jvm] Content fun stop () More info Stop the server.","title":"Stop"},{"location":"port_http_server/com.hexagonkt.http.server/-server/stop/#stop","text":"[jvm] Content fun stop () More info Stop the server.","title":"stop"},{"location":"port_http_server/com.hexagonkt.http.server/-server/-companion/","text":"// port_http_server / com.hexagonkt.http.server / Server / Companion Companion \u00b6 [jvm] object Companion Properties \u00b6 Name Summary banner [jvm] val banner : String","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-server/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"port_http_server/com.hexagonkt.http.server/-server/-companion/#properties","text":"Name Summary banner [jvm] val banner : String","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-server/-companion/banner/","text":"// port_http_server / com.hexagonkt.http.server / Server / Companion / banner banner \u00b6 [jvm] Content val banner : String","title":"Banner"},{"location":"port_http_server/com.hexagonkt.http.server/-server/-companion/banner/#banner","text":"[jvm] Content val banner : String","title":"banner"},{"location":"port_http_server/com.hexagonkt.http.server/-server-feature/","text":"// port_http_server / com.hexagonkt.http.server / ServerFeature ServerFeature \u00b6 [jvm] enum ServerFeature : Enum < ServerFeature > Toolkit feature that may or may not be implemented by a server adapter. Entries \u00b6 SESSIONS [jvm] SESSIONS () ZIP [jvm] ZIP () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-server-feature/#serverfeature","text":"[jvm] enum ServerFeature : Enum < ServerFeature > Toolkit feature that may or may not be implemented by a server adapter.","title":"ServerFeature"},{"location":"port_http_server/com.hexagonkt.http.server/-server-feature/#entries","text":"SESSIONS [jvm] SESSIONS () ZIP [jvm] ZIP ()","title":"Entries"},{"location":"port_http_server/com.hexagonkt.http.server/-server-feature/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-server-feature/-s-e-s-s-i-o-n-s/","text":"// port_http_server / com.hexagonkt.http.server / ServerFeature / SESSIONS SESSIONS \u00b6 [jvm] SESSIONS () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-server-feature/-s-e-s-s-i-o-n-s/#sessions","text":"[jvm] SESSIONS ()","title":"SESSIONS"},{"location":"port_http_server/com.hexagonkt.http.server/-server-feature/-s-e-s-s-i-o-n-s/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-server-feature/-s-e-s-s-i-o-n-s/name/","text":"// port_http_server / com.hexagonkt.http.server / ServerFeature / SESSIONS / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"port_http_server/com.hexagonkt.http.server/-server-feature/-s-e-s-s-i-o-n-s/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"port_http_server/com.hexagonkt.http.server/-server-feature/-s-e-s-s-i-o-n-s/ordinal/","text":"// port_http_server / com.hexagonkt.http.server / ServerFeature / SESSIONS / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"port_http_server/com.hexagonkt.http.server/-server-feature/-s-e-s-s-i-o-n-s/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"port_http_server/com.hexagonkt.http.server/-server-feature/-z-i-p/","text":"// port_http_server / com.hexagonkt.http.server / ServerFeature / ZIP ZIP \u00b6 [jvm] ZIP () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-server-feature/-z-i-p/#zip","text":"[jvm] ZIP ()","title":"ZIP"},{"location":"port_http_server/com.hexagonkt.http.server/-server-feature/-z-i-p/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-server-feature/-z-i-p/name/","text":"// port_http_server / com.hexagonkt.http.server / ServerFeature / ZIP / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"port_http_server/com.hexagonkt.http.server/-server-feature/-z-i-p/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"port_http_server/com.hexagonkt.http.server/-server-feature/-z-i-p/ordinal/","text":"// port_http_server / com.hexagonkt.http.server / ServerFeature / ZIP / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"port_http_server/com.hexagonkt.http.server/-server-feature/-z-i-p/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/","text":"// port_http_server / com.hexagonkt.http.server / ServerPort ServerPort \u00b6 [jvm] interface ServerPort Server instance of one kind. Functions \u00b6 Name Summary runtimePort [jvm] Content abstract fun runtimePort (): Int More info Get the runtime port if started, throw an exception otherwise. shutdown [jvm] Content abstract fun shutdown () More info Stop the instance of the engine. started [jvm] Content abstract fun started (): Boolean More info Check whether the server has been started or not. startup [jvm] Content abstract fun startup (server: Server ) More info Build a server of a certain engine from a server definition and runs it. supportedFeatures [jvm] Content abstract fun supportedFeatures (): Set < ServerFeature > More info Return the server adapter's supported features. supportedOptions [jvm] Content abstract fun supportedOptions (): Set < String > More info Return the server adapter's allowed configuration options. supportedProtocols [jvm] Content abstract fun supportedProtocols (): Set More info Return the server adapter's supported protocols.","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/#serverport","text":"[jvm] interface ServerPort Server instance of one kind.","title":"ServerPort"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/#functions","text":"Name Summary runtimePort [jvm] Content abstract fun runtimePort (): Int More info Get the runtime port if started, throw an exception otherwise. shutdown [jvm] Content abstract fun shutdown () More info Stop the instance of the engine. started [jvm] Content abstract fun started (): Boolean More info Check whether the server has been started or not. startup [jvm] Content abstract fun startup (server: Server ) More info Build a server of a certain engine from a server definition and runs it. supportedFeatures [jvm] Content abstract fun supportedFeatures (): Set < ServerFeature > More info Return the server adapter's supported features. supportedOptions [jvm] Content abstract fun supportedOptions (): Set < String > More info Return the server adapter's allowed configuration options. supportedProtocols [jvm] Content abstract fun supportedProtocols (): Set More info Return the server adapter's supported protocols.","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/runtime-port/","text":"// port_http_server / com.hexagonkt.http.server / ServerPort / runtimePort runtimePort \u00b6 [jvm] Content abstract fun runtimePort (): Int More info Get the runtime port if started, throw an exception otherwise.","title":"Runtime port"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/runtime-port/#runtimeport","text":"[jvm] Content abstract fun runtimePort (): Int More info Get the runtime port if started, throw an exception otherwise.","title":"runtimePort"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/shutdown/","text":"// port_http_server / com.hexagonkt.http.server / ServerPort / shutdown shutdown \u00b6 [jvm] Content abstract fun shutdown () More info Stop the instance of the engine.","title":"Shutdown"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/shutdown/#shutdown","text":"[jvm] Content abstract fun shutdown () More info Stop the instance of the engine.","title":"shutdown"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/started/","text":"// port_http_server / com.hexagonkt.http.server / ServerPort / started started \u00b6 [jvm] Content abstract fun started (): Boolean More info Check whether the server has been started or not. Return \u00b6 True if the server has started, else false.","title":"Started"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/started/#started","text":"[jvm] Content abstract fun started (): Boolean More info Check whether the server has been started or not.","title":"started"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/started/#return","text":"True if the server has started, else false.","title":"Return"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/startup/","text":"// port_http_server / com.hexagonkt.http.server / ServerPort / startup startup \u00b6 [jvm] Content abstract fun startup (server: Server ) More info Build a server of a certain engine from a server definition and runs it.","title":"Startup"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/startup/#startup","text":"[jvm] Content abstract fun startup (server: Server ) More info Build a server of a certain engine from a server definition and runs it.","title":"startup"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/supported-features/","text":"// port_http_server / com.hexagonkt.http.server / ServerPort / supportedFeatures supportedFeatures \u00b6 [jvm] Content abstract fun supportedFeatures (): Set < ServerFeature > More info Return the server adapter's supported features. Return \u00b6 Set of supported features.","title":"Supported features"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/supported-features/#supportedfeatures","text":"[jvm] Content abstract fun supportedFeatures (): Set < ServerFeature > More info Return the server adapter's supported features.","title":"supportedFeatures"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/supported-features/#return","text":"Set of supported features.","title":"Return"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/supported-options/","text":"// port_http_server / com.hexagonkt.http.server / ServerPort / supportedOptions supportedOptions \u00b6 [jvm] Content abstract fun supportedOptions (): Set < String > More info Return the server adapter's allowed configuration options. Return \u00b6 Set of supported options.","title":"Supported options"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/supported-options/#supportedoptions","text":"[jvm] Content abstract fun supportedOptions (): Set < String > More info Return the server adapter's allowed configuration options.","title":"supportedOptions"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/supported-options/#return","text":"Set of supported options.","title":"Return"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/supported-protocols/","text":"// port_http_server / com.hexagonkt.http.server / ServerPort / supportedProtocols supportedProtocols \u00b6 [jvm] Content abstract fun supportedProtocols (): Set More info Return the server adapter's supported protocols. Return \u00b6 Set of supported protocols.","title":"Supported protocols"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/supported-protocols/#supportedprotocols","text":"[jvm] Content abstract fun supportedProtocols (): Set More info Return the server adapter's supported protocols.","title":"supportedProtocols"},{"location":"port_http_server/com.hexagonkt.http.server/-server-port/supported-protocols/#return","text":"Set of supported protocols.","title":"Return"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/","text":"// port_http_server / com.hexagonkt.http.server / ServerSettings ServerSettings \u00b6 [jvm] data class ServerSettings ( bindAddress : InetAddress , bindPort : Int , contextPath : String , protocol : Protocol, sslSettings : SslSettings?, banner : String ?, features : Set < ServerFeature >, options : Map < String , Any >) Holds server settings info. Constructors \u00b6 ServerSettings [jvm] fun ServerSettings (bindAddress: InetAddress = InetAddress.getLoopbackAddress(), bindPort: Int = 2010, contextPath: String = \"\", protocol: Protocol = HTTP, sslSettings: SslSettings? = null, banner: String ? = null, features: Set < ServerFeature > = emptySet(), options: Map < String , Any > = emptyMap()) Properties \u00b6 Name Summary banner [jvm] val banner : String ? = nullServer banner message. bindAddress [jvm] val bindAddress : InetAddress Address for the server. bindPort [jvm] val bindPort : Int = 2010Port for the server. contextPath [jvm] val contextPath : String Context Path for the server's incoming requests. features [jvm] val features : Set < ServerFeature >List of features enabled for a server. options [jvm] val options : Map < String , Any >Server options. protocol [jvm] val protocol : ProtocolServer's protocol. sslSettings [jvm] val sslSettings : SslSettings? = nullSSL settings info for configuring the server.","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/#serversettings","text":"[jvm] data class ServerSettings ( bindAddress : InetAddress , bindPort : Int , contextPath : String , protocol : Protocol, sslSettings : SslSettings?, banner : String ?, features : Set < ServerFeature >, options : Map < String , Any >) Holds server settings info.","title":"ServerSettings"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/#constructors","text":"ServerSettings [jvm] fun ServerSettings (bindAddress: InetAddress = InetAddress.getLoopbackAddress(), bindPort: Int = 2010, contextPath: String = \"\", protocol: Protocol = HTTP, sslSettings: SslSettings? = null, banner: String ? = null, features: Set < ServerFeature > = emptySet(), options: Map < String , Any > = emptyMap())","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/#properties","text":"Name Summary banner [jvm] val banner : String ? = nullServer banner message. bindAddress [jvm] val bindAddress : InetAddress Address for the server. bindPort [jvm] val bindPort : Int = 2010Port for the server. contextPath [jvm] val contextPath : String Context Path for the server's incoming requests. features [jvm] val features : Set < ServerFeature >List of features enabled for a server. options [jvm] val options : Map < String , Any >Server options. protocol [jvm] val protocol : ProtocolServer's protocol. sslSettings [jvm] val sslSettings : SslSettings? = nullSSL settings info for configuring the server.","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/-server-settings/","text":"// port_http_server / com.hexagonkt.http.server / ServerSettings / ServerSettings ServerSettings \u00b6 [jvm] Content fun ServerSettings (bindAddress: InetAddress = InetAddress.getLoopbackAddress(), bindPort: Int = 2010, contextPath: String = \"\", protocol: Protocol = HTTP, sslSettings: SslSettings? = null, banner: String ? = null, features: Set < ServerFeature > = emptySet(), options: Map < String , Any > = emptyMap())","title":" server settings"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/-server-settings/#serversettings","text":"[jvm] Content fun ServerSettings (bindAddress: InetAddress = InetAddress.getLoopbackAddress(), bindPort: Int = 2010, contextPath: String = \"\", protocol: Protocol = HTTP, sslSettings: SslSettings? = null, banner: String ? = null, features: Set < ServerFeature > = emptySet(), options: Map < String , Any > = emptyMap())","title":"ServerSettings"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/banner/","text":"// port_http_server / com.hexagonkt.http.server / ServerSettings / banner banner \u00b6 [jvm] Content val banner : String ? = null","title":"Banner"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/banner/#banner","text":"[jvm] Content val banner : String ? = null","title":"banner"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/bind-address/","text":"// port_http_server / com.hexagonkt.http.server / ServerSettings / bindAddress bindAddress \u00b6 [jvm] Content val bindAddress : InetAddress","title":"Bind address"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/bind-address/#bindaddress","text":"[jvm] Content val bindAddress : InetAddress","title":"bindAddress"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/bind-port/","text":"// port_http_server / com.hexagonkt.http.server / ServerSettings / bindPort bindPort \u00b6 [jvm] Content val bindPort : Int = 2010","title":"Bind port"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/bind-port/#bindport","text":"[jvm] Content val bindPort : Int = 2010","title":"bindPort"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/context-path/","text":"// port_http_server / com.hexagonkt.http.server / ServerSettings / contextPath contextPath \u00b6 [jvm] Content val contextPath : String","title":"Context path"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/context-path/#contextpath","text":"[jvm] Content val contextPath : String","title":"contextPath"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/features/","text":"// port_http_server / com.hexagonkt.http.server / ServerSettings / features features \u00b6 [jvm] Content val features : Set < ServerFeature >","title":"Features"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/features/#features","text":"[jvm] Content val features : Set < ServerFeature >","title":"features"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/options/","text":"// port_http_server / com.hexagonkt.http.server / ServerSettings / options options \u00b6 [jvm] Content val options : Map < String , Any >","title":"Options"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/options/#options","text":"[jvm] Content val options : Map < String , Any >","title":"options"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/protocol/","text":"// port_http_server / com.hexagonkt.http.server / ServerSettings / protocol protocol \u00b6 [jvm] Content val protocol : Protocol","title":"Protocol"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/protocol/#protocol","text":"[jvm] Content val protocol : Protocol","title":"protocol"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/ssl-settings/","text":"// port_http_server / com.hexagonkt.http.server / ServerSettings / sslSettings sslSettings \u00b6 [jvm] Content val sslSettings : SslSettings? = null","title":"Ssl settings"},{"location":"port_http_server/com.hexagonkt.http.server/-server-settings/ssl-settings/#sslsettings","text":"[jvm] Content val sslSettings : SslSettings? = null","title":"sslSettings"},{"location":"port_http_server/com.hexagonkt.http.server/-session/","text":"// port_http_server / com.hexagonkt.http.server / Session Session \u00b6 [jvm] class Session ( adapter : SessionPort ) Provides session information. Constructors \u00b6 Session [jvm] fun Session (adapter: SessionPort ) Functions \u00b6 Name Summary get [jvm] Content fun get (name: String ): Any ? More info Returns the attribute object bound to this session by the given name. invalidate [jvm] Content fun invalidate () More info Invalidates this session then unbinds any objects bound to it. isNew [jvm] Content fun isNew (): Boolean More info Returns true if the client does not yet know about the session or if the client chooses not to join the session. remove [jvm] Content fun remove (name: String ) More info Removes the bound object from the session attribute with the specified name. removeAttribute [jvm] Content fun removeAttribute (name: String ) More info Removes the bound object from the session attribute with the specified name. set [jvm] Content fun set (name: String , value: Any ) More info Sets a attribute object to this session with the given name. Properties \u00b6 Name Summary adapter [jvm] val adapter : SessionPort attributes [jvm] val attributes : Map < String , Any ?> Map of attribute objects bound to the session. creationTime [jvm] val creationTime : Long ?The time when this session was created. id [jvm] val id : String ?A string containing the unique identifier assigned to this session (Cookie). lastAccessedTime [jvm] val lastAccessedTime : Long ?The last time the client sent a request associated with this session. maxInactiveInterval [jvm] var maxInactiveInterval : Int ?The maximum time interval in seconds between client accesses after which the session will be invalidated.","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-session/#session","text":"[jvm] class Session ( adapter : SessionPort ) Provides session information.","title":"Session"},{"location":"port_http_server/com.hexagonkt.http.server/-session/#constructors","text":"Session [jvm] fun Session (adapter: SessionPort )","title":"Constructors"},{"location":"port_http_server/com.hexagonkt.http.server/-session/#functions","text":"Name Summary get [jvm] Content fun get (name: String ): Any ? More info Returns the attribute object bound to this session by the given name. invalidate [jvm] Content fun invalidate () More info Invalidates this session then unbinds any objects bound to it. isNew [jvm] Content fun isNew (): Boolean More info Returns true if the client does not yet know about the session or if the client chooses not to join the session. remove [jvm] Content fun remove (name: String ) More info Removes the bound object from the session attribute with the specified name. removeAttribute [jvm] Content fun removeAttribute (name: String ) More info Removes the bound object from the session attribute with the specified name. set [jvm] Content fun set (name: String , value: Any ) More info Sets a attribute object to this session with the given name.","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server/-session/#properties","text":"Name Summary adapter [jvm] val adapter : SessionPort attributes [jvm] val attributes : Map < String , Any ?> Map of attribute objects bound to the session. creationTime [jvm] val creationTime : Long ?The time when this session was created. id [jvm] val id : String ?A string containing the unique identifier assigned to this session (Cookie). lastAccessedTime [jvm] val lastAccessedTime : Long ?The last time the client sent a request associated with this session. maxInactiveInterval [jvm] var maxInactiveInterval : Int ?The maximum time interval in seconds between client accesses after which the session will be invalidated.","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server/-session/-session/","text":"// port_http_server / com.hexagonkt.http.server / Session / Session Session \u00b6 [jvm] Content fun Session (adapter: SessionPort )","title":" session"},{"location":"port_http_server/com.hexagonkt.http.server/-session/-session/#session","text":"[jvm] Content fun Session (adapter: SessionPort )","title":"Session"},{"location":"port_http_server/com.hexagonkt.http.server/-session/adapter/","text":"// port_http_server / com.hexagonkt.http.server / Session / adapter adapter \u00b6 [jvm] Content val adapter : SessionPort","title":"Adapter"},{"location":"port_http_server/com.hexagonkt.http.server/-session/adapter/#adapter","text":"[jvm] Content val adapter : SessionPort","title":"adapter"},{"location":"port_http_server/com.hexagonkt.http.server/-session/attributes/","text":"// port_http_server / com.hexagonkt.http.server / Session / attributes attributes \u00b6 [jvm] Content val attributes : Map < String , Any ?> More info Map of attribute objects bound to the session.","title":"Attributes"},{"location":"port_http_server/com.hexagonkt.http.server/-session/attributes/#attributes","text":"[jvm] Content val attributes : Map < String , Any ?> More info Map of attribute objects bound to the session.","title":"attributes"},{"location":"port_http_server/com.hexagonkt.http.server/-session/creation-time/","text":"// port_http_server / com.hexagonkt.http.server / Session / creationTime creationTime \u00b6 [jvm] Content val creationTime : Long ? More info The time when this session was created.","title":"Creation time"},{"location":"port_http_server/com.hexagonkt.http.server/-session/creation-time/#creationtime","text":"[jvm] Content val creationTime : Long ? More info The time when this session was created.","title":"creationTime"},{"location":"port_http_server/com.hexagonkt.http.server/-session/get/","text":"// port_http_server / com.hexagonkt.http.server / Session / get get \u00b6 [jvm] Content fun get (name: String ): Any ? More info Returns the attribute object bound to this session by the given name. Parameters \u00b6 jvm name String specifying the name of the object.","title":"Get"},{"location":"port_http_server/com.hexagonkt.http.server/-session/get/#get","text":"[jvm] Content fun get (name: String ): Any ? More info Returns the attribute object bound to this session by the given name.","title":"get"},{"location":"port_http_server/com.hexagonkt.http.server/-session/get/#parameters","text":"jvm name String specifying the name of the object.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-session/id/","text":"// port_http_server / com.hexagonkt.http.server / Session / id id \u00b6 [jvm] Content val id : String ? More info A string containing the unique identifier assigned to this session (Cookie).","title":"Id"},{"location":"port_http_server/com.hexagonkt.http.server/-session/id/#id","text":"[jvm] Content val id : String ? More info A string containing the unique identifier assigned to this session (Cookie).","title":"id"},{"location":"port_http_server/com.hexagonkt.http.server/-session/invalidate/","text":"// port_http_server / com.hexagonkt.http.server / Session / invalidate invalidate \u00b6 [jvm] Content fun invalidate () More info Invalidates this session then unbinds any objects bound to it.","title":"Invalidate"},{"location":"port_http_server/com.hexagonkt.http.server/-session/invalidate/#invalidate","text":"[jvm] Content fun invalidate () More info Invalidates this session then unbinds any objects bound to it.","title":"invalidate"},{"location":"port_http_server/com.hexagonkt.http.server/-session/is-new/","text":"// port_http_server / com.hexagonkt.http.server / Session / isNew isNew \u00b6 [jvm] Content fun isNew (): Boolean More info Returns true if the client does not yet know about the session or if the client chooses not to join the session.","title":"Is new"},{"location":"port_http_server/com.hexagonkt.http.server/-session/is-new/#isnew","text":"[jvm] Content fun isNew (): Boolean More info Returns true if the client does not yet know about the session or if the client chooses not to join the session.","title":"isNew"},{"location":"port_http_server/com.hexagonkt.http.server/-session/last-accessed-time/","text":"// port_http_server / com.hexagonkt.http.server / Session / lastAccessedTime lastAccessedTime \u00b6 [jvm] Content val lastAccessedTime : Long ? More info The last time the client sent a request associated with this session.","title":"Last accessed time"},{"location":"port_http_server/com.hexagonkt.http.server/-session/last-accessed-time/#lastaccessedtime","text":"[jvm] Content val lastAccessedTime : Long ? More info The last time the client sent a request associated with this session.","title":"lastAccessedTime"},{"location":"port_http_server/com.hexagonkt.http.server/-session/max-inactive-interval/","text":"// port_http_server / com.hexagonkt.http.server / Session / maxInactiveInterval maxInactiveInterval \u00b6 [jvm] Content var maxInactiveInterval : Int ? More info The maximum time interval in seconds between client accesses after which the session will be invalidated.","title":"Max inactive interval"},{"location":"port_http_server/com.hexagonkt.http.server/-session/max-inactive-interval/#maxinactiveinterval","text":"[jvm] Content var maxInactiveInterval : Int ? More info The maximum time interval in seconds between client accesses after which the session will be invalidated.","title":"maxInactiveInterval"},{"location":"port_http_server/com.hexagonkt.http.server/-session/remove-attribute/","text":"// port_http_server / com.hexagonkt.http.server / Session / removeAttribute removeAttribute \u00b6 [jvm] Content fun removeAttribute (name: String ) More info Removes the bound object from the session attribute with the specified name. Parameters \u00b6 jvm name String specifying the name of the object.","title":"Remove attribute"},{"location":"port_http_server/com.hexagonkt.http.server/-session/remove-attribute/#removeattribute","text":"[jvm] Content fun removeAttribute (name: String ) More info Removes the bound object from the session attribute with the specified name.","title":"removeAttribute"},{"location":"port_http_server/com.hexagonkt.http.server/-session/remove-attribute/#parameters","text":"jvm name String specifying the name of the object.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-session/remove/","text":"// port_http_server / com.hexagonkt.http.server / Session / remove remove \u00b6 [jvm] Content fun remove (name: String ) More info Removes the bound object from the session attribute with the specified name. Parameters \u00b6 jvm name String specifying the name of the object.","title":"Remove"},{"location":"port_http_server/com.hexagonkt.http.server/-session/remove/#remove","text":"[jvm] Content fun remove (name: String ) More info Removes the bound object from the session attribute with the specified name.","title":"remove"},{"location":"port_http_server/com.hexagonkt.http.server/-session/remove/#parameters","text":"jvm name String specifying the name of the object.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-session/set/","text":"// port_http_server / com.hexagonkt.http.server / Session / set set \u00b6 [jvm] Content fun set (name: String , value: Any ) More info Sets a attribute object to this session with the given name. Parameters \u00b6 jvm name String specifying the name of the object. value The object to be bound.","title":"Set"},{"location":"port_http_server/com.hexagonkt.http.server/-session/set/#set","text":"[jvm] Content fun set (name: String , value: Any ) More info Sets a attribute object to this session with the given name.","title":"set"},{"location":"port_http_server/com.hexagonkt.http.server/-session/set/#parameters","text":"jvm name String specifying the name of the object. value The object to be bound.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/","text":"// port_http_server / com.hexagonkt.http.server / SessionPort SessionPort \u00b6 [jvm] interface SessionPort Functions \u00b6 Name Summary attributes [jvm] Content abstract fun attributes (): Map < String , Any ?> More info Returns a Map of attribute object bound to this session. creationTime [jvm] Content abstract fun creationTime (): Long ? More info Returns the time when this session was created. getAttribute [jvm] Content abstract fun getAttribute (name: String ): Any ? More info Returns the attribute object bound to this session by the given name. id [jvm] Content abstract fun id (): String ? More info A string containing the unique identifier assigned to this session (Cookie). invalidate [jvm] Content abstract fun invalidate () More info Invalidates this session then unbinds any objects bound to it. isNew [jvm] Content abstract fun isNew (): Boolean More info Returns true if the client does not yet know about the session or if the client chooses not to join the session. lastAccessedTime [jvm] Content abstract fun lastAccessedTime (): Long ? More info Returns the last time the client sent a request associated with this session. maxInactiveInterval [jvm] Content abstract fun maxInactiveInterval (): Int ? More info Returns the maximum time interval in seconds between client accesses after which the session will be invalidated. [jvm] Content abstract fun maxInactiveInterval (value: Int ?) More info Sets the time, in seconds, between client requests before the session is invalidated. removeAttribute [jvm] Content abstract fun removeAttribute (name: String ) More info Removes the bound object from the session attribute with the specified name. setAttribute [jvm] Content abstract fun setAttribute (name: String , value: Any ) More info Sets a attribute object to this session with the given name. Inheritors \u00b6 Name UnsupportedSessionAdapter TestSession","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/#sessionport","text":"[jvm] interface SessionPort","title":"SessionPort"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/#functions","text":"Name Summary attributes [jvm] Content abstract fun attributes (): Map < String , Any ?> More info Returns a Map of attribute object bound to this session. creationTime [jvm] Content abstract fun creationTime (): Long ? More info Returns the time when this session was created. getAttribute [jvm] Content abstract fun getAttribute (name: String ): Any ? More info Returns the attribute object bound to this session by the given name. id [jvm] Content abstract fun id (): String ? More info A string containing the unique identifier assigned to this session (Cookie). invalidate [jvm] Content abstract fun invalidate () More info Invalidates this session then unbinds any objects bound to it. isNew [jvm] Content abstract fun isNew (): Boolean More info Returns true if the client does not yet know about the session or if the client chooses not to join the session. lastAccessedTime [jvm] Content abstract fun lastAccessedTime (): Long ? More info Returns the last time the client sent a request associated with this session. maxInactiveInterval [jvm] Content abstract fun maxInactiveInterval (): Int ? More info Returns the maximum time interval in seconds between client accesses after which the session will be invalidated. [jvm] Content abstract fun maxInactiveInterval (value: Int ?) More info Sets the time, in seconds, between client requests before the session is invalidated. removeAttribute [jvm] Content abstract fun removeAttribute (name: String ) More info Removes the bound object from the session attribute with the specified name. setAttribute [jvm] Content abstract fun setAttribute (name: String , value: Any ) More info Sets a attribute object to this session with the given name.","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/#inheritors","text":"Name UnsupportedSessionAdapter TestSession","title":"Inheritors"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/attributes/","text":"// port_http_server / com.hexagonkt.http.server / SessionPort / attributes attributes \u00b6 [jvm] Content abstract fun attributes (): Map < String , Any ?> More info Returns a Map of attribute object bound to this session.","title":"Attributes"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/attributes/#attributes","text":"[jvm] Content abstract fun attributes (): Map < String , Any ?> More info Returns a Map of attribute object bound to this session.","title":"attributes"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/creation-time/","text":"// port_http_server / com.hexagonkt.http.server / SessionPort / creationTime creationTime \u00b6 [jvm] Content abstract fun creationTime (): Long ? More info Returns the time when this session was created.","title":"Creation time"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/creation-time/#creationtime","text":"[jvm] Content abstract fun creationTime (): Long ? More info Returns the time when this session was created.","title":"creationTime"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/get-attribute/","text":"// port_http_server / com.hexagonkt.http.server / SessionPort / getAttribute getAttribute \u00b6 [jvm] Content abstract fun getAttribute (name: String ): Any ? More info Returns the attribute object bound to this session by the given name. Parameters \u00b6 jvm name String specifying the name of the object.","title":"Get attribute"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/get-attribute/#getattribute","text":"[jvm] Content abstract fun getAttribute (name: String ): Any ? More info Returns the attribute object bound to this session by the given name.","title":"getAttribute"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/get-attribute/#parameters","text":"jvm name String specifying the name of the object.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/id/","text":"// port_http_server / com.hexagonkt.http.server / SessionPort / id id \u00b6 [jvm] Content abstract fun id (): String ? More info A string containing the unique identifier assigned to this session (Cookie).","title":"Id"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/id/#id","text":"[jvm] Content abstract fun id (): String ? More info A string containing the unique identifier assigned to this session (Cookie).","title":"id"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/invalidate/","text":"// port_http_server / com.hexagonkt.http.server / SessionPort / invalidate invalidate \u00b6 [jvm] Content abstract fun invalidate () More info Invalidates this session then unbinds any objects bound to it.","title":"Invalidate"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/invalidate/#invalidate","text":"[jvm] Content abstract fun invalidate () More info Invalidates this session then unbinds any objects bound to it.","title":"invalidate"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/is-new/","text":"// port_http_server / com.hexagonkt.http.server / SessionPort / isNew isNew \u00b6 [jvm] Content abstract fun isNew (): Boolean More info Returns true if the client does not yet know about the session or if the client chooses not to join the session.","title":"Is new"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/is-new/#isnew","text":"[jvm] Content abstract fun isNew (): Boolean More info Returns true if the client does not yet know about the session or if the client chooses not to join the session.","title":"isNew"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/last-accessed-time/","text":"// port_http_server / com.hexagonkt.http.server / SessionPort / lastAccessedTime lastAccessedTime \u00b6 [jvm] Content abstract fun lastAccessedTime (): Long ? More info Returns the last time the client sent a request associated with this session.","title":"Last accessed time"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/last-accessed-time/#lastaccessedtime","text":"[jvm] Content abstract fun lastAccessedTime (): Long ? More info Returns the last time the client sent a request associated with this session.","title":"lastAccessedTime"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/max-inactive-interval/","text":"// port_http_server / com.hexagonkt.http.server / SessionPort / maxInactiveInterval maxInactiveInterval \u00b6 [jvm] Content abstract fun maxInactiveInterval (): Int ? More info Returns the maximum time interval in seconds between client accesses after which the session will be invalidated. [jvm] Content abstract fun maxInactiveInterval (value: Int ?) More info Sets the time, in seconds, between client requests before the session is invalidated. Parameters \u00b6 jvm value Maximum inactive time interval in seconds.","title":"Max inactive interval"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/max-inactive-interval/#maxinactiveinterval","text":"[jvm] Content abstract fun maxInactiveInterval (): Int ? More info Returns the maximum time interval in seconds between client accesses after which the session will be invalidated. [jvm] Content abstract fun maxInactiveInterval (value: Int ?) More info Sets the time, in seconds, between client requests before the session is invalidated.","title":"maxInactiveInterval"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/max-inactive-interval/#parameters","text":"jvm value Maximum inactive time interval in seconds.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/remove-attribute/","text":"// port_http_server / com.hexagonkt.http.server / SessionPort / removeAttribute removeAttribute \u00b6 [jvm] Content abstract fun removeAttribute (name: String ) More info Removes the bound object from the session attribute with the specified name. Parameters \u00b6 jvm name String specifying the name of the object.","title":"Remove attribute"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/remove-attribute/#removeattribute","text":"[jvm] Content abstract fun removeAttribute (name: String ) More info Removes the bound object from the session attribute with the specified name.","title":"removeAttribute"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/remove-attribute/#parameters","text":"jvm name String specifying the name of the object.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/set-attribute/","text":"// port_http_server / com.hexagonkt.http.server / SessionPort / setAttribute setAttribute \u00b6 [jvm] Content abstract fun setAttribute (name: String , value: Any ) More info Sets a attribute object to this session with the given name. Parameters \u00b6 jvm name String specifying the name of the object. value The object to be bound.","title":"Set attribute"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/set-attribute/#setattribute","text":"[jvm] Content abstract fun setAttribute (name: String , value: Any ) More info Sets a attribute object to this session with the given name.","title":"setAttribute"},{"location":"port_http_server/com.hexagonkt.http.server/-session-port/set-attribute/#parameters","text":"jvm name String specifying the name of the object. value The object to be bound.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/","text":"// port_http_server / com.hexagonkt.http.server / UnsupportedSessionAdapter UnsupportedSessionAdapter \u00b6 [jvm] object UnsupportedSessionAdapter : SessionPort Functions \u00b6 Name Summary attributes [jvm] Content open override fun attributes (): Map < String , Any ?> More info Returns a Map of attribute object bound to this session. creationTime [jvm] Content open override fun creationTime (): Long ? More info Returns the time when this session was created. getAttribute [jvm] Content open override fun getAttribute (name: String ): Any ? More info Returns the attribute object bound to this session by the given name. id [jvm] Content open override fun id (): String ? More info A string containing the unique identifier assigned to this session (Cookie). invalidate [jvm] Content open override fun invalidate () More info Invalidates this session then unbinds any objects bound to it. isNew [jvm] Content open override fun isNew (): Boolean More info Returns true if the client does not yet know about the session or if the client chooses not to join the session. lastAccessedTime [jvm] Content open override fun lastAccessedTime (): Long ? More info Returns the last time the client sent a request associated with this session. maxInactiveInterval [jvm] Content open override fun maxInactiveInterval (): Int ? More info Returns the maximum time interval in seconds between client accesses after which the session will be invalidated. [jvm] Content open override fun maxInactiveInterval (value: Int ?) More info Sets the time, in seconds, between client requests before the session is invalidated. removeAttribute [jvm] Content open override fun removeAttribute (name: String ) More info Removes the bound object from the session attribute with the specified name. setAttribute [jvm] Content open override fun setAttribute (name: String , value: Any ) More info Sets a attribute object to this session with the given name.","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/#unsupportedsessionadapter","text":"[jvm] object UnsupportedSessionAdapter : SessionPort","title":"UnsupportedSessionAdapter"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/#functions","text":"Name Summary attributes [jvm] Content open override fun attributes (): Map < String , Any ?> More info Returns a Map of attribute object bound to this session. creationTime [jvm] Content open override fun creationTime (): Long ? More info Returns the time when this session was created. getAttribute [jvm] Content open override fun getAttribute (name: String ): Any ? More info Returns the attribute object bound to this session by the given name. id [jvm] Content open override fun id (): String ? More info A string containing the unique identifier assigned to this session (Cookie). invalidate [jvm] Content open override fun invalidate () More info Invalidates this session then unbinds any objects bound to it. isNew [jvm] Content open override fun isNew (): Boolean More info Returns true if the client does not yet know about the session or if the client chooses not to join the session. lastAccessedTime [jvm] Content open override fun lastAccessedTime (): Long ? More info Returns the last time the client sent a request associated with this session. maxInactiveInterval [jvm] Content open override fun maxInactiveInterval (): Int ? More info Returns the maximum time interval in seconds between client accesses after which the session will be invalidated. [jvm] Content open override fun maxInactiveInterval (value: Int ?) More info Sets the time, in seconds, between client requests before the session is invalidated. removeAttribute [jvm] Content open override fun removeAttribute (name: String ) More info Removes the bound object from the session attribute with the specified name. setAttribute [jvm] Content open override fun setAttribute (name: String , value: Any ) More info Sets a attribute object to this session with the given name.","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/attributes/","text":"// port_http_server / com.hexagonkt.http.server / UnsupportedSessionAdapter / attributes attributes \u00b6 [jvm] Content open override fun attributes (): Map < String , Any ?> More info Returns a Map of attribute object bound to this session.","title":"Attributes"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/attributes/#attributes","text":"[jvm] Content open override fun attributes (): Map < String , Any ?> More info Returns a Map of attribute object bound to this session.","title":"attributes"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/creation-time/","text":"// port_http_server / com.hexagonkt.http.server / UnsupportedSessionAdapter / creationTime creationTime \u00b6 [jvm] Content open override fun creationTime (): Long ? More info Returns the time when this session was created.","title":"Creation time"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/creation-time/#creationtime","text":"[jvm] Content open override fun creationTime (): Long ? More info Returns the time when this session was created.","title":"creationTime"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/get-attribute/","text":"// port_http_server / com.hexagonkt.http.server / UnsupportedSessionAdapter / getAttribute getAttribute \u00b6 [jvm] Content open override fun getAttribute (name: String ): Any ? More info Returns the attribute object bound to this session by the given name. Parameters \u00b6 jvm name String specifying the name of the object.","title":"Get attribute"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/get-attribute/#getattribute","text":"[jvm] Content open override fun getAttribute (name: String ): Any ? More info Returns the attribute object bound to this session by the given name.","title":"getAttribute"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/get-attribute/#parameters","text":"jvm name String specifying the name of the object.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/id/","text":"// port_http_server / com.hexagonkt.http.server / UnsupportedSessionAdapter / id id \u00b6 [jvm] Content open override fun id (): String ? More info A string containing the unique identifier assigned to this session (Cookie).","title":"Id"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/id/#id","text":"[jvm] Content open override fun id (): String ? More info A string containing the unique identifier assigned to this session (Cookie).","title":"id"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/invalidate/","text":"// port_http_server / com.hexagonkt.http.server / UnsupportedSessionAdapter / invalidate invalidate \u00b6 [jvm] Content open override fun invalidate () More info Invalidates this session then unbinds any objects bound to it.","title":"Invalidate"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/invalidate/#invalidate","text":"[jvm] Content open override fun invalidate () More info Invalidates this session then unbinds any objects bound to it.","title":"invalidate"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/is-new/","text":"// port_http_server / com.hexagonkt.http.server / UnsupportedSessionAdapter / isNew isNew \u00b6 [jvm] Content open override fun isNew (): Boolean More info Returns true if the client does not yet know about the session or if the client chooses not to join the session.","title":"Is new"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/is-new/#isnew","text":"[jvm] Content open override fun isNew (): Boolean More info Returns true if the client does not yet know about the session or if the client chooses not to join the session.","title":"isNew"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/last-accessed-time/","text":"// port_http_server / com.hexagonkt.http.server / UnsupportedSessionAdapter / lastAccessedTime lastAccessedTime \u00b6 [jvm] Content open override fun lastAccessedTime (): Long ? More info Returns the last time the client sent a request associated with this session.","title":"Last accessed time"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/last-accessed-time/#lastaccessedtime","text":"[jvm] Content open override fun lastAccessedTime (): Long ? More info Returns the last time the client sent a request associated with this session.","title":"lastAccessedTime"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/max-inactive-interval/","text":"// port_http_server / com.hexagonkt.http.server / UnsupportedSessionAdapter / maxInactiveInterval maxInactiveInterval \u00b6 [jvm] Content open override fun maxInactiveInterval (): Int ? More info Returns the maximum time interval in seconds between client accesses after which the session will be invalidated. [jvm] Content open override fun maxInactiveInterval (value: Int ?) More info Sets the time, in seconds, between client requests before the session is invalidated. Parameters \u00b6 jvm value Maximum inactive time interval in seconds.","title":"Max inactive interval"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/max-inactive-interval/#maxinactiveinterval","text":"[jvm] Content open override fun maxInactiveInterval (): Int ? More info Returns the maximum time interval in seconds between client accesses after which the session will be invalidated. [jvm] Content open override fun maxInactiveInterval (value: Int ?) More info Sets the time, in seconds, between client requests before the session is invalidated.","title":"maxInactiveInterval"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/max-inactive-interval/#parameters","text":"jvm value Maximum inactive time interval in seconds.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/remove-attribute/","text":"// port_http_server / com.hexagonkt.http.server / UnsupportedSessionAdapter / removeAttribute removeAttribute \u00b6 [jvm] Content open override fun removeAttribute (name: String ) More info Removes the bound object from the session attribute with the specified name. Parameters \u00b6 jvm name String specifying the name of the object.","title":"Remove attribute"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/remove-attribute/#removeattribute","text":"[jvm] Content open override fun removeAttribute (name: String ) More info Removes the bound object from the session attribute with the specified name.","title":"removeAttribute"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/remove-attribute/#parameters","text":"jvm name String specifying the name of the object.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/set-attribute/","text":"// port_http_server / com.hexagonkt.http.server / UnsupportedSessionAdapter / setAttribute setAttribute \u00b6 [jvm] Content open override fun setAttribute (name: String , value: Any ) More info Sets a attribute object to this session with the given name. Parameters \u00b6 jvm name String specifying the name of the object. value The object to be bound.","title":"Set attribute"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/set-attribute/#setattribute","text":"[jvm] Content open override fun setAttribute (name: String , value: Any ) More info Sets a attribute object to this session with the given name.","title":"setAttribute"},{"location":"port_http_server/com.hexagonkt.http.server/-unsupported-session-adapter/set-attribute/#parameters","text":"jvm name String specifying the name of the object. value The object to be bound.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server.examples/","text":"// port_http_server / com.hexagonkt.http.server.examples Package com.hexagonkt.http.server.examples \u00b6 Types \u00b6 Name Summary BooksTest [jvm] Content abstract class BooksTest ( adapter : ServerPort ) CookiesTest [jvm] Content abstract class CookiesTest ( adapter : ServerPort ) CorsTest [jvm] Content abstract class CorsTest ( adapter : ServerPort ) ErrorsTest [jvm] Content abstract class ErrorsTest ( adapter : ServerPort ) FilesTest [jvm] Content abstract class FilesTest ( adapter : ServerPort ) FiltersTest [jvm] Content abstract class FiltersTest ( adapter : ServerPort ) GenericTest [jvm] Content abstract class GenericTest ( adapter : ServerPort ) HttpsTest [jvm] Content abstract class HttpsTest ( adapter : ServerPort ) SessionTest [jvm] Content abstract class SessionTest ( adapter : ServerPort ) ZipTest [jvm] Content abstract class ZipTest ( adapter : ServerPort )","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server.examples/#package-comhexagonkthttpserverexamples","text":"","title":"Package com.hexagonkt.http.server.examples"},{"location":"port_http_server/com.hexagonkt.http.server.examples/#types","text":"Name Summary BooksTest [jvm] Content abstract class BooksTest ( adapter : ServerPort ) CookiesTest [jvm] Content abstract class CookiesTest ( adapter : ServerPort ) CorsTest [jvm] Content abstract class CorsTest ( adapter : ServerPort ) ErrorsTest [jvm] Content abstract class ErrorsTest ( adapter : ServerPort ) FilesTest [jvm] Content abstract class FilesTest ( adapter : ServerPort ) FiltersTest [jvm] Content abstract class FiltersTest ( adapter : ServerPort ) GenericTest [jvm] Content abstract class GenericTest ( adapter : ServerPort ) HttpsTest [jvm] Content abstract class HttpsTest ( adapter : ServerPort ) SessionTest [jvm] Content abstract class SessionTest ( adapter : ServerPort ) ZipTest [jvm] Content abstract class ZipTest ( adapter : ServerPort )","title":"Types"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/","text":"// port_http_server / com.hexagonkt.http.server.examples / BooksTest BooksTest \u00b6 [jvm] abstract class BooksTest ( adapter : ServerPort ) Types \u00b6 Name Summary Book [jvm] Content data class Book ( author : String , title : String ) Functions \u00b6 Name Summary Book not found returns a 404 [jvm] Content fun Book not found returns a 404 () Create book returns 201 and new book ID [jvm] Content fun Create book returns 201 and new book ID () Delete book returns the deleted record ID [jvm] Content fun Delete book returns the deleted record ID () Get book returns all book's fields [jvm] Content fun Get book returns all book's fields () initialize [jvm] Content fun initialize () Invalid method returns 405 [jvm] Content fun Invalid method returns 405 () List books contains all books IDs [jvm] Content fun List books contains all books IDs () shutdown [jvm] Content fun shutdown () Update book overrides existing book data [jvm] Content fun Update book overrides existing book data () Properties \u00b6 Name Summary server [jvm] val server : Server","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/#bookstest","text":"[jvm] abstract class BooksTest ( adapter : ServerPort )","title":"BooksTest"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/#types","text":"Name Summary Book [jvm] Content data class Book ( author : String , title : String )","title":"Types"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/#functions","text":"Name Summary Book not found returns a 404 [jvm] Content fun Book not found returns a 404 () Create book returns 201 and new book ID [jvm] Content fun Create book returns 201 and new book ID () Delete book returns the deleted record ID [jvm] Content fun Delete book returns the deleted record ID () Get book returns all book's fields [jvm] Content fun Get book returns all book's fields () initialize [jvm] Content fun initialize () Invalid method returns 405 [jvm] Content fun Invalid method returns 405 () List books contains all books IDs [jvm] Content fun List books contains all books IDs () shutdown [jvm] Content fun shutdown () Update book overrides existing book data [jvm] Content fun Update book overrides existing book data ()","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/#properties","text":"Name Summary server [jvm] val server : Server","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-book%20not%20found%20returns%20a%20404/","text":"// port_http_server / com.hexagonkt.http.server.examples / BooksTest / Book not found returns a 404 Book not found returns a 404 \u00b6 [jvm] Content fun Book not found returns a 404 ()","title":" book not found returns a 404"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-book%20not%20found%20returns%20a%20404/#book-not-found-returns-a-404","text":"[jvm] Content fun Book not found returns a 404 ()","title":"Book not found returns a 404"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-books-test/","text":"// port_http_server / com.hexagonkt.http.server.examples / BooksTest / BooksTest BooksTest \u00b6 [jvm] Content fun BooksTest (adapter: ServerPort )","title":" books test"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-books-test/#bookstest","text":"[jvm] Content fun BooksTest (adapter: ServerPort )","title":"BooksTest"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-create%20book%20returns%20201%20and%20new%20book%20-i-d/","text":"// port_http_server / com.hexagonkt.http.server.examples / BooksTest / Create book returns 201 and new book ID Create book returns 201 and new book ID \u00b6 [jvm] Content fun Create book returns 201 and new book ID ()","title":" create book returns 201 and new book  i d"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-create%20book%20returns%20201%20and%20new%20book%20-i-d/#create-book-returns-201-and-new-book-id","text":"[jvm] Content fun Create book returns 201 and new book ID ()","title":"Create book returns 201 and new book ID"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-delete%20book%20returns%20the%20deleted%20record%20-i-d/","text":"// port_http_server / com.hexagonkt.http.server.examples / BooksTest / Delete book returns the deleted record ID Delete book returns the deleted record ID \u00b6 [jvm] Content fun Delete book returns the deleted record ID ()","title":" delete book returns the deleted record  i d"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-delete%20book%20returns%20the%20deleted%20record%20-i-d/#delete-book-returns-the-deleted-record-id","text":"[jvm] Content fun Delete book returns the deleted record ID ()","title":"Delete book returns the deleted record ID"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-get%20book%20returns%20all%20book%27s%20fields/","text":"// port_http_server / com.hexagonkt.http.server.examples / BooksTest / Get book returns all book's fields Get book returns all book's fields \u00b6 [jvm] Content fun Get book returns all book's fields ()","title":" get book returns all book's fields"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-get%20book%20returns%20all%20book%27s%20fields/#get-book-returns-all-books-fields","text":"[jvm] Content fun Get book returns all book's fields ()","title":"Get book returns all book's fields"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-invalid%20method%20returns%20405/","text":"// port_http_server / com.hexagonkt.http.server.examples / BooksTest / Invalid method returns 405 Invalid method returns 405 \u00b6 [jvm] Content fun Invalid method returns 405 ()","title":" invalid method returns 405"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-invalid%20method%20returns%20405/#invalid-method-returns-405","text":"[jvm] Content fun Invalid method returns 405 ()","title":"Invalid method returns 405"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-list%20books%20contains%20all%20books%20-i-ds/","text":"// port_http_server / com.hexagonkt.http.server.examples / BooksTest / List books contains all books IDs List books contains all books IDs \u00b6 [jvm] Content fun List books contains all books IDs ()","title":" list books contains all books  i ds"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-list%20books%20contains%20all%20books%20-i-ds/#list-books-contains-all-books-ids","text":"[jvm] Content fun List books contains all books IDs ()","title":"List books contains all books IDs"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-update%20book%20overrides%20existing%20book%20data/","text":"// port_http_server / com.hexagonkt.http.server.examples / BooksTest / Update book overrides existing book data Update book overrides existing book data \u00b6 [jvm] Content fun Update book overrides existing book data ()","title":" update book overrides existing book data"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-update%20book%20overrides%20existing%20book%20data/#update-book-overrides-existing-book-data","text":"[jvm] Content fun Update book overrides existing book data ()","title":"Update book overrides existing book data"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/initialize/","text":"// port_http_server / com.hexagonkt.http.server.examples / BooksTest / initialize initialize \u00b6 [jvm] Content fun initialize ()","title":"Initialize"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/initialize/#initialize","text":"[jvm] Content fun initialize ()","title":"initialize"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/server/","text":"// port_http_server / com.hexagonkt.http.server.examples / BooksTest / server server \u00b6 [jvm] Content val server : Server","title":"Server"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/server/#server","text":"[jvm] Content val server : Server","title":"server"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/shutdown/","text":"// port_http_server / com.hexagonkt.http.server.examples / BooksTest / shutdown shutdown \u00b6 [jvm] Content fun shutdown ()","title":"Shutdown"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/shutdown/#shutdown","text":"[jvm] Content fun shutdown ()","title":"shutdown"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-book/","text":"// port_http_server / com.hexagonkt.http.server.examples / BooksTest / Book Book \u00b6 [jvm] data class Book ( author : String , title : String ) Properties \u00b6 Name Summary author [jvm] val author : String title [jvm] val title : String","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-book/#book","text":"[jvm] data class Book ( author : String , title : String )","title":"Book"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-book/#properties","text":"Name Summary author [jvm] val author : String title [jvm] val title : String","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-book/-book/","text":"// port_http_server / com.hexagonkt.http.server.examples / BooksTest / Book / Book Book \u00b6 [jvm] Content fun Book (author: String , title: String )","title":" book"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-book/-book/#book","text":"[jvm] Content fun Book (author: String , title: String )","title":"Book"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-book/author/","text":"// port_http_server / com.hexagonkt.http.server.examples / BooksTest / Book / author author \u00b6 [jvm] Content val author : String","title":"Author"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-book/author/#author","text":"[jvm] Content val author : String","title":"author"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-book/title/","text":"// port_http_server / com.hexagonkt.http.server.examples / BooksTest / Book / title title \u00b6 [jvm] Content val title : String","title":"Title"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-books-test/-book/title/#title","text":"[jvm] Content val title : String","title":"title"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/","text":"// port_http_server / com.hexagonkt.http.server.examples / CookiesTest CookiesTest \u00b6 [jvm] abstract class CookiesTest ( adapter : ServerPort ) Functions \u00b6 Name Summary clearCookies [jvm] Content fun clearCookies () Create cookie adds a new cookie to the request [jvm] Content fun Create cookie adds a new cookie to the request () Empty cookies assures there is no cookies [jvm] Content fun Empty cookies assures there is no cookies () Full cookie lifecycle [jvm] Content fun Full cookie lifecycle () initialize [jvm] Content fun initialize () Remove cookie deletes the given cookie [jvm] Content fun Remove cookie deletes the given cookie () Remove not available cookie does not fail [jvm] Content fun Remove not available cookie does not fail () shutdown [jvm] Content fun shutdown () Properties \u00b6 Name Summary server [jvm] val server : Server","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/#cookiestest","text":"[jvm] abstract class CookiesTest ( adapter : ServerPort )","title":"CookiesTest"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/#functions","text":"Name Summary clearCookies [jvm] Content fun clearCookies () Create cookie adds a new cookie to the request [jvm] Content fun Create cookie adds a new cookie to the request () Empty cookies assures there is no cookies [jvm] Content fun Empty cookies assures there is no cookies () Full cookie lifecycle [jvm] Content fun Full cookie lifecycle () initialize [jvm] Content fun initialize () Remove cookie deletes the given cookie [jvm] Content fun Remove cookie deletes the given cookie () Remove not available cookie does not fail [jvm] Content fun Remove not available cookie does not fail () shutdown [jvm] Content fun shutdown ()","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/#properties","text":"Name Summary server [jvm] val server : Server","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/-cookies-test/","text":"// port_http_server / com.hexagonkt.http.server.examples / CookiesTest / CookiesTest CookiesTest \u00b6 [jvm] Content fun CookiesTest (adapter: ServerPort )","title":" cookies test"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/-cookies-test/#cookiestest","text":"[jvm] Content fun CookiesTest (adapter: ServerPort )","title":"CookiesTest"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/-create%20cookie%20adds%20a%20new%20cookie%20to%20the%20request/","text":"// port_http_server / com.hexagonkt.http.server.examples / CookiesTest / Create cookie adds a new cookie to the request Create cookie adds a new cookie to the request \u00b6 [jvm] Content fun Create cookie adds a new cookie to the request ()","title":" create cookie adds a new cookie to the request"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/-create%20cookie%20adds%20a%20new%20cookie%20to%20the%20request/#create-cookie-adds-a-new-cookie-to-the-request","text":"[jvm] Content fun Create cookie adds a new cookie to the request ()","title":"Create cookie adds a new cookie to the request"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/-empty%20cookies%20assures%20there%20is%20no%20cookies/","text":"// port_http_server / com.hexagonkt.http.server.examples / CookiesTest / Empty cookies assures there is no cookies Empty cookies assures there is no cookies \u00b6 [jvm] Content fun Empty cookies assures there is no cookies ()","title":" empty cookies assures there is no cookies"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/-empty%20cookies%20assures%20there%20is%20no%20cookies/#empty-cookies-assures-there-is-no-cookies","text":"[jvm] Content fun Empty cookies assures there is no cookies ()","title":"Empty cookies assures there is no cookies"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/-full%20cookie%20lifecycle/","text":"// port_http_server / com.hexagonkt.http.server.examples / CookiesTest / Full cookie lifecycle Full cookie lifecycle \u00b6 [jvm] Content fun Full cookie lifecycle ()","title":" full cookie lifecycle"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/-full%20cookie%20lifecycle/#full-cookie-lifecycle","text":"[jvm] Content fun Full cookie lifecycle ()","title":"Full cookie lifecycle"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/-remove%20cookie%20deletes%20the%20given%20cookie/","text":"// port_http_server / com.hexagonkt.http.server.examples / CookiesTest / Remove cookie deletes the given cookie Remove cookie deletes the given cookie \u00b6 [jvm] Content fun Remove cookie deletes the given cookie ()","title":" remove cookie deletes the given cookie"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/-remove%20cookie%20deletes%20the%20given%20cookie/#remove-cookie-deletes-the-given-cookie","text":"[jvm] Content fun Remove cookie deletes the given cookie ()","title":"Remove cookie deletes the given cookie"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/-remove%20not%20available%20cookie%20does%20not%20fail/","text":"// port_http_server / com.hexagonkt.http.server.examples / CookiesTest / Remove not available cookie does not fail Remove not available cookie does not fail \u00b6 [jvm] Content fun Remove not available cookie does not fail ()","title":" remove not available cookie does not fail"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/-remove%20not%20available%20cookie%20does%20not%20fail/#remove-not-available-cookie-does-not-fail","text":"[jvm] Content fun Remove not available cookie does not fail ()","title":"Remove not available cookie does not fail"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/clear-cookies/","text":"// port_http_server / com.hexagonkt.http.server.examples / CookiesTest / clearCookies clearCookies \u00b6 [jvm] Content fun clearCookies ()","title":"Clear cookies"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/clear-cookies/#clearcookies","text":"[jvm] Content fun clearCookies ()","title":"clearCookies"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/initialize/","text":"// port_http_server / com.hexagonkt.http.server.examples / CookiesTest / initialize initialize \u00b6 [jvm] Content fun initialize ()","title":"Initialize"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/initialize/#initialize","text":"[jvm] Content fun initialize ()","title":"initialize"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/server/","text":"// port_http_server / com.hexagonkt.http.server.examples / CookiesTest / server server \u00b6 [jvm] Content val server : Server","title":"Server"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/server/#server","text":"[jvm] Content val server : Server","title":"server"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/shutdown/","text":"// port_http_server / com.hexagonkt.http.server.examples / CookiesTest / shutdown shutdown \u00b6 [jvm] Content fun shutdown ()","title":"Shutdown"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cookies-test/shutdown/#shutdown","text":"[jvm] Content fun shutdown ()","title":"shutdown"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/","text":"// port_http_server / com.hexagonkt.http.server.examples / CorsTest CorsTest \u00b6 [jvm] abstract class CorsTest ( adapter : ServerPort ) Functions \u00b6 Name Summary Allowed origin is returned properly [jvm] Content fun Allowed origin is returned properly () CORS full pre flight [jvm] Content fun CORS full pre flight () CORS pre flight [jvm] Content fun CORS pre flight () CORS pre flight with allowed headers [jvm] Content fun CORS pre flight with allowed headers () CORS pre flight with empty request method [jvm] Content fun CORS pre flight with empty request method () CORS pre flight with not allowed headers [jvm] Content fun CORS pre flight with not allowed headers () CORS pre flight with not allowed method [jvm] Content fun CORS pre flight with not allowed method () CORS pre flight without request method [jvm] Content fun CORS pre flight without request method () initialize [jvm] Content fun initialize () Request with not allowed origin is forbidden [jvm] Content fun Request with not allowed origin is forbidden () Request without origin continues as non CORS [jvm] Content fun Request without origin continues as non CORS () shutdown [jvm] Content fun shutdown () Simple CORS request [jvm] Content fun Simple CORS request () Simple CORS request with exposed headers [jvm] Content fun Simple CORS request with exposed headers () Simple CORS request with not allowed method [jvm] Content fun Simple CORS request with not allowed method () Properties \u00b6 Name Summary server [jvm] val server : Server","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/#corstest","text":"[jvm] abstract class CorsTest ( adapter : ServerPort )","title":"CorsTest"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/#functions","text":"Name Summary Allowed origin is returned properly [jvm] Content fun Allowed origin is returned properly () CORS full pre flight [jvm] Content fun CORS full pre flight () CORS pre flight [jvm] Content fun CORS pre flight () CORS pre flight with allowed headers [jvm] Content fun CORS pre flight with allowed headers () CORS pre flight with empty request method [jvm] Content fun CORS pre flight with empty request method () CORS pre flight with not allowed headers [jvm] Content fun CORS pre flight with not allowed headers () CORS pre flight with not allowed method [jvm] Content fun CORS pre flight with not allowed method () CORS pre flight without request method [jvm] Content fun CORS pre flight without request method () initialize [jvm] Content fun initialize () Request with not allowed origin is forbidden [jvm] Content fun Request with not allowed origin is forbidden () Request without origin continues as non CORS [jvm] Content fun Request without origin continues as non CORS () shutdown [jvm] Content fun shutdown () Simple CORS request [jvm] Content fun Simple CORS request () Simple CORS request with exposed headers [jvm] Content fun Simple CORS request with exposed headers () Simple CORS request with not allowed method [jvm] Content fun Simple CORS request with not allowed method ()","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/#properties","text":"Name Summary server [jvm] val server : Server","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-allowed%20origin%20is%20returned%20properly/","text":"// port_http_server / com.hexagonkt.http.server.examples / CorsTest / Allowed origin is returned properly Allowed origin is returned properly \u00b6 [jvm] Content fun Allowed origin is returned properly ()","title":" allowed origin is returned properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-allowed%20origin%20is%20returned%20properly/#allowed-origin-is-returned-properly","text":"[jvm] Content fun Allowed origin is returned properly ()","title":"Allowed origin is returned properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-c-o-r-s%20full%20pre%20flight/","text":"// port_http_server / com.hexagonkt.http.server.examples / CorsTest / CORS full pre flight CORS full pre flight \u00b6 [jvm] Content fun CORS full pre flight ()","title":" c o r s full pre flight"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-c-o-r-s%20full%20pre%20flight/#cors-full-pre-flight","text":"[jvm] Content fun CORS full pre flight ()","title":"CORS full pre flight"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-c-o-r-s%20pre%20flight%20with%20allowed%20headers/","text":"// port_http_server / com.hexagonkt.http.server.examples / CorsTest / CORS pre flight with allowed headers CORS pre flight with allowed headers \u00b6 [jvm] Content fun CORS pre flight with allowed headers ()","title":" c o r s pre flight with allowed headers"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-c-o-r-s%20pre%20flight%20with%20allowed%20headers/#cors-pre-flight-with-allowed-headers","text":"[jvm] Content fun CORS pre flight with allowed headers ()","title":"CORS pre flight with allowed headers"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-c-o-r-s%20pre%20flight%20with%20empty%20request%20method/","text":"// port_http_server / com.hexagonkt.http.server.examples / CorsTest / CORS pre flight with empty request method CORS pre flight with empty request method \u00b6 [jvm] Content fun CORS pre flight with empty request method ()","title":" c o r s pre flight with empty request method"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-c-o-r-s%20pre%20flight%20with%20empty%20request%20method/#cors-pre-flight-with-empty-request-method","text":"[jvm] Content fun CORS pre flight with empty request method ()","title":"CORS pre flight with empty request method"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-c-o-r-s%20pre%20flight%20with%20not%20allowed%20headers/","text":"// port_http_server / com.hexagonkt.http.server.examples / CorsTest / CORS pre flight with not allowed headers CORS pre flight with not allowed headers \u00b6 [jvm] Content fun CORS pre flight with not allowed headers ()","title":" c o r s pre flight with not allowed headers"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-c-o-r-s%20pre%20flight%20with%20not%20allowed%20headers/#cors-pre-flight-with-not-allowed-headers","text":"[jvm] Content fun CORS pre flight with not allowed headers ()","title":"CORS pre flight with not allowed headers"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-c-o-r-s%20pre%20flight%20with%20not%20allowed%20method/","text":"// port_http_server / com.hexagonkt.http.server.examples / CorsTest / CORS pre flight with not allowed method CORS pre flight with not allowed method \u00b6 [jvm] Content fun CORS pre flight with not allowed method ()","title":" c o r s pre flight with not allowed method"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-c-o-r-s%20pre%20flight%20with%20not%20allowed%20method/#cors-pre-flight-with-not-allowed-method","text":"[jvm] Content fun CORS pre flight with not allowed method ()","title":"CORS pre flight with not allowed method"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-c-o-r-s%20pre%20flight%20without%20request%20method/","text":"// port_http_server / com.hexagonkt.http.server.examples / CorsTest / CORS pre flight without request method CORS pre flight without request method \u00b6 [jvm] Content fun CORS pre flight without request method ()","title":" c o r s pre flight without request method"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-c-o-r-s%20pre%20flight%20without%20request%20method/#cors-pre-flight-without-request-method","text":"[jvm] Content fun CORS pre flight without request method ()","title":"CORS pre flight without request method"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-c-o-r-s%20pre%20flight/","text":"// port_http_server / com.hexagonkt.http.server.examples / CorsTest / CORS pre flight CORS pre flight \u00b6 [jvm] Content fun CORS pre flight ()","title":" c o r s pre flight"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-c-o-r-s%20pre%20flight/#cors-pre-flight","text":"[jvm] Content fun CORS pre flight ()","title":"CORS pre flight"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-cors-test/","text":"// port_http_server / com.hexagonkt.http.server.examples / CorsTest / CorsTest CorsTest \u00b6 [jvm] Content fun CorsTest (adapter: ServerPort )","title":" cors test"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-cors-test/#corstest","text":"[jvm] Content fun CorsTest (adapter: ServerPort )","title":"CorsTest"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-request%20with%20not%20allowed%20origin%20is%20forbidden/","text":"// port_http_server / com.hexagonkt.http.server.examples / CorsTest / Request with not allowed origin is forbidden Request with not allowed origin is forbidden \u00b6 [jvm] Content fun Request with not allowed origin is forbidden ()","title":" request with not allowed origin is forbidden"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-request%20with%20not%20allowed%20origin%20is%20forbidden/#request-with-not-allowed-origin-is-forbidden","text":"[jvm] Content fun Request with not allowed origin is forbidden ()","title":"Request with not allowed origin is forbidden"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-request%20without%20origin%20continues%20as%20non%20-c-o-r-s/","text":"// port_http_server / com.hexagonkt.http.server.examples / CorsTest / Request without origin continues as non CORS Request without origin continues as non CORS \u00b6 [jvm] Content fun Request without origin continues as non CORS ()","title":" request without origin continues as non  c o r s"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-request%20without%20origin%20continues%20as%20non%20-c-o-r-s/#request-without-origin-continues-as-non-cors","text":"[jvm] Content fun Request without origin continues as non CORS ()","title":"Request without origin continues as non CORS"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-simple%20-c-o-r-s%20request%20with%20exposed%20headers/","text":"// port_http_server / com.hexagonkt.http.server.examples / CorsTest / Simple CORS request with exposed headers Simple CORS request with exposed headers \u00b6 [jvm] Content fun Simple CORS request with exposed headers ()","title":" simple  c o r s request with exposed headers"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-simple%20-c-o-r-s%20request%20with%20exposed%20headers/#simple-cors-request-with-exposed-headers","text":"[jvm] Content fun Simple CORS request with exposed headers ()","title":"Simple CORS request with exposed headers"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-simple%20-c-o-r-s%20request%20with%20not%20allowed%20method/","text":"// port_http_server / com.hexagonkt.http.server.examples / CorsTest / Simple CORS request with not allowed method Simple CORS request with not allowed method \u00b6 [jvm] Content fun Simple CORS request with not allowed method ()","title":" simple  c o r s request with not allowed method"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-simple%20-c-o-r-s%20request%20with%20not%20allowed%20method/#simple-cors-request-with-not-allowed-method","text":"[jvm] Content fun Simple CORS request with not allowed method ()","title":"Simple CORS request with not allowed method"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-simple%20-c-o-r-s%20request/","text":"// port_http_server / com.hexagonkt.http.server.examples / CorsTest / Simple CORS request Simple CORS request \u00b6 [jvm] Content fun Simple CORS request ()","title":" simple  c o r s request"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/-simple%20-c-o-r-s%20request/#simple-cors-request","text":"[jvm] Content fun Simple CORS request ()","title":"Simple CORS request"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/initialize/","text":"// port_http_server / com.hexagonkt.http.server.examples / CorsTest / initialize initialize \u00b6 [jvm] Content fun initialize ()","title":"Initialize"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/initialize/#initialize","text":"[jvm] Content fun initialize ()","title":"initialize"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/server/","text":"// port_http_server / com.hexagonkt.http.server.examples / CorsTest / server server \u00b6 [jvm] Content val server : Server","title":"Server"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/server/#server","text":"[jvm] Content val server : Server","title":"server"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/shutdown/","text":"// port_http_server / com.hexagonkt.http.server.examples / CorsTest / shutdown shutdown \u00b6 [jvm] Content fun shutdown ()","title":"Shutdown"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-cors-test/shutdown/#shutdown","text":"[jvm] Content fun shutdown ()","title":"shutdown"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/","text":"// port_http_server / com.hexagonkt.http.server.examples / ErrorsTest ErrorsTest \u00b6 [jvm] abstract class ErrorsTest ( adapter : ServerPort ) Types \u00b6 Name Summary CustomException [jvm] Content class CustomException : IllegalArgumentException Functions \u00b6 Name Summary A runtime exception returns a 500 code [jvm] Content fun A runtime exception returns a 500 code () Base error handler catch all exceptions that subclass a given one [jvm] Content fun Base error handler catch all exceptions that subclass a given one () Halt stops request with 500 status code [jvm] Content fun Halt stops request with 500 status code () Handle exception allows to catch unhandled callback exceptions [jvm] Content fun Handle exception allows to catch unhandled callback exceptions () Handling status code allows to change the returned code [jvm] Content fun Handling status code allows to change the returned code () initialize [jvm] Content fun initialize () shutdown [jvm] Content fun shutdown () Properties \u00b6 Name Summary server [jvm] val server : Server","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/#errorstest","text":"[jvm] abstract class ErrorsTest ( adapter : ServerPort )","title":"ErrorsTest"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/#types","text":"Name Summary CustomException [jvm] Content class CustomException : IllegalArgumentException","title":"Types"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/#functions","text":"Name Summary A runtime exception returns a 500 code [jvm] Content fun A runtime exception returns a 500 code () Base error handler catch all exceptions that subclass a given one [jvm] Content fun Base error handler catch all exceptions that subclass a given one () Halt stops request with 500 status code [jvm] Content fun Halt stops request with 500 status code () Handle exception allows to catch unhandled callback exceptions [jvm] Content fun Handle exception allows to catch unhandled callback exceptions () Handling status code allows to change the returned code [jvm] Content fun Handling status code allows to change the returned code () initialize [jvm] Content fun initialize () shutdown [jvm] Content fun shutdown ()","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/#properties","text":"Name Summary server [jvm] val server : Server","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/-a%20runtime%20exception%20returns%20a%20500%20code/","text":"// port_http_server / com.hexagonkt.http.server.examples / ErrorsTest / A runtime exception returns a 500 code A runtime exception returns a 500 code \u00b6 [jvm] Content fun A runtime exception returns a 500 code ()","title":" a runtime exception returns a 500 code"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/-a%20runtime%20exception%20returns%20a%20500%20code/#a-runtime-exception-returns-a-500-code","text":"[jvm] Content fun A runtime exception returns a 500 code ()","title":"A runtime exception returns a 500 code"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/-base%20error%20handler%20catch%20all%20exceptions%20that%20subclass%20a%20given%20one/","text":"// port_http_server / com.hexagonkt.http.server.examples / ErrorsTest / Base error handler catch all exceptions that subclass a given one Base error handler catch all exceptions that subclass a given one \u00b6 [jvm] Content fun Base error handler catch all exceptions that subclass a given one ()","title":" base error handler catch all exceptions that subclass a given one"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/-base%20error%20handler%20catch%20all%20exceptions%20that%20subclass%20a%20given%20one/#base-error-handler-catch-all-exceptions-that-subclass-a-given-one","text":"[jvm] Content fun Base error handler catch all exceptions that subclass a given one ()","title":"Base error handler catch all exceptions that subclass a given one"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/-errors-test/","text":"// port_http_server / com.hexagonkt.http.server.examples / ErrorsTest / ErrorsTest ErrorsTest \u00b6 [jvm] Content fun ErrorsTest (adapter: ServerPort )","title":" errors test"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/-errors-test/#errorstest","text":"[jvm] Content fun ErrorsTest (adapter: ServerPort )","title":"ErrorsTest"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/-halt%20stops%20request%20with%20500%20status%20code/","text":"// port_http_server / com.hexagonkt.http.server.examples / ErrorsTest / Halt stops request with 500 status code Halt stops request with 500 status code \u00b6 [jvm] Content fun Halt stops request with 500 status code ()","title":" halt stops request with 500 status code"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/-halt%20stops%20request%20with%20500%20status%20code/#halt-stops-request-with-500-status-code","text":"[jvm] Content fun Halt stops request with 500 status code ()","title":"Halt stops request with 500 status code"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/-handle%20exception%20allows%20to%20catch%20unhandled%20callback%20exceptions/","text":"// port_http_server / com.hexagonkt.http.server.examples / ErrorsTest / Handle exception allows to catch unhandled callback exceptions Handle exception allows to catch unhandled callback exceptions \u00b6 [jvm] Content fun Handle exception allows to catch unhandled callback exceptions ()","title":" handle exception allows to catch unhandled callback exceptions"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/-handle%20exception%20allows%20to%20catch%20unhandled%20callback%20exceptions/#handle-exception-allows-to-catch-unhandled-callback-exceptions","text":"[jvm] Content fun Handle exception allows to catch unhandled callback exceptions ()","title":"Handle exception allows to catch unhandled callback exceptions"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/-handling%20status%20code%20allows%20to%20change%20the%20returned%20code/","text":"// port_http_server / com.hexagonkt.http.server.examples / ErrorsTest / Handling status code allows to change the returned code Handling status code allows to change the returned code \u00b6 [jvm] Content fun Handling status code allows to change the returned code ()","title":" handling status code allows to change the returned code"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/-handling%20status%20code%20allows%20to%20change%20the%20returned%20code/#handling-status-code-allows-to-change-the-returned-code","text":"[jvm] Content fun Handling status code allows to change the returned code ()","title":"Handling status code allows to change the returned code"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/initialize/","text":"// port_http_server / com.hexagonkt.http.server.examples / ErrorsTest / initialize initialize \u00b6 [jvm] Content fun initialize ()","title":"Initialize"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/initialize/#initialize","text":"[jvm] Content fun initialize ()","title":"initialize"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/server/","text":"// port_http_server / com.hexagonkt.http.server.examples / ErrorsTest / server server \u00b6 [jvm] Content val server : Server","title":"Server"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/server/#server","text":"[jvm] Content val server : Server","title":"server"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/shutdown/","text":"// port_http_server / com.hexagonkt.http.server.examples / ErrorsTest / shutdown shutdown \u00b6 [jvm] Content fun shutdown ()","title":"Shutdown"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/shutdown/#shutdown","text":"[jvm] Content fun shutdown ()","title":"shutdown"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/-custom-exception/","text":"// port_http_server / com.hexagonkt.http.server.examples / ErrorsTest / CustomException CustomException \u00b6 [jvm] class CustomException : IllegalArgumentException Functions \u00b6 Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >) Properties \u00b6 Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/-custom-exception/#customexception","text":"[jvm] class CustomException : IllegalArgumentException","title":"CustomException"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/-custom-exception/#functions","text":"Name Summary addSuppressed [jvm] Content fun addSuppressed (p0: Throwable ) fillInStackTrace [jvm] Content open fun fillInStackTrace (): Throwable getLocalizedMessage [jvm] Content open fun getLocalizedMessage (): String getStackTrace [jvm] Content open fun getStackTrace (): Array < StackTraceElement > getSuppressed [jvm] Content fun getSuppressed (): Array < Throwable > initCause [jvm] Content open fun initCause (p0: Throwable ): Throwable printStackTrace [jvm] Content open fun printStackTrace () open fun printStackTrace (p0: PrintStream ) open fun printStackTrace (p0: PrintWriter ) setStackTrace [jvm] Content open fun setStackTrace (p0: Array < StackTraceElement >)","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/-custom-exception/#properties","text":"Name Summary cause [jvm] open val cause : Throwable ? message [jvm] open val message : String ?","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/-custom-exception/-custom-exception/","text":"// port_http_server / com.hexagonkt.http.server.examples / ErrorsTest / CustomException / CustomException CustomException \u00b6 [jvm] Content fun CustomException ()","title":" custom exception"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-errors-test/-custom-exception/-custom-exception/#customexception","text":"[jvm] Content fun CustomException ()","title":"CustomException"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/","text":"// port_http_server / com.hexagonkt.http.server.examples / FilesTest FilesTest \u00b6 [jvm] abstract class FilesTest ( adapter : ServerPort ) Functions \u00b6 Name Summary An static file from resources can be fetched [jvm] Content fun An static file from resources can be fetched () Files content type is returned properly [jvm] Content fun Files content type is returned properly () Files mounted on a path are returned properly [jvm] Content fun Files mounted on a path are returned properly () initialize [jvm] Content fun initialize () Not found resources return 404 [jvm] Content fun Not found resources return 404 () Parameters are separated from each other [jvm] Content fun Parameters are separated from each other () Requesting a folder with an existing file name returns 404 [jvm] Content fun Requesting a folder with an existing file name returns 404 () Sending files works properly [jvm] Content fun Sending files works properly () Sending multi part content works properly [jvm] Content fun Sending multi part content works properly () shutdown [jvm] Content fun shutdown ()","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/#filestest","text":"[jvm] abstract class FilesTest ( adapter : ServerPort )","title":"FilesTest"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/#functions","text":"Name Summary An static file from resources can be fetched [jvm] Content fun An static file from resources can be fetched () Files content type is returned properly [jvm] Content fun Files content type is returned properly () Files mounted on a path are returned properly [jvm] Content fun Files mounted on a path are returned properly () initialize [jvm] Content fun initialize () Not found resources return 404 [jvm] Content fun Not found resources return 404 () Parameters are separated from each other [jvm] Content fun Parameters are separated from each other () Requesting a folder with an existing file name returns 404 [jvm] Content fun Requesting a folder with an existing file name returns 404 () Sending files works properly [jvm] Content fun Sending files works properly () Sending multi part content works properly [jvm] Content fun Sending multi part content works properly () shutdown [jvm] Content fun shutdown ()","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/-an%20static%20file%20from%20resources%20can%20be%20fetched/","text":"// port_http_server / com.hexagonkt.http.server.examples / FilesTest / An static file from resources can be fetched An static file from resources can be fetched \u00b6 [jvm] Content fun An static file from resources can be fetched ()","title":" an static file from resources can be fetched"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/-an%20static%20file%20from%20resources%20can%20be%20fetched/#an-static-file-from-resources-can-be-fetched","text":"[jvm] Content fun An static file from resources can be fetched ()","title":"An static file from resources can be fetched"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/-files%20content%20type%20is%20returned%20properly/","text":"// port_http_server / com.hexagonkt.http.server.examples / FilesTest / Files content type is returned properly Files content type is returned properly \u00b6 [jvm] Content fun Files content type is returned properly ()","title":" files content type is returned properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/-files%20content%20type%20is%20returned%20properly/#files-content-type-is-returned-properly","text":"[jvm] Content fun Files content type is returned properly ()","title":"Files content type is returned properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/-files%20mounted%20on%20a%20path%20are%20returned%20properly/","text":"// port_http_server / com.hexagonkt.http.server.examples / FilesTest / Files mounted on a path are returned properly Files mounted on a path are returned properly \u00b6 [jvm] Content fun Files mounted on a path are returned properly ()","title":" files mounted on a path are returned properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/-files%20mounted%20on%20a%20path%20are%20returned%20properly/#files-mounted-on-a-path-are-returned-properly","text":"[jvm] Content fun Files mounted on a path are returned properly ()","title":"Files mounted on a path are returned properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/-files-test/","text":"// port_http_server / com.hexagonkt.http.server.examples / FilesTest / FilesTest FilesTest \u00b6 [jvm] Content fun FilesTest (adapter: ServerPort )","title":" files test"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/-files-test/#filestest","text":"[jvm] Content fun FilesTest (adapter: ServerPort )","title":"FilesTest"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/-not%20found%20resources%20return%20404/","text":"// port_http_server / com.hexagonkt.http.server.examples / FilesTest / Not found resources return 404 Not found resources return 404 \u00b6 [jvm] Content fun Not found resources return 404 ()","title":" not found resources return 404"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/-not%20found%20resources%20return%20404/#not-found-resources-return-404","text":"[jvm] Content fun Not found resources return 404 ()","title":"Not found resources return 404"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/-parameters%20are%20separated%20from%20each%20other/","text":"// port_http_server / com.hexagonkt.http.server.examples / FilesTest / Parameters are separated from each other Parameters are separated from each other \u00b6 [jvm] Content fun Parameters are separated from each other ()","title":" parameters are separated from each other"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/-parameters%20are%20separated%20from%20each%20other/#parameters-are-separated-from-each-other","text":"[jvm] Content fun Parameters are separated from each other ()","title":"Parameters are separated from each other"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/-requesting%20a%20folder%20with%20an%20existing%20file%20name%20returns%20404/","text":"// port_http_server / com.hexagonkt.http.server.examples / FilesTest / Requesting a folder with an existing file name returns 404 Requesting a folder with an existing file name returns 404 \u00b6 [jvm] Content fun Requesting a folder with an existing file name returns 404 ()","title":" requesting a folder with an existing file name returns 404"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/-requesting%20a%20folder%20with%20an%20existing%20file%20name%20returns%20404/#requesting-a-folder-with-an-existing-file-name-returns-404","text":"[jvm] Content fun Requesting a folder with an existing file name returns 404 ()","title":"Requesting a folder with an existing file name returns 404"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/-sending%20files%20works%20properly/","text":"// port_http_server / com.hexagonkt.http.server.examples / FilesTest / Sending files works properly Sending files works properly \u00b6 [jvm] Content fun Sending files works properly ()","title":" sending files works properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/-sending%20files%20works%20properly/#sending-files-works-properly","text":"[jvm] Content fun Sending files works properly ()","title":"Sending files works properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/-sending%20multi%20part%20content%20works%20properly/","text":"// port_http_server / com.hexagonkt.http.server.examples / FilesTest / Sending multi part content works properly Sending multi part content works properly \u00b6 [jvm] Content fun Sending multi part content works properly ()","title":" sending multi part content works properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/-sending%20multi%20part%20content%20works%20properly/#sending-multi-part-content-works-properly","text":"[jvm] Content fun Sending multi part content works properly ()","title":"Sending multi part content works properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/initialize/","text":"// port_http_server / com.hexagonkt.http.server.examples / FilesTest / initialize initialize \u00b6 [jvm] Content fun initialize ()","title":"Initialize"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/initialize/#initialize","text":"[jvm] Content fun initialize ()","title":"initialize"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/shutdown/","text":"// port_http_server / com.hexagonkt.http.server.examples / FilesTest / shutdown shutdown \u00b6 [jvm] Content fun shutdown ()","title":"Shutdown"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-files-test/shutdown/#shutdown","text":"[jvm] Content fun shutdown ()","title":"shutdown"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-filters-test/","text":"// port_http_server / com.hexagonkt.http.server.examples / FiltersTest FiltersTest \u00b6 [jvm] abstract class FiltersTest ( adapter : ServerPort ) Functions \u00b6 Name Summary HTTP request with valid credentials returns valid response [jvm] Content fun HTTP request with valid credentials returns valid response () initialize [jvm] Content fun initialize () Request with invalid password returns 403 [jvm] Content fun Request with invalid password returns 403 () Request with invalid user returns 403 [jvm] Content fun Request with invalid user returns 403 () Request without authorization returns 401 [jvm] Content fun Request without authorization returns 401 () shutdown [jvm] Content fun shutdown ()","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-filters-test/#filterstest","text":"[jvm] abstract class FiltersTest ( adapter : ServerPort )","title":"FiltersTest"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-filters-test/#functions","text":"Name Summary HTTP request with valid credentials returns valid response [jvm] Content fun HTTP request with valid credentials returns valid response () initialize [jvm] Content fun initialize () Request with invalid password returns 403 [jvm] Content fun Request with invalid password returns 403 () Request with invalid user returns 403 [jvm] Content fun Request with invalid user returns 403 () Request without authorization returns 401 [jvm] Content fun Request without authorization returns 401 () shutdown [jvm] Content fun shutdown ()","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-filters-test/-filters-test/","text":"// port_http_server / com.hexagonkt.http.server.examples / FiltersTest / FiltersTest FiltersTest \u00b6 [jvm] Content fun FiltersTest (adapter: ServerPort )","title":" filters test"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-filters-test/-filters-test/#filterstest","text":"[jvm] Content fun FiltersTest (adapter: ServerPort )","title":"FiltersTest"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-filters-test/-h-t-t-p%20request%20with%20valid%20credentials%20returns%20valid%20response/","text":"// port_http_server / com.hexagonkt.http.server.examples / FiltersTest / HTTP request with valid credentials returns valid response HTTP request with valid credentials returns valid response \u00b6 [jvm] Content fun HTTP request with valid credentials returns valid response ()","title":" h t t p request with valid credentials returns valid response"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-filters-test/-h-t-t-p%20request%20with%20valid%20credentials%20returns%20valid%20response/#http-request-with-valid-credentials-returns-valid-response","text":"[jvm] Content fun HTTP request with valid credentials returns valid response ()","title":"HTTP request with valid credentials returns valid response"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-filters-test/-request%20with%20invalid%20password%20returns%20403/","text":"// port_http_server / com.hexagonkt.http.server.examples / FiltersTest / Request with invalid password returns 403 Request with invalid password returns 403 \u00b6 [jvm] Content fun Request with invalid password returns 403 ()","title":" request with invalid password returns 403"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-filters-test/-request%20with%20invalid%20password%20returns%20403/#request-with-invalid-password-returns-403","text":"[jvm] Content fun Request with invalid password returns 403 ()","title":"Request with invalid password returns 403"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-filters-test/-request%20with%20invalid%20user%20returns%20403/","text":"// port_http_server / com.hexagonkt.http.server.examples / FiltersTest / Request with invalid user returns 403 Request with invalid user returns 403 \u00b6 [jvm] Content fun Request with invalid user returns 403 ()","title":" request with invalid user returns 403"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-filters-test/-request%20with%20invalid%20user%20returns%20403/#request-with-invalid-user-returns-403","text":"[jvm] Content fun Request with invalid user returns 403 ()","title":"Request with invalid user returns 403"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-filters-test/-request%20without%20authorization%20returns%20401/","text":"// port_http_server / com.hexagonkt.http.server.examples / FiltersTest / Request without authorization returns 401 Request without authorization returns 401 \u00b6 [jvm] Content fun Request without authorization returns 401 ()","title":" request without authorization returns 401"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-filters-test/-request%20without%20authorization%20returns%20401/#request-without-authorization-returns-401","text":"[jvm] Content fun Request without authorization returns 401 ()","title":"Request without authorization returns 401"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-filters-test/initialize/","text":"// port_http_server / com.hexagonkt.http.server.examples / FiltersTest / initialize initialize \u00b6 [jvm] Content fun initialize ()","title":"Initialize"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-filters-test/initialize/#initialize","text":"[jvm] Content fun initialize ()","title":"initialize"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-filters-test/shutdown/","text":"// port_http_server / com.hexagonkt.http.server.examples / FiltersTest / shutdown shutdown \u00b6 [jvm] Content fun shutdown ()","title":"Shutdown"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-filters-test/shutdown/#shutdown","text":"[jvm] Content fun shutdown ()","title":"shutdown"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/","text":"// port_http_server / com.hexagonkt.http.server.examples / GenericTest GenericTest \u00b6 [jvm] abstract class GenericTest ( adapter : ServerPort ) Functions \u00b6 Name Summary contentType [jvm] Content fun contentType () echoParamWithMaj [jvm] Content fun echoParamWithMaj () echoParamWithUpperCaseInValue [jvm] Content fun echoParamWithUpperCaseInValue () Empty query string is handled properly [jvm] Content fun Empty query string is handled properly () getRoot [jvm] Content fun getRoot () HTTP methods are handled correctly [jvm] Content fun HTTP methods are handled correctly () initialize [jvm] Content fun initialize () notFound [jvm] Content fun notFound () Query string with no value parameters is handled properly [jvm] Content fun Query string with no value parameters is handled properly () redirect [jvm] Content fun redirect () Request body is parsed properly [jvm] Content fun Request body is parsed properly () Request data is read properly [jvm] Content fun Request data is read properly () requestDataWithDifferentHeaders [jvm] Content fun requestDataWithDifferentHeaders () Response data is generated properly [jvm] Content fun Response data is generated properly () Root files content type is returned properly [jvm] Content fun Root files content type is returned properly () shutdown [jvm] Content fun shutdown () twoRoutesWithDifferentCase [jvm] Content fun twoRoutesWithDifferentCase ()","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/#generictest","text":"[jvm] abstract class GenericTest ( adapter : ServerPort )","title":"GenericTest"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/#functions","text":"Name Summary contentType [jvm] Content fun contentType () echoParamWithMaj [jvm] Content fun echoParamWithMaj () echoParamWithUpperCaseInValue [jvm] Content fun echoParamWithUpperCaseInValue () Empty query string is handled properly [jvm] Content fun Empty query string is handled properly () getRoot [jvm] Content fun getRoot () HTTP methods are handled correctly [jvm] Content fun HTTP methods are handled correctly () initialize [jvm] Content fun initialize () notFound [jvm] Content fun notFound () Query string with no value parameters is handled properly [jvm] Content fun Query string with no value parameters is handled properly () redirect [jvm] Content fun redirect () Request body is parsed properly [jvm] Content fun Request body is parsed properly () Request data is read properly [jvm] Content fun Request data is read properly () requestDataWithDifferentHeaders [jvm] Content fun requestDataWithDifferentHeaders () Response data is generated properly [jvm] Content fun Response data is generated properly () Root files content type is returned properly [jvm] Content fun Root files content type is returned properly () shutdown [jvm] Content fun shutdown () twoRoutesWithDifferentCase [jvm] Content fun twoRoutesWithDifferentCase ()","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/-empty%20query%20string%20is%20handled%20properly/","text":"// port_http_server / com.hexagonkt.http.server.examples / GenericTest / Empty query string is handled properly Empty query string is handled properly \u00b6 [jvm] Content fun Empty query string is handled properly ()","title":" empty query string is handled properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/-empty%20query%20string%20is%20handled%20properly/#empty-query-string-is-handled-properly","text":"[jvm] Content fun Empty query string is handled properly ()","title":"Empty query string is handled properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/-generic-test/","text":"// port_http_server / com.hexagonkt.http.server.examples / GenericTest / GenericTest GenericTest \u00b6 [jvm] Content fun GenericTest (adapter: ServerPort )","title":" generic test"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/-generic-test/#generictest","text":"[jvm] Content fun GenericTest (adapter: ServerPort )","title":"GenericTest"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/-h-t-t-p%20methods%20are%20handled%20correctly/","text":"// port_http_server / com.hexagonkt.http.server.examples / GenericTest / HTTP methods are handled correctly HTTP methods are handled correctly \u00b6 [jvm] Content fun HTTP methods are handled correctly ()","title":" h t t p methods are handled correctly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/-h-t-t-p%20methods%20are%20handled%20correctly/#http-methods-are-handled-correctly","text":"[jvm] Content fun HTTP methods are handled correctly ()","title":"HTTP methods are handled correctly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/-query%20string%20with%20no%20value%20parameters%20is%20handled%20properly/","text":"// port_http_server / com.hexagonkt.http.server.examples / GenericTest / Query string with no value parameters is handled properly Query string with no value parameters is handled properly \u00b6 [jvm] Content fun Query string with no value parameters is handled properly ()","title":" query string with no value parameters is handled properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/-query%20string%20with%20no%20value%20parameters%20is%20handled%20properly/#query-string-with-no-value-parameters-is-handled-properly","text":"[jvm] Content fun Query string with no value parameters is handled properly ()","title":"Query string with no value parameters is handled properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/-request%20body%20is%20parsed%20properly/","text":"// port_http_server / com.hexagonkt.http.server.examples / GenericTest / Request body is parsed properly Request body is parsed properly \u00b6 [jvm] Content fun Request body is parsed properly ()","title":" request body is parsed properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/-request%20body%20is%20parsed%20properly/#request-body-is-parsed-properly","text":"[jvm] Content fun Request body is parsed properly ()","title":"Request body is parsed properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/-request%20data%20is%20read%20properly/","text":"// port_http_server / com.hexagonkt.http.server.examples / GenericTest / Request data is read properly Request data is read properly \u00b6 [jvm] Content fun Request data is read properly ()","title":" request data is read properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/-request%20data%20is%20read%20properly/#request-data-is-read-properly","text":"[jvm] Content fun Request data is read properly ()","title":"Request data is read properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/-response%20data%20is%20generated%20properly/","text":"// port_http_server / com.hexagonkt.http.server.examples / GenericTest / Response data is generated properly Response data is generated properly \u00b6 [jvm] Content fun Response data is generated properly ()","title":" response data is generated properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/-response%20data%20is%20generated%20properly/#response-data-is-generated-properly","text":"[jvm] Content fun Response data is generated properly ()","title":"Response data is generated properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/-root%20files%20content%20type%20is%20returned%20properly/","text":"// port_http_server / com.hexagonkt.http.server.examples / GenericTest / Root files content type is returned properly Root files content type is returned properly \u00b6 [jvm] Content fun Root files content type is returned properly ()","title":" root files content type is returned properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/-root%20files%20content%20type%20is%20returned%20properly/#root-files-content-type-is-returned-properly","text":"[jvm] Content fun Root files content type is returned properly ()","title":"Root files content type is returned properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/content-type/","text":"// port_http_server / com.hexagonkt.http.server.examples / GenericTest / contentType contentType \u00b6 [jvm] Content fun contentType ()","title":"Content type"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/content-type/#contenttype","text":"[jvm] Content fun contentType ()","title":"contentType"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/echo-param-with-maj/","text":"// port_http_server / com.hexagonkt.http.server.examples / GenericTest / echoParamWithMaj echoParamWithMaj \u00b6 [jvm] Content fun echoParamWithMaj ()","title":"Echo param with maj"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/echo-param-with-maj/#echoparamwithmaj","text":"[jvm] Content fun echoParamWithMaj ()","title":"echoParamWithMaj"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/echo-param-with-upper-case-in-value/","text":"// port_http_server / com.hexagonkt.http.server.examples / GenericTest / echoParamWithUpperCaseInValue echoParamWithUpperCaseInValue \u00b6 [jvm] Content fun echoParamWithUpperCaseInValue ()","title":"Echo param with upper case in value"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/echo-param-with-upper-case-in-value/#echoparamwithuppercaseinvalue","text":"[jvm] Content fun echoParamWithUpperCaseInValue ()","title":"echoParamWithUpperCaseInValue"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/get-root/","text":"// port_http_server / com.hexagonkt.http.server.examples / GenericTest / getRoot getRoot \u00b6 [jvm] Content fun getRoot ()","title":"Get root"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/get-root/#getroot","text":"[jvm] Content fun getRoot ()","title":"getRoot"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/initialize/","text":"// port_http_server / com.hexagonkt.http.server.examples / GenericTest / initialize initialize \u00b6 [jvm] Content fun initialize ()","title":"Initialize"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/initialize/#initialize","text":"[jvm] Content fun initialize ()","title":"initialize"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/not-found/","text":"// port_http_server / com.hexagonkt.http.server.examples / GenericTest / notFound notFound \u00b6 [jvm] Content fun notFound ()","title":"Not found"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/not-found/#notfound","text":"[jvm] Content fun notFound ()","title":"notFound"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/redirect/","text":"// port_http_server / com.hexagonkt.http.server.examples / GenericTest / redirect redirect \u00b6 [jvm] Content fun redirect ()","title":"Redirect"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/redirect/#redirect","text":"[jvm] Content fun redirect ()","title":"redirect"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/request-data-with-different-headers/","text":"// port_http_server / com.hexagonkt.http.server.examples / GenericTest / requestDataWithDifferentHeaders requestDataWithDifferentHeaders \u00b6 [jvm] Content fun requestDataWithDifferentHeaders ()","title":"Request data with different headers"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/request-data-with-different-headers/#requestdatawithdifferentheaders","text":"[jvm] Content fun requestDataWithDifferentHeaders ()","title":"requestDataWithDifferentHeaders"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/shutdown/","text":"// port_http_server / com.hexagonkt.http.server.examples / GenericTest / shutdown shutdown \u00b6 [jvm] Content fun shutdown ()","title":"Shutdown"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/shutdown/#shutdown","text":"[jvm] Content fun shutdown ()","title":"shutdown"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/two-routes-with-different-case/","text":"// port_http_server / com.hexagonkt.http.server.examples / GenericTest / twoRoutesWithDifferentCase twoRoutesWithDifferentCase \u00b6 [jvm] Content fun twoRoutesWithDifferentCase ()","title":"Two routes with different case"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-generic-test/two-routes-with-different-case/#tworouteswithdifferentcase","text":"[jvm] Content fun twoRoutesWithDifferentCase ()","title":"twoRoutesWithDifferentCase"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-https-test/","text":"// port_http_server / com.hexagonkt.http.server.examples / HttpsTest HttpsTest \u00b6 [jvm] abstract class HttpsTest ( adapter : ServerPort ) Functions \u00b6 Name Summary Serve HTTP2 works properly [jvm] Content fun Serve HTTP2 works properly () Serve HTTPS example [jvm] Content fun Serve HTTPS example () Serve HTTPS works properly [jvm] Content fun Serve HTTPS works properly () Serve insecure HTTPS example [jvm] Content fun Serve insecure HTTPS example ()","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-https-test/#httpstest","text":"[jvm] abstract class HttpsTest ( adapter : ServerPort )","title":"HttpsTest"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-https-test/#functions","text":"Name Summary Serve HTTP2 works properly [jvm] Content fun Serve HTTP2 works properly () Serve HTTPS example [jvm] Content fun Serve HTTPS example () Serve HTTPS works properly [jvm] Content fun Serve HTTPS works properly () Serve insecure HTTPS example [jvm] Content fun Serve insecure HTTPS example ()","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-https-test/-https-test/","text":"// port_http_server / com.hexagonkt.http.server.examples / HttpsTest / HttpsTest HttpsTest \u00b6 [jvm] Content fun HttpsTest (adapter: ServerPort )","title":" https test"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-https-test/-https-test/#httpstest","text":"[jvm] Content fun HttpsTest (adapter: ServerPort )","title":"HttpsTest"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-https-test/-serve%20-h-t-t-p-s%20example/","text":"// port_http_server / com.hexagonkt.http.server.examples / HttpsTest / Serve HTTPS example Serve HTTPS example \u00b6 [jvm] Content fun Serve HTTPS example ()","title":" serve  h t t p s example"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-https-test/-serve%20-h-t-t-p-s%20example/#serve-https-example","text":"[jvm] Content fun Serve HTTPS example ()","title":"Serve HTTPS example"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-https-test/-serve%20-h-t-t-p-s%20works%20properly/","text":"// port_http_server / com.hexagonkt.http.server.examples / HttpsTest / Serve HTTPS works properly Serve HTTPS works properly \u00b6 [jvm] Content fun Serve HTTPS works properly ()","title":" serve  h t t p s works properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-https-test/-serve%20-h-t-t-p-s%20works%20properly/#serve-https-works-properly","text":"[jvm] Content fun Serve HTTPS works properly ()","title":"Serve HTTPS works properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-https-test/-serve%20-h-t-t-p2%20works%20properly/","text":"// port_http_server / com.hexagonkt.http.server.examples / HttpsTest / Serve HTTP2 works properly Serve HTTP2 works properly \u00b6 [jvm] Content fun Serve HTTP2 works properly ()","title":" serve  h t t p2 works properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-https-test/-serve%20-h-t-t-p2%20works%20properly/#serve-http2-works-properly","text":"[jvm] Content fun Serve HTTP2 works properly ()","title":"Serve HTTP2 works properly"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-https-test/-serve%20insecure%20-h-t-t-p-s%20example/","text":"// port_http_server / com.hexagonkt.http.server.examples / HttpsTest / Serve insecure HTTPS example Serve insecure HTTPS example \u00b6 [jvm] Content fun Serve insecure HTTPS example ()","title":" serve insecure  h t t p s example"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-https-test/-serve%20insecure%20-h-t-t-p-s%20example/#serve-insecure-https-example","text":"[jvm] Content fun Serve insecure HTTPS example ()","title":"Serve insecure HTTPS example"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-session-test/","text":"// port_http_server / com.hexagonkt.http.server.examples / SessionTest SessionTest \u00b6 [jvm] abstract class SessionTest ( adapter : ServerPort ) Functions \u00b6 Name Summary Attribute is added to session [jvm] Content fun Attribute is added to session () initialize [jvm] Content fun initialize () Session attribute lifecycle test [jvm] Content fun Session attribute lifecycle test () shutdown [jvm] Content fun shutdown () Properties \u00b6 Name Summary server [jvm] val server : Server","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-session-test/#sessiontest","text":"[jvm] abstract class SessionTest ( adapter : ServerPort )","title":"SessionTest"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-session-test/#functions","text":"Name Summary Attribute is added to session [jvm] Content fun Attribute is added to session () initialize [jvm] Content fun initialize () Session attribute lifecycle test [jvm] Content fun Session attribute lifecycle test () shutdown [jvm] Content fun shutdown ()","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-session-test/#properties","text":"Name Summary server [jvm] val server : Server","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-session-test/-attribute%20is%20added%20to%20session/","text":"// port_http_server / com.hexagonkt.http.server.examples / SessionTest / Attribute is added to session Attribute is added to session \u00b6 [jvm] Content fun Attribute is added to session ()","title":" attribute is added to session"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-session-test/-attribute%20is%20added%20to%20session/#attribute-is-added-to-session","text":"[jvm] Content fun Attribute is added to session ()","title":"Attribute is added to session"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-session-test/-session%20attribute%20lifecycle%20test/","text":"// port_http_server / com.hexagonkt.http.server.examples / SessionTest / Session attribute lifecycle test Session attribute lifecycle test \u00b6 [jvm] Content fun Session attribute lifecycle test ()","title":" session attribute lifecycle test"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-session-test/-session%20attribute%20lifecycle%20test/#session-attribute-lifecycle-test","text":"[jvm] Content fun Session attribute lifecycle test ()","title":"Session attribute lifecycle test"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-session-test/-session-test/","text":"// port_http_server / com.hexagonkt.http.server.examples / SessionTest / SessionTest SessionTest \u00b6 [jvm] Content fun SessionTest (adapter: ServerPort )","title":" session test"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-session-test/-session-test/#sessiontest","text":"[jvm] Content fun SessionTest (adapter: ServerPort )","title":"SessionTest"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-session-test/initialize/","text":"// port_http_server / com.hexagonkt.http.server.examples / SessionTest / initialize initialize \u00b6 [jvm] Content fun initialize ()","title":"Initialize"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-session-test/initialize/#initialize","text":"[jvm] Content fun initialize ()","title":"initialize"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-session-test/server/","text":"// port_http_server / com.hexagonkt.http.server.examples / SessionTest / server server \u00b6 [jvm] Content val server : Server","title":"Server"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-session-test/server/#server","text":"[jvm] Content val server : Server","title":"server"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-session-test/shutdown/","text":"// port_http_server / com.hexagonkt.http.server.examples / SessionTest / shutdown shutdown \u00b6 [jvm] Content fun shutdown ()","title":"Shutdown"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-session-test/shutdown/#shutdown","text":"[jvm] Content fun shutdown ()","title":"shutdown"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-zip-test/","text":"// port_http_server / com.hexagonkt.http.server.examples / ZipTest ZipTest \u00b6 [jvm] abstract class ZipTest ( adapter : ServerPort ) Functions \u00b6 Name Summary Use ZIP encoding example [jvm] Content fun Use ZIP encoding example () Use ZIP encoding without enabling the feature example [jvm] Content fun Use ZIP encoding without enabling the feature example ()","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-zip-test/#ziptest","text":"[jvm] abstract class ZipTest ( adapter : ServerPort )","title":"ZipTest"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-zip-test/#functions","text":"Name Summary Use ZIP encoding example [jvm] Content fun Use ZIP encoding example () Use ZIP encoding without enabling the feature example [jvm] Content fun Use ZIP encoding without enabling the feature example ()","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-zip-test/-use%20-z-i-p%20encoding%20example/","text":"// port_http_server / com.hexagonkt.http.server.examples / ZipTest / Use ZIP encoding example Use ZIP encoding example \u00b6 [jvm] Content fun Use ZIP encoding example ()","title":" use  z i p encoding example"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-zip-test/-use%20-z-i-p%20encoding%20example/#use-zip-encoding-example","text":"[jvm] Content fun Use ZIP encoding example ()","title":"Use ZIP encoding example"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-zip-test/-use%20-z-i-p%20encoding%20without%20enabling%20the%20feature%20example/","text":"// port_http_server / com.hexagonkt.http.server.examples / ZipTest / Use ZIP encoding without enabling the feature example Use ZIP encoding without enabling the feature example \u00b6 [jvm] Content fun Use ZIP encoding without enabling the feature example ()","title":" use  z i p encoding without enabling the feature example"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-zip-test/-use%20-z-i-p%20encoding%20without%20enabling%20the%20feature%20example/#use-zip-encoding-without-enabling-the-feature-example","text":"[jvm] Content fun Use ZIP encoding without enabling the feature example ()","title":"Use ZIP encoding without enabling the feature example"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-zip-test/-zip-test/","text":"// port_http_server / com.hexagonkt.http.server.examples / ZipTest / ZipTest ZipTest \u00b6 [jvm] Content fun ZipTest (adapter: ServerPort )","title":" zip test"},{"location":"port_http_server/com.hexagonkt.http.server.examples/-zip-test/-zip-test/#ziptest","text":"[jvm] Content fun ZipTest (adapter: ServerPort )","title":"ZipTest"},{"location":"port_http_server/com.hexagonkt.http.server.test/","text":"// port_http_server / com.hexagonkt.http.server.test Package com.hexagonkt.http.server.test \u00b6 Types \u00b6 Name Summary TestRequest [jvm] Content data class TestRequest ( method : Method, scheme : String , host : String , ip : String , port : Int , path : String , pathParameters : Map < String , String >, queryString : String , url : String , parts : Map < String , Part>, queryParameters : Map < String , List < String >>, formParameters : Map < String , List < String >>, certificateChain : List < X509Certificate >, body : String , headers : Map < String , List < String >>, cookies : Map < String , Cookie>, contentType : String ?, contentLength : Long ) : RequestPort TestResponse [jvm] Content data class TestResponse ( cookies : Map < String , Cookie>, body : Any , contentType : String ?, status : Int , outputStream : OutputStream ) : ResponsePort TestSession [jvm] Content data class TestSession ( attributes : Map < String , Any ?>, creationTime : Long ?, id : String ?, maxInactiveInterval : Int ?, lastAccessedTime : Long ?) : SessionPort Functions \u00b6 Name Summary testCall [jvm] Content fun testCall (request: TestRequest = TestRequest(), response: TestResponse = TestResponse(), session: TestSession = TestSession()): Call","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server.test/#package-comhexagonkthttpservertest","text":"","title":"Package com.hexagonkt.http.server.test"},{"location":"port_http_server/com.hexagonkt.http.server.test/#types","text":"Name Summary TestRequest [jvm] Content data class TestRequest ( method : Method, scheme : String , host : String , ip : String , port : Int , path : String , pathParameters : Map < String , String >, queryString : String , url : String , parts : Map < String , Part>, queryParameters : Map < String , List < String >>, formParameters : Map < String , List < String >>, certificateChain : List < X509Certificate >, body : String , headers : Map < String , List < String >>, cookies : Map < String , Cookie>, contentType : String ?, contentLength : Long ) : RequestPort TestResponse [jvm] Content data class TestResponse ( cookies : Map < String , Cookie>, body : Any , contentType : String ?, status : Int , outputStream : OutputStream ) : ResponsePort TestSession [jvm] Content data class TestSession ( attributes : Map < String , Any ?>, creationTime : Long ?, id : String ?, maxInactiveInterval : Int ?, lastAccessedTime : Long ?) : SessionPort","title":"Types"},{"location":"port_http_server/com.hexagonkt.http.server.test/#functions","text":"Name Summary testCall [jvm] Content fun testCall (request: TestRequest = TestRequest(), response: TestResponse = TestResponse(), session: TestSession = TestSession()): Call","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server.test/test-call/","text":"// port_http_server / com.hexagonkt.http.server.test / testCall testCall \u00b6 [jvm] Content fun testCall (request: TestRequest = TestRequest(), response: TestResponse = TestResponse(), session: TestSession = TestSession()): Call","title":"Test call"},{"location":"port_http_server/com.hexagonkt.http.server.test/test-call/#testcall","text":"[jvm] Content fun testCall (request: TestRequest = TestRequest(), response: TestResponse = TestResponse(), session: TestSession = TestSession()): Call","title":"testCall"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/","text":"// port_http_server / com.hexagonkt.http.server.test / TestRequest TestRequest \u00b6 [jvm] data class TestRequest ( method : Method, scheme : String , host : String , ip : String , port : Int , path : String , pathParameters : Map < String , String >, queryString : String , url : String , parts : Map < String , Part>, queryParameters : Map < String , List < String >>, formParameters : Map < String , List < String >>, certificateChain : List < X509Certificate >, body : String , headers : Map < String , List < String >>, cookies : Map < String , Cookie>, contentType : String ?, contentLength : Long ) : RequestPort Functions \u00b6 Name Summary certificateChain [jvm] Content open override fun certificateChain (): List < X509Certificate > contentLength [jvm] Content open override fun contentLength (): Long contentType [jvm] Content open override fun contentType (): String ? cookies [jvm] Content open override fun cookies (): Map < String , Cookie> formParameters [jvm] Content open override fun formParameters (): Map < String , List < String >> headers [jvm] Content open override fun headers (): Map < String , List < String >> host [jvm] Content open override fun host (): String ip [jvm] Content open override fun ip (): String loadBody [jvm] Content open override fun loadBody (): String method [jvm] Content open override fun method (): Method parts [jvm] Content open override fun parts (): Map < String , Part> path [jvm] Content open override fun path (): String pathParameters [jvm] Content open override fun pathParameters (): Map < String , String > port [jvm] Content open override fun port (): Int queryParameters [jvm] Content open override fun queryParameters (): Map < String , List < String >> queryString [jvm] Content open override fun queryString (): String scheme [jvm] Content open override fun scheme (): String url [jvm] Content open override fun url (): String Properties \u00b6 Name Summary body [jvm] val body : String certificateChain [jvm] val certificateChain : List < X509Certificate > contentLength [jvm] val contentLength : Long contentType [jvm] val contentType : String ? = null cookies [jvm] val cookies : Map < String , Cookie> formParameters [jvm] val formParameters : Map < String , List < String >> headers [jvm] val headers : Map < String , List < String >> host [jvm] val host : String ip [jvm] val ip : String method [jvm] val method : Method parts [jvm] val parts : Map < String , Part> path [jvm] val path : String pathParameters [jvm] val pathParameters : Map < String , String > port [jvm] val port : Int = 9090 queryParameters [jvm] val queryParameters : Map < String , List < String >> queryString [jvm] val queryString : String scheme [jvm] val scheme : String url [jvm] val url : String","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/#testrequest","text":"[jvm] data class TestRequest ( method : Method, scheme : String , host : String , ip : String , port : Int , path : String , pathParameters : Map < String , String >, queryString : String , url : String , parts : Map < String , Part>, queryParameters : Map < String , List < String >>, formParameters : Map < String , List < String >>, certificateChain : List < X509Certificate >, body : String , headers : Map < String , List < String >>, cookies : Map < String , Cookie>, contentType : String ?, contentLength : Long ) : RequestPort","title":"TestRequest"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/#functions","text":"Name Summary certificateChain [jvm] Content open override fun certificateChain (): List < X509Certificate > contentLength [jvm] Content open override fun contentLength (): Long contentType [jvm] Content open override fun contentType (): String ? cookies [jvm] Content open override fun cookies (): Map < String , Cookie> formParameters [jvm] Content open override fun formParameters (): Map < String , List < String >> headers [jvm] Content open override fun headers (): Map < String , List < String >> host [jvm] Content open override fun host (): String ip [jvm] Content open override fun ip (): String loadBody [jvm] Content open override fun loadBody (): String method [jvm] Content open override fun method (): Method parts [jvm] Content open override fun parts (): Map < String , Part> path [jvm] Content open override fun path (): String pathParameters [jvm] Content open override fun pathParameters (): Map < String , String > port [jvm] Content open override fun port (): Int queryParameters [jvm] Content open override fun queryParameters (): Map < String , List < String >> queryString [jvm] Content open override fun queryString (): String scheme [jvm] Content open override fun scheme (): String url [jvm] Content open override fun url (): String","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/#properties","text":"Name Summary body [jvm] val body : String certificateChain [jvm] val certificateChain : List < X509Certificate > contentLength [jvm] val contentLength : Long contentType [jvm] val contentType : String ? = null cookies [jvm] val cookies : Map < String , Cookie> formParameters [jvm] val formParameters : Map < String , List < String >> headers [jvm] val headers : Map < String , List < String >> host [jvm] val host : String ip [jvm] val ip : String method [jvm] val method : Method parts [jvm] val parts : Map < String , Part> path [jvm] val path : String pathParameters [jvm] val pathParameters : Map < String , String > port [jvm] val port : Int = 9090 queryParameters [jvm] val queryParameters : Map < String , List < String >> queryString [jvm] val queryString : String scheme [jvm] val scheme : String url [jvm] val url : String","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/-test-request/","text":"// port_http_server / com.hexagonkt.http.server.test / TestRequest / TestRequest TestRequest \u00b6 [jvm] Content fun TestRequest (method: Method = Method.GET, scheme: String = \"http\", host: String = \"localhost\", ip: String = \"127.0.0.1\", port: Int = 9090, path: String = \"/\", pathParameters: Map < String , String > = emptyMap(), queryString: String = \"\", url: String = \"$scheme://$host$path\", parts: Map < String , Part> = emptyMap(), queryParameters: Map < String , List < String >> = emptyMap(), formParameters: Map < String , List < String >> = emptyMap(), certificateChain: List < X509Certificate > = emptyList(), body: String = \"\", headers: Map < String , List < String >> = emptyMap(), cookies: Map < String , Cookie> = emptyMap(), contentType: String ? = null, contentLength: Long = body.length.toLong())","title":" test request"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/-test-request/#testrequest","text":"[jvm] Content fun TestRequest (method: Method = Method.GET, scheme: String = \"http\", host: String = \"localhost\", ip: String = \"127.0.0.1\", port: Int = 9090, path: String = \"/\", pathParameters: Map < String , String > = emptyMap(), queryString: String = \"\", url: String = \"$scheme://$host$path\", parts: Map < String , Part> = emptyMap(), queryParameters: Map < String , List < String >> = emptyMap(), formParameters: Map < String , List < String >> = emptyMap(), certificateChain: List < X509Certificate > = emptyList(), body: String = \"\", headers: Map < String , List < String >> = emptyMap(), cookies: Map < String , Cookie> = emptyMap(), contentType: String ? = null, contentLength: Long = body.length.toLong())","title":"TestRequest"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/body/","text":"// port_http_server / com.hexagonkt.http.server.test / TestRequest / body body \u00b6 [jvm] Content val body : String","title":"Body"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/body/#body","text":"[jvm] Content val body : String","title":"body"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/certificate-chain/","text":"// port_http_server / com.hexagonkt.http.server.test / TestRequest / certificateChain certificateChain \u00b6 [jvm] Content open override fun certificateChain (): List < X509Certificate > val certificateChain : List < X509Certificate >","title":"Certificate chain"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/certificate-chain/#certificatechain","text":"[jvm] Content open override fun certificateChain (): List < X509Certificate > val certificateChain : List < X509Certificate >","title":"certificateChain"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/content-length/","text":"// port_http_server / com.hexagonkt.http.server.test / TestRequest / contentLength contentLength \u00b6 [jvm] Content open override fun contentLength (): Long val contentLength : Long","title":"Content length"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/content-length/#contentlength","text":"[jvm] Content open override fun contentLength (): Long val contentLength : Long","title":"contentLength"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/content-type/","text":"// port_http_server / com.hexagonkt.http.server.test / TestRequest / contentType contentType \u00b6 [jvm] Content open override fun contentType (): String ? val contentType : String ? = null","title":"Content type"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/content-type/#contenttype","text":"[jvm] Content open override fun contentType (): String ? val contentType : String ? = null","title":"contentType"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/cookies/","text":"// port_http_server / com.hexagonkt.http.server.test / TestRequest / cookies cookies \u00b6 [jvm] Content open override fun cookies (): Map < String , Cookie> val cookies : Map < String , Cookie>","title":"Cookies"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/cookies/#cookies","text":"[jvm] Content open override fun cookies (): Map < String , Cookie> val cookies : Map < String , Cookie>","title":"cookies"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/form-parameters/","text":"// port_http_server / com.hexagonkt.http.server.test / TestRequest / formParameters formParameters \u00b6 [jvm] Content open override fun formParameters (): Map < String , List < String >> val formParameters : Map < String , List < String >>","title":"Form parameters"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/form-parameters/#formparameters","text":"[jvm] Content open override fun formParameters (): Map < String , List < String >> val formParameters : Map < String , List < String >>","title":"formParameters"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/headers/","text":"// port_http_server / com.hexagonkt.http.server.test / TestRequest / headers headers \u00b6 [jvm] Content open override fun headers (): Map < String , List < String >> val headers : Map < String , List < String >>","title":"Headers"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/headers/#headers","text":"[jvm] Content open override fun headers (): Map < String , List < String >> val headers : Map < String , List < String >>","title":"headers"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/host/","text":"// port_http_server / com.hexagonkt.http.server.test / TestRequest / host host \u00b6 [jvm] Content open override fun host (): String val host : String","title":"Host"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/host/#host","text":"[jvm] Content open override fun host (): String val host : String","title":"host"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/ip/","text":"// port_http_server / com.hexagonkt.http.server.test / TestRequest / ip ip \u00b6 [jvm] Content open override fun ip (): String val ip : String","title":"Ip"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/ip/#ip","text":"[jvm] Content open override fun ip (): String val ip : String","title":"ip"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/load-body/","text":"// port_http_server / com.hexagonkt.http.server.test / TestRequest / loadBody loadBody \u00b6 [jvm] Content open override fun loadBody (): String","title":"Load body"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/load-body/#loadbody","text":"[jvm] Content open override fun loadBody (): String","title":"loadBody"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/method/","text":"// port_http_server / com.hexagonkt.http.server.test / TestRequest / method method \u00b6 [jvm] Content open override fun method (): Method val method : Method","title":"Method"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/method/#method","text":"[jvm] Content open override fun method (): Method val method : Method","title":"method"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/parts/","text":"// port_http_server / com.hexagonkt.http.server.test / TestRequest / parts parts \u00b6 [jvm] Content open override fun parts (): Map < String , Part> val parts : Map < String , Part>","title":"Parts"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/parts/#parts","text":"[jvm] Content open override fun parts (): Map < String , Part> val parts : Map < String , Part>","title":"parts"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/path-parameters/","text":"// port_http_server / com.hexagonkt.http.server.test / TestRequest / pathParameters pathParameters \u00b6 [jvm] Content open override fun pathParameters (): Map < String , String > val pathParameters : Map < String , String >","title":"Path parameters"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/path-parameters/#pathparameters","text":"[jvm] Content open override fun pathParameters (): Map < String , String > val pathParameters : Map < String , String >","title":"pathParameters"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/path/","text":"// port_http_server / com.hexagonkt.http.server.test / TestRequest / path path \u00b6 [jvm] Content open override fun path (): String val path : String","title":"Path"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/path/#path","text":"[jvm] Content open override fun path (): String val path : String","title":"path"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/port/","text":"// port_http_server / com.hexagonkt.http.server.test / TestRequest / port port \u00b6 [jvm] Content open override fun port (): Int val port : Int = 9090","title":"Port"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/port/#port","text":"[jvm] Content open override fun port (): Int val port : Int = 9090","title":"port"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/query-parameters/","text":"// port_http_server / com.hexagonkt.http.server.test / TestRequest / queryParameters queryParameters \u00b6 [jvm] Content open override fun queryParameters (): Map < String , List < String >> val queryParameters : Map < String , List < String >>","title":"Query parameters"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/query-parameters/#queryparameters","text":"[jvm] Content open override fun queryParameters (): Map < String , List < String >> val queryParameters : Map < String , List < String >>","title":"queryParameters"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/query-string/","text":"// port_http_server / com.hexagonkt.http.server.test / TestRequest / queryString queryString \u00b6 [jvm] Content open override fun queryString (): String val queryString : String","title":"Query string"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/query-string/#querystring","text":"[jvm] Content open override fun queryString (): String val queryString : String","title":"queryString"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/scheme/","text":"// port_http_server / com.hexagonkt.http.server.test / TestRequest / scheme scheme \u00b6 [jvm] Content open override fun scheme (): String val scheme : String","title":"Scheme"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/scheme/#scheme","text":"[jvm] Content open override fun scheme (): String val scheme : String","title":"scheme"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/url/","text":"// port_http_server / com.hexagonkt.http.server.test / TestRequest / url url \u00b6 [jvm] Content open override fun url (): String val url : String","title":"Url"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-request/url/#url","text":"[jvm] Content open override fun url (): String val url : String","title":"url"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/","text":"// port_http_server / com.hexagonkt.http.server.test / TestResponse TestResponse \u00b6 [jvm] data class TestResponse ( cookies : Map < String , Cookie>, body : Any , contentType : String ?, status : Int , outputStream : OutputStream ) : ResponsePort Functions \u00b6 Name Summary addCookie [jvm] Content open override fun addCookie (cookie: Cookie) More info Sends a response by adding the given cookie. body [jvm] Content open override fun body (): Any More info Provides the body of the response. [jvm] Content open override fun body (value: Any ) More info Sets the body of the response. contentType [jvm] Content open override fun contentType (): String ? More info Provides the content type of the response. [jvm] Content open override fun contentType (value: String ?) More info Sets the content type of the response. outputStream [jvm] Content open override fun outputStream (): OutputStream More info Provides a OutputStream instance for the response. redirect [jvm] Content open override fun redirect (url: String ) More info Sends a redirect response to the client using the specified redirect URL. removeCookie [jvm] Content open override fun removeCookie (name: String ) More info Sends a response by removing the cookie with specified name. status [jvm] Content open override fun status (): Int More info Provides the status code of the response. [jvm] Content open override fun status (value: Int ) More info Sets the status code of the response. Properties \u00b6 Name Summary body [jvm] var body : Any contentType [jvm] var contentType : String ? = null cookies [jvm] var cookies : Map < String , Cookie> outputStream [jvm] var outputStream : OutputStream status [jvm] var status : Int = 200","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/#testresponse","text":"[jvm] data class TestResponse ( cookies : Map < String , Cookie>, body : Any , contentType : String ?, status : Int , outputStream : OutputStream ) : ResponsePort","title":"TestResponse"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/#functions","text":"Name Summary addCookie [jvm] Content open override fun addCookie (cookie: Cookie) More info Sends a response by adding the given cookie. body [jvm] Content open override fun body (): Any More info Provides the body of the response. [jvm] Content open override fun body (value: Any ) More info Sets the body of the response. contentType [jvm] Content open override fun contentType (): String ? More info Provides the content type of the response. [jvm] Content open override fun contentType (value: String ?) More info Sets the content type of the response. outputStream [jvm] Content open override fun outputStream (): OutputStream More info Provides a OutputStream instance for the response. redirect [jvm] Content open override fun redirect (url: String ) More info Sends a redirect response to the client using the specified redirect URL. removeCookie [jvm] Content open override fun removeCookie (name: String ) More info Sends a response by removing the cookie with specified name. status [jvm] Content open override fun status (): Int More info Provides the status code of the response. [jvm] Content open override fun status (value: Int ) More info Sets the status code of the response.","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/#properties","text":"Name Summary body [jvm] var body : Any contentType [jvm] var contentType : String ? = null cookies [jvm] var cookies : Map < String , Cookie> outputStream [jvm] var outputStream : OutputStream status [jvm] var status : Int = 200","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/-test-response/","text":"// port_http_server / com.hexagonkt.http.server.test / TestResponse / TestResponse TestResponse \u00b6 [jvm] Content fun TestResponse (cookies: Map < String , Cookie> = emptyMap(), body: Any = \"\", contentType: String ? = null, status: Int = 200, outputStream: OutputStream = ByteArrayOutputStream())","title":" test response"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/-test-response/#testresponse","text":"[jvm] Content fun TestResponse (cookies: Map < String , Cookie> = emptyMap(), body: Any = \"\", contentType: String ? = null, status: Int = 200, outputStream: OutputStream = ByteArrayOutputStream())","title":"TestResponse"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/add-cookie/","text":"// port_http_server / com.hexagonkt.http.server.test / TestResponse / addCookie addCookie \u00b6 [jvm] Content open override fun addCookie (cookie: Cookie) More info Sends a response by adding the given cookie. Parameters \u00b6 jvm cookie Cookie to be added.","title":"Add cookie"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/add-cookie/#addcookie","text":"[jvm] Content open override fun addCookie (cookie: Cookie) More info Sends a response by adding the given cookie.","title":"addCookie"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/add-cookie/#parameters","text":"jvm cookie Cookie to be added.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/body/","text":"// port_http_server / com.hexagonkt.http.server.test / TestResponse / body body \u00b6 [jvm] Content open override fun body (): Any More info Provides the body of the response. [jvm] Content open override fun body (value: Any ) More info Sets the body of the response. Parameters \u00b6 jvm value Body content. [jvm] Content var body : Any","title":"Body"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/body/#body","text":"[jvm] Content open override fun body (): Any More info Provides the body of the response. [jvm] Content open override fun body (value: Any ) More info Sets the body of the response.","title":"body"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/body/#parameters","text":"jvm value Body content. [jvm] Content var body : Any","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/content-type/","text":"// port_http_server / com.hexagonkt.http.server.test / TestResponse / contentType contentType \u00b6 [jvm] Content open override fun contentType (): String ? More info Provides the content type of the response. [jvm] Content open override fun contentType (value: String ?) More info Sets the content type of the response. Parameters \u00b6 jvm value Content type info. [jvm] Content var contentType : String ? = null","title":"Content type"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/content-type/#contenttype","text":"[jvm] Content open override fun contentType (): String ? More info Provides the content type of the response. [jvm] Content open override fun contentType (value: String ?) More info Sets the content type of the response.","title":"contentType"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/content-type/#parameters","text":"jvm value Content type info. [jvm] Content var contentType : String ? = null","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/cookies/","text":"// port_http_server / com.hexagonkt.http.server.test / TestResponse / cookies cookies \u00b6 [jvm] Content var cookies : Map < String , Cookie>","title":"Cookies"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/cookies/#cookies","text":"[jvm] Content var cookies : Map < String , Cookie>","title":"cookies"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/output-stream/","text":"// port_http_server / com.hexagonkt.http.server.test / TestResponse / outputStream outputStream \u00b6 [jvm] Content open override fun outputStream (): OutputStream More info Provides a OutputStream instance for the response. [jvm] Content var outputStream : OutputStream","title":"Output stream"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/output-stream/#outputstream","text":"[jvm] Content open override fun outputStream (): OutputStream More info Provides a OutputStream instance for the response. [jvm] Content var outputStream : OutputStream","title":"outputStream"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/redirect/","text":"// port_http_server / com.hexagonkt.http.server.test / TestResponse / redirect redirect \u00b6 [jvm] Content open override fun redirect (url: String ) More info Sends a redirect response to the client using the specified redirect URL. Parameters \u00b6 jvm url Redirect URL.","title":"Redirect"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/redirect/#redirect","text":"[jvm] Content open override fun redirect (url: String ) More info Sends a redirect response to the client using the specified redirect URL.","title":"redirect"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/redirect/#parameters","text":"jvm url Redirect URL.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/remove-cookie/","text":"// port_http_server / com.hexagonkt.http.server.test / TestResponse / removeCookie removeCookie \u00b6 [jvm] Content open override fun removeCookie (name: String ) More info Sends a response by removing the cookie with specified name. Parameters \u00b6 jvm name Cookie to be deleted.","title":"Remove cookie"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/remove-cookie/#removecookie","text":"[jvm] Content open override fun removeCookie (name: String ) More info Sends a response by removing the cookie with specified name.","title":"removeCookie"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/remove-cookie/#parameters","text":"jvm name Cookie to be deleted.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/status/","text":"// port_http_server / com.hexagonkt.http.server.test / TestResponse / status status \u00b6 [jvm] Content open override fun status (): Int More info Provides the status code of the response. [jvm] Content open override fun status (value: Int ) More info Sets the status code of the response. Parameters \u00b6 jvm value Status code. [jvm] Content var status : Int = 200","title":"Status"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/status/#status","text":"[jvm] Content open override fun status (): Int More info Provides the status code of the response. [jvm] Content open override fun status (value: Int ) More info Sets the status code of the response.","title":"status"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-response/status/#parameters","text":"jvm value Status code. [jvm] Content var status : Int = 200","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/","text":"// port_http_server / com.hexagonkt.http.server.test / TestSession TestSession \u00b6 [jvm] data class TestSession ( attributes : Map < String , Any ?>, creationTime : Long ?, id : String ?, maxInactiveInterval : Int ?, lastAccessedTime : Long ?) : SessionPort Functions \u00b6 Name Summary attributes [jvm] Content open override fun attributes (): Map < String , Any ?> More info Returns a Map of attribute object bound to this session. creationTime [jvm] Content open override fun creationTime (): Long ? More info Returns the time when this session was created. getAttribute [jvm] Content open override fun getAttribute (name: String ): Any ? More info Returns the attribute object bound to this session by the given name. id [jvm] Content open override fun id (): String ? More info A string containing the unique identifier assigned to this session (Cookie). invalidate [jvm] Content open override fun invalidate () More info Invalidates this session then unbinds any objects bound to it. isNew [jvm] Content open override fun isNew (): Boolean More info Returns true if the client does not yet know about the session or if the client chooses not to join the session. lastAccessedTime [jvm] Content open override fun lastAccessedTime (): Long ? More info Returns the last time the client sent a request associated with this session. maxInactiveInterval [jvm] Content open override fun maxInactiveInterval (): Int ? More info Returns the maximum time interval in seconds between client accesses after which the session will be invalidated. [jvm] Content open override fun maxInactiveInterval (value: Int ?) More info Sets the time, in seconds, between client requests before the session is invalidated. removeAttribute [jvm] Content open override fun removeAttribute (name: String ) More info Removes the bound object from the session attribute with the specified name. setAttribute [jvm] Content open override fun setAttribute (name: String , value: Any ) More info Sets a attribute object to this session with the given name. Properties \u00b6 Name Summary attributes [jvm] var attributes : Map < String , Any ?> creationTime [jvm] var creationTime : Long ? = null id [jvm] var id : String ? = null lastAccessedTime [jvm] var lastAccessedTime : Long ? = null maxInactiveInterval [jvm] var maxInactiveInterval : Int ? = null","title":"Index"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/#testsession","text":"[jvm] data class TestSession ( attributes : Map < String , Any ?>, creationTime : Long ?, id : String ?, maxInactiveInterval : Int ?, lastAccessedTime : Long ?) : SessionPort","title":"TestSession"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/#functions","text":"Name Summary attributes [jvm] Content open override fun attributes (): Map < String , Any ?> More info Returns a Map of attribute object bound to this session. creationTime [jvm] Content open override fun creationTime (): Long ? More info Returns the time when this session was created. getAttribute [jvm] Content open override fun getAttribute (name: String ): Any ? More info Returns the attribute object bound to this session by the given name. id [jvm] Content open override fun id (): String ? More info A string containing the unique identifier assigned to this session (Cookie). invalidate [jvm] Content open override fun invalidate () More info Invalidates this session then unbinds any objects bound to it. isNew [jvm] Content open override fun isNew (): Boolean More info Returns true if the client does not yet know about the session or if the client chooses not to join the session. lastAccessedTime [jvm] Content open override fun lastAccessedTime (): Long ? More info Returns the last time the client sent a request associated with this session. maxInactiveInterval [jvm] Content open override fun maxInactiveInterval (): Int ? More info Returns the maximum time interval in seconds between client accesses after which the session will be invalidated. [jvm] Content open override fun maxInactiveInterval (value: Int ?) More info Sets the time, in seconds, between client requests before the session is invalidated. removeAttribute [jvm] Content open override fun removeAttribute (name: String ) More info Removes the bound object from the session attribute with the specified name. setAttribute [jvm] Content open override fun setAttribute (name: String , value: Any ) More info Sets a attribute object to this session with the given name.","title":"Functions"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/#properties","text":"Name Summary attributes [jvm] var attributes : Map < String , Any ?> creationTime [jvm] var creationTime : Long ? = null id [jvm] var id : String ? = null lastAccessedTime [jvm] var lastAccessedTime : Long ? = null maxInactiveInterval [jvm] var maxInactiveInterval : Int ? = null","title":"Properties"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/-test-session/","text":"// port_http_server / com.hexagonkt.http.server.test / TestSession / TestSession TestSession \u00b6 [jvm] Content fun TestSession (attributes: Map < String , Any ?> = emptyMap(), creationTime: Long ? = null, id: String ? = null, maxInactiveInterval: Int ? = null, lastAccessedTime: Long ? = null)","title":" test session"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/-test-session/#testsession","text":"[jvm] Content fun TestSession (attributes: Map < String , Any ?> = emptyMap(), creationTime: Long ? = null, id: String ? = null, maxInactiveInterval: Int ? = null, lastAccessedTime: Long ? = null)","title":"TestSession"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/attributes/","text":"// port_http_server / com.hexagonkt.http.server.test / TestSession / attributes attributes \u00b6 [jvm] Content open override fun attributes (): Map < String , Any ?> More info Returns a Map of attribute object bound to this session. [jvm] Content var attributes : Map < String , Any ?>","title":"Attributes"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/attributes/#attributes","text":"[jvm] Content open override fun attributes (): Map < String , Any ?> More info Returns a Map of attribute object bound to this session. [jvm] Content var attributes : Map < String , Any ?>","title":"attributes"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/creation-time/","text":"// port_http_server / com.hexagonkt.http.server.test / TestSession / creationTime creationTime \u00b6 [jvm] Content open override fun creationTime (): Long ? More info Returns the time when this session was created. [jvm] Content var creationTime : Long ? = null","title":"Creation time"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/creation-time/#creationtime","text":"[jvm] Content open override fun creationTime (): Long ? More info Returns the time when this session was created. [jvm] Content var creationTime : Long ? = null","title":"creationTime"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/get-attribute/","text":"// port_http_server / com.hexagonkt.http.server.test / TestSession / getAttribute getAttribute \u00b6 [jvm] Content open override fun getAttribute (name: String ): Any ? More info Returns the attribute object bound to this session by the given name. Parameters \u00b6 jvm name String specifying the name of the object.","title":"Get attribute"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/get-attribute/#getattribute","text":"[jvm] Content open override fun getAttribute (name: String ): Any ? More info Returns the attribute object bound to this session by the given name.","title":"getAttribute"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/get-attribute/#parameters","text":"jvm name String specifying the name of the object.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/id/","text":"// port_http_server / com.hexagonkt.http.server.test / TestSession / id id \u00b6 [jvm] Content open override fun id (): String ? More info A string containing the unique identifier assigned to this session (Cookie). [jvm] Content var id : String ? = null","title":"Id"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/id/#id","text":"[jvm] Content open override fun id (): String ? More info A string containing the unique identifier assigned to this session (Cookie). [jvm] Content var id : String ? = null","title":"id"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/invalidate/","text":"// port_http_server / com.hexagonkt.http.server.test / TestSession / invalidate invalidate \u00b6 [jvm] Content open override fun invalidate () More info Invalidates this session then unbinds any objects bound to it.","title":"Invalidate"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/invalidate/#invalidate","text":"[jvm] Content open override fun invalidate () More info Invalidates this session then unbinds any objects bound to it.","title":"invalidate"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/is-new/","text":"// port_http_server / com.hexagonkt.http.server.test / TestSession / isNew isNew \u00b6 [jvm] Content open override fun isNew (): Boolean More info Returns true if the client does not yet know about the session or if the client chooses not to join the session.","title":"Is new"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/is-new/#isnew","text":"[jvm] Content open override fun isNew (): Boolean More info Returns true if the client does not yet know about the session or if the client chooses not to join the session.","title":"isNew"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/last-accessed-time/","text":"// port_http_server / com.hexagonkt.http.server.test / TestSession / lastAccessedTime lastAccessedTime \u00b6 [jvm] Content open override fun lastAccessedTime (): Long ? More info Returns the last time the client sent a request associated with this session. [jvm] Content var lastAccessedTime : Long ? = null","title":"Last accessed time"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/last-accessed-time/#lastaccessedtime","text":"[jvm] Content open override fun lastAccessedTime (): Long ? More info Returns the last time the client sent a request associated with this session. [jvm] Content var lastAccessedTime : Long ? = null","title":"lastAccessedTime"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/max-inactive-interval/","text":"// port_http_server / com.hexagonkt.http.server.test / TestSession / maxInactiveInterval maxInactiveInterval \u00b6 [jvm] Content open override fun maxInactiveInterval (): Int ? More info Returns the maximum time interval in seconds between client accesses after which the session will be invalidated. [jvm] Content open override fun maxInactiveInterval (value: Int ?) More info Sets the time, in seconds, between client requests before the session is invalidated. Parameters \u00b6 jvm value Maximum inactive time interval in seconds. [jvm] Content var maxInactiveInterval : Int ? = null","title":"Max inactive interval"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/max-inactive-interval/#maxinactiveinterval","text":"[jvm] Content open override fun maxInactiveInterval (): Int ? More info Returns the maximum time interval in seconds between client accesses after which the session will be invalidated. [jvm] Content open override fun maxInactiveInterval (value: Int ?) More info Sets the time, in seconds, between client requests before the session is invalidated.","title":"maxInactiveInterval"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/max-inactive-interval/#parameters","text":"jvm value Maximum inactive time interval in seconds. [jvm] Content var maxInactiveInterval : Int ? = null","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/remove-attribute/","text":"// port_http_server / com.hexagonkt.http.server.test / TestSession / removeAttribute removeAttribute \u00b6 [jvm] Content open override fun removeAttribute (name: String ) More info Removes the bound object from the session attribute with the specified name. Parameters \u00b6 jvm name String specifying the name of the object.","title":"Remove attribute"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/remove-attribute/#removeattribute","text":"[jvm] Content open override fun removeAttribute (name: String ) More info Removes the bound object from the session attribute with the specified name.","title":"removeAttribute"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/remove-attribute/#parameters","text":"jvm name String specifying the name of the object.","title":"Parameters"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/set-attribute/","text":"// port_http_server / com.hexagonkt.http.server.test / TestSession / setAttribute setAttribute \u00b6 [jvm] Content open override fun setAttribute (name: String , value: Any ) More info Sets a attribute object to this session with the given name. Parameters \u00b6 jvm name String specifying the name of the object. value The object to be bound.","title":"Set attribute"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/set-attribute/#setattribute","text":"[jvm] Content open override fun setAttribute (name: String , value: Any ) More info Sets a attribute object to this session with the given name.","title":"setAttribute"},{"location":"port_http_server/com.hexagonkt.http.server.test/-test-session/set-attribute/#parameters","text":"jvm name String specifying the name of the object. value The object to be bound.","title":"Parameters"},{"location":"port_messaging/","text":"// port_messaging port_messaging \u00b6 [jvm] !!! Warning This module is a preview and its code is still being reviewed and tested. TODO Install the Dependency \u00b6 This module is not meant to be used directly. You should include and Adapter implementing this feature (as /messaging_rabbitmq) in order to create a queue client. Packages \u00b6 Name com.hexagonkt.messaging","title":"Messaging (beta)"},{"location":"port_messaging/#port_messaging","text":"[jvm] !!! Warning This module is a preview and its code is still being reviewed and tested. TODO","title":"port_messaging"},{"location":"port_messaging/#install-the-dependency","text":"This module is not meant to be used directly. You should include and Adapter implementing this feature (as /messaging_rabbitmq) in order to create a queue client.","title":"Install the Dependency"},{"location":"port_messaging/#packages","text":"Name com.hexagonkt.messaging","title":"Packages"},{"location":"port_messaging/com.hexagonkt.messaging/","text":"// port_messaging / com.hexagonkt.messaging Package com.hexagonkt.messaging \u00b6 [jvm] TODO Types \u00b6 Name Summary Message [jvm] Content open class Message ( timestamp : Long , dateTime : Long , hostname : String , ip : String , jvmId : String , thread : String ) MessagingPort [jvm] Content interface MessagingPort","title":"Index"},{"location":"port_messaging/com.hexagonkt.messaging/#package-comhexagonktmessaging","text":"[jvm] TODO","title":"Package com.hexagonkt.messaging"},{"location":"port_messaging/com.hexagonkt.messaging/#types","text":"Name Summary Message [jvm] Content open class Message ( timestamp : Long , dateTime : Long , hostname : String , ip : String , jvmId : String , thread : String ) MessagingPort [jvm] Content interface MessagingPort","title":"Types"},{"location":"port_messaging/com.hexagonkt.messaging/-message/","text":"// port_messaging / com.hexagonkt.messaging / Message Message \u00b6 [jvm] open class Message ( timestamp : Long , dateTime : Long , hostname : String , ip : String , jvmId : String , thread : String ) Properties \u00b6 Name Summary dateTime [jvm] val dateTime : Long hostname [jvm] val hostname : String ip [jvm] val ip : String jvmId [jvm] val jvmId : String thread [jvm] val thread : String timestamp [jvm] val timestamp : Long","title":"Index"},{"location":"port_messaging/com.hexagonkt.messaging/-message/#message","text":"[jvm] open class Message ( timestamp : Long , dateTime : Long , hostname : String , ip : String , jvmId : String , thread : String )","title":"Message"},{"location":"port_messaging/com.hexagonkt.messaging/-message/#properties","text":"Name Summary dateTime [jvm] val dateTime : Long hostname [jvm] val hostname : String ip [jvm] val ip : String jvmId [jvm] val jvmId : String thread [jvm] val thread : String timestamp [jvm] val timestamp : Long","title":"Properties"},{"location":"port_messaging/com.hexagonkt.messaging/-message/-message/","text":"// port_messaging / com.hexagonkt.messaging / Message / Message Message \u00b6 [jvm] Content fun Message (timestamp: Long = currentTimeMillis(), dateTime: Long = LocalDateTime.now().toNumber(), hostname: String = Jvm.hostname, ip: String = Jvm.ip, jvmId: String = Jvm.id, thread: String = currentThread().name)","title":" message"},{"location":"port_messaging/com.hexagonkt.messaging/-message/-message/#message","text":"[jvm] Content fun Message (timestamp: Long = currentTimeMillis(), dateTime: Long = LocalDateTime.now().toNumber(), hostname: String = Jvm.hostname, ip: String = Jvm.ip, jvmId: String = Jvm.id, thread: String = currentThread().name)","title":"Message"},{"location":"port_messaging/com.hexagonkt.messaging/-message/date-time/","text":"// port_messaging / com.hexagonkt.messaging / Message / dateTime dateTime \u00b6 [jvm] Content val dateTime : Long","title":"Date time"},{"location":"port_messaging/com.hexagonkt.messaging/-message/date-time/#datetime","text":"[jvm] Content val dateTime : Long","title":"dateTime"},{"location":"port_messaging/com.hexagonkt.messaging/-message/hostname/","text":"// port_messaging / com.hexagonkt.messaging / Message / hostname hostname \u00b6 [jvm] Content val hostname : String","title":"Hostname"},{"location":"port_messaging/com.hexagonkt.messaging/-message/hostname/#hostname","text":"[jvm] Content val hostname : String","title":"hostname"},{"location":"port_messaging/com.hexagonkt.messaging/-message/ip/","text":"// port_messaging / com.hexagonkt.messaging / Message / ip ip \u00b6 [jvm] Content val ip : String","title":"Ip"},{"location":"port_messaging/com.hexagonkt.messaging/-message/ip/#ip","text":"[jvm] Content val ip : String","title":"ip"},{"location":"port_messaging/com.hexagonkt.messaging/-message/jvm-id/","text":"// port_messaging / com.hexagonkt.messaging / Message / jvmId jvmId \u00b6 [jvm] Content val jvmId : String","title":"Jvm id"},{"location":"port_messaging/com.hexagonkt.messaging/-message/jvm-id/#jvmid","text":"[jvm] Content val jvmId : String","title":"jvmId"},{"location":"port_messaging/com.hexagonkt.messaging/-message/thread/","text":"// port_messaging / com.hexagonkt.messaging / Message / thread thread \u00b6 [jvm] Content val thread : String","title":"Thread"},{"location":"port_messaging/com.hexagonkt.messaging/-message/thread/#thread","text":"[jvm] Content val thread : String","title":"thread"},{"location":"port_messaging/com.hexagonkt.messaging/-message/timestamp/","text":"// port_messaging / com.hexagonkt.messaging / Message / timestamp timestamp \u00b6 [jvm] Content val timestamp : Long","title":"Timestamp"},{"location":"port_messaging/com.hexagonkt.messaging/-message/timestamp/#timestamp","text":"[jvm] Content val timestamp : Long","title":"timestamp"},{"location":"port_messaging/com.hexagonkt.messaging/-messaging-port/","text":"// port_messaging / com.hexagonkt.messaging / MessagingPort MessagingPort \u00b6 [jvm] interface MessagingPort Functions \u00b6 Name Summary consume [jvm] Content open fun < T : Message > consume (type: KClass < T >, consumer: ( T ) -> Unit ) abstract fun < T : Message > consume (type: KClass < T >, address: String , consumer: ( T ) -> Unit ) publish [jvm] Content open fun publish (message: Message ) abstract fun publish (message: Message , address: String )","title":"Index"},{"location":"port_messaging/com.hexagonkt.messaging/-messaging-port/#messagingport","text":"[jvm] interface MessagingPort","title":"MessagingPort"},{"location":"port_messaging/com.hexagonkt.messaging/-messaging-port/#functions","text":"Name Summary consume [jvm] Content open fun < T : Message > consume (type: KClass < T >, consumer: ( T ) -> Unit ) abstract fun < T : Message > consume (type: KClass < T >, address: String , consumer: ( T ) -> Unit ) publish [jvm] Content open fun publish (message: Message ) abstract fun publish (message: Message , address: String )","title":"Functions"},{"location":"port_messaging/com.hexagonkt.messaging/-messaging-port/consume/","text":"// port_messaging / com.hexagonkt.messaging / MessagingPort / consume consume \u00b6 [jvm] Content abstract fun < T : Message > consume (type: KClass < T >, address: String , consumer: ( T ) -> Unit ) open fun < T : Message > consume (type: KClass < T >, consumer: ( T ) -> Unit )","title":"Consume"},{"location":"port_messaging/com.hexagonkt.messaging/-messaging-port/consume/#consume","text":"[jvm] Content abstract fun < T : Message > consume (type: KClass < T >, address: String , consumer: ( T ) -> Unit ) open fun < T : Message > consume (type: KClass < T >, consumer: ( T ) -> Unit )","title":"consume"},{"location":"port_messaging/com.hexagonkt.messaging/-messaging-port/publish/","text":"// port_messaging / com.hexagonkt.messaging / MessagingPort / publish publish \u00b6 [jvm] Content abstract fun publish (message: Message , address: String ) open fun publish (message: Message )","title":"Publish"},{"location":"port_messaging/com.hexagonkt.messaging/-messaging-port/publish/#publish","text":"[jvm] Content abstract fun publish (message: Message , address: String ) open fun publish (message: Message )","title":"publish"},{"location":"port_store/","text":"// port_store port_store \u00b6 [jvm] !!! Warning This module is a preview and its code is still being reviewed and tested. Hexagon's storage utilities for data classes. Install the Dependency \u00b6 This module is not meant to be used directly. You should include and Adapter implementing this feature (as /store_mongodb) in order to create a data store. Packages \u00b6 Name com.hexagonkt.store com.hexagonkt.store.hashmap","title":"Store (beta)"},{"location":"port_store/#port_store","text":"[jvm] !!! Warning This module is a preview and its code is still being reviewed and tested. Hexagon's storage utilities for data classes.","title":"port_store"},{"location":"port_store/#install-the-dependency","text":"This module is not meant to be used directly. You should include and Adapter implementing this feature (as /store_mongodb) in order to create a data store.","title":"Install the Dependency"},{"location":"port_store/#packages","text":"Name com.hexagonkt.store com.hexagonkt.store.hashmap","title":"Packages"},{"location":"port_store/com.hexagonkt.store/","text":"// port_store / com.hexagonkt.store Package com.hexagonkt.store \u00b6 [jvm] TODO Types \u00b6 Name Summary IndexOrder [jvm] Content enum IndexOrder : Enum < IndexOrder > Mapper [jvm] Content interface Mapper < T : Any > More info Maps objects and fields from/to stores and filters. Store [jvm] Content interface Store < T : Any , K : Any > More info TODO All methods accepting maps rely on mapOf returning an insertion ordered map.","title":"Index"},{"location":"port_store/com.hexagonkt.store/#package-comhexagonktstore","text":"[jvm] TODO","title":"Package com.hexagonkt.store"},{"location":"port_store/com.hexagonkt.store/#types","text":"Name Summary IndexOrder [jvm] Content enum IndexOrder : Enum < IndexOrder > Mapper [jvm] Content interface Mapper < T : Any > More info Maps objects and fields from/to stores and filters. Store [jvm] Content interface Store < T : Any , K : Any > More info TODO All methods accepting maps rely on mapOf returning an insertion ordered map.","title":"Types"},{"location":"port_store/com.hexagonkt.store/-index-order/","text":"// port_store / com.hexagonkt.store / IndexOrder IndexOrder \u00b6 [jvm] enum IndexOrder : Enum < IndexOrder > Entries \u00b6 DESCENDING [jvm] DESCENDING () ASCENDING [jvm] ASCENDING () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"port_store/com.hexagonkt.store/-index-order/#indexorder","text":"[jvm] enum IndexOrder : Enum < IndexOrder >","title":"IndexOrder"},{"location":"port_store/com.hexagonkt.store/-index-order/#entries","text":"DESCENDING [jvm] DESCENDING () ASCENDING [jvm] ASCENDING ()","title":"Entries"},{"location":"port_store/com.hexagonkt.store/-index-order/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"port_store/com.hexagonkt.store/-index-order/-a-s-c-e-n-d-i-n-g/","text":"// port_store / com.hexagonkt.store / IndexOrder / ASCENDING ASCENDING \u00b6 [jvm] ASCENDING () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"port_store/com.hexagonkt.store/-index-order/-a-s-c-e-n-d-i-n-g/#ascending","text":"[jvm] ASCENDING ()","title":"ASCENDING"},{"location":"port_store/com.hexagonkt.store/-index-order/-a-s-c-e-n-d-i-n-g/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"port_store/com.hexagonkt.store/-index-order/-a-s-c-e-n-d-i-n-g/name/","text":"// port_store / com.hexagonkt.store / IndexOrder / ASCENDING / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"port_store/com.hexagonkt.store/-index-order/-a-s-c-e-n-d-i-n-g/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"port_store/com.hexagonkt.store/-index-order/-a-s-c-e-n-d-i-n-g/ordinal/","text":"// port_store / com.hexagonkt.store / IndexOrder / ASCENDING / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"port_store/com.hexagonkt.store/-index-order/-a-s-c-e-n-d-i-n-g/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"port_store/com.hexagonkt.store/-index-order/-d-e-s-c-e-n-d-i-n-g/","text":"// port_store / com.hexagonkt.store / IndexOrder / DESCENDING DESCENDING \u00b6 [jvm] DESCENDING () Properties \u00b6 Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Index"},{"location":"port_store/com.hexagonkt.store/-index-order/-d-e-s-c-e-n-d-i-n-g/#descending","text":"[jvm] DESCENDING ()","title":"DESCENDING"},{"location":"port_store/com.hexagonkt.store/-index-order/-d-e-s-c-e-n-d-i-n-g/#properties","text":"Name Summary name [jvm] val name : String ordinal [jvm] val ordinal : Int","title":"Properties"},{"location":"port_store/com.hexagonkt.store/-index-order/-d-e-s-c-e-n-d-i-n-g/name/","text":"// port_store / com.hexagonkt.store / IndexOrder / DESCENDING / name name \u00b6 [jvm] Content val name : String","title":"Name"},{"location":"port_store/com.hexagonkt.store/-index-order/-d-e-s-c-e-n-d-i-n-g/name/#name","text":"[jvm] Content val name : String","title":"name"},{"location":"port_store/com.hexagonkt.store/-index-order/-d-e-s-c-e-n-d-i-n-g/ordinal/","text":"// port_store / com.hexagonkt.store / IndexOrder / DESCENDING / ordinal ordinal \u00b6 [jvm] Content val ordinal : Int","title":"Ordinal"},{"location":"port_store/com.hexagonkt.store/-index-order/-d-e-s-c-e-n-d-i-n-g/ordinal/#ordinal","text":"[jvm] Content val ordinal : Int","title":"ordinal"},{"location":"port_store/com.hexagonkt.store/-mapper/","text":"// port_store / com.hexagonkt.store / Mapper Mapper \u00b6 [jvm] interface Mapper < T : Any > Maps objects and fields from/to stores and filters. Functions \u00b6 Name Summary fromStore [jvm] Content abstract fun fromStore (map: Map < String , Any >): T open fun fromStore (property: String , value: Any ): Any toStore [jvm] Content abstract fun toStore (instance: T ): Map < String , Any > open fun toStore (property: String , value: Any ): Any Properties \u00b6 Name Summary fields [jvm] abstract val fields : Map < String , KProperty1 < T , *>> Inheritors \u00b6 Name HashMapMapper","title":"Index"},{"location":"port_store/com.hexagonkt.store/-mapper/#mapper","text":"[jvm] interface Mapper < T : Any > Maps objects and fields from/to stores and filters.","title":"Mapper"},{"location":"port_store/com.hexagonkt.store/-mapper/#functions","text":"Name Summary fromStore [jvm] Content abstract fun fromStore (map: Map < String , Any >): T open fun fromStore (property: String , value: Any ): Any toStore [jvm] Content abstract fun toStore (instance: T ): Map < String , Any > open fun toStore (property: String , value: Any ): Any","title":"Functions"},{"location":"port_store/com.hexagonkt.store/-mapper/#properties","text":"Name Summary fields [jvm] abstract val fields : Map < String , KProperty1 < T , *>>","title":"Properties"},{"location":"port_store/com.hexagonkt.store/-mapper/#inheritors","text":"Name HashMapMapper","title":"Inheritors"},{"location":"port_store/com.hexagonkt.store/-mapper/fields/","text":"// port_store / com.hexagonkt.store / Mapper / fields fields \u00b6 [jvm] Content abstract val fields : Map < String , KProperty1 < T , *>>","title":"Fields"},{"location":"port_store/com.hexagonkt.store/-mapper/fields/#fields","text":"[jvm] Content abstract val fields : Map < String , KProperty1 < T , *>>","title":"fields"},{"location":"port_store/com.hexagonkt.store/-mapper/from-store/","text":"// port_store / com.hexagonkt.store / Mapper / fromStore fromStore \u00b6 [jvm] Content abstract fun fromStore (map: Map < String , Any >): T open fun fromStore (property: String , value: Any ): Any","title":"From store"},{"location":"port_store/com.hexagonkt.store/-mapper/from-store/#fromstore","text":"[jvm] Content abstract fun fromStore (map: Map < String , Any >): T open fun fromStore (property: String , value: Any ): Any","title":"fromStore"},{"location":"port_store/com.hexagonkt.store/-mapper/to-store/","text":"// port_store / com.hexagonkt.store / Mapper / toStore toStore \u00b6 [jvm] Content abstract fun toStore (instance: T ): Map < String , Any > open fun toStore (property: String , value: Any ): Any","title":"To store"},{"location":"port_store/com.hexagonkt.store/-mapper/to-store/#tostore","text":"[jvm] Content abstract fun toStore (instance: T ): Map < String , Any > open fun toStore (property: String , value: Any ): Any","title":"toStore"},{"location":"port_store/com.hexagonkt.store/-store/","text":"// port_store / com.hexagonkt.store / Store Store \u00b6 [jvm] interface Store < T : Any , K : Any > TODO All methods accepting maps rely on mapOf returning an insertion ordered map. Take care of this in the future to avoid possible bugs Functions \u00b6 Name Summary count [jvm] Content abstract fun count (filter: Map < String , *> = emptyMap ()): Long createIndex [jvm] Content open fun createIndex (unique: Boolean , vararg fields: Pair < KProperty1 < T , >, IndexOrder >): String open fun createIndex (unique: Boolean , vararg fields: KProperty1 < T , >): String abstract fun createIndex (unique: Boolean , fields: Map < String , IndexOrder >): String deleteMany [jvm] Content abstract fun deleteMany (filter: Map < String , *>): Long deleteOne [jvm] Content abstract fun deleteOne (id: K ): Boolean drop [jvm] Content abstract fun drop () fields [jvm] Content open fun fields (vararg updates: Pair < KProperty1 < T , >, >): Map < String , > open fun fields (updates: Map < KProperty1 < T , >, >): Map < String , > findAll [jvm] Content open fun findAll (limit: Int ? = null, skip: Int ? = null, sort: Map < String , Boolean > = emptyMap()): List < T > open fun findAll (fields: List < String >, limit: Int ? = null, skip: Int ? = null, sort: Map < String , Boolean > = emptyMap()): List < Map < String , *>> findMany [jvm] Content abstract fun findMany (filter: Map < String , >, limit: Int ? = null, skip: Int ? = null, sort: Map < String , Boolean > = emptyMap()): List < T > abstract fun findMany (filter: Map < String , >, fields: List < String >, limit: Int ? = null, skip: Int ? = null, sort: Map < String , Boolean > = emptyMap()): List < Map < String , *>> findOne [jvm] Content abstract fun findOne (key: K ): T ? open fun findOne (filter: Map < String , >): T ? abstract fun findOne (key: K , fields: List < String >): Map < String , >? open fun findOne (filter: Map < String , >, fields: List < String >): Map < String , >? import [jvm] Content open fun import (input: File ) open fun import (input: URL ) insertMany [jvm] Content open fun insertMany (vararg instances: T ): List < K > abstract fun insertMany (instances: List < T >): List < K > insertOne [jvm] Content abstract fun insertOne (instance: T ): K replaceMany [jvm] Content open fun replaceMany (vararg instances: T ): List < T > abstract fun replaceMany (instances: List < T >): List < T > replaceOne [jvm] Content abstract fun replaceOne (instance: T ): Boolean saveMany [jvm] Content abstract fun saveMany (instances: List < T >): List < K ?> saveOne [jvm] Content abstract fun saveOne (instance: T ): K ? updateMany [jvm] Content abstract fun updateMany (filter: Map < String , >, updates: Map < String , >): Long updateOne [jvm] Content open fun updateOne (key: K , vararg updates: Pair < KProperty1 < T , >, >): Boolean abstract fun updateOne (key: K , updates: Map < String , *>): Boolean Properties \u00b6 Name Summary key [jvm] abstract val key : KProperty1 < T , K > mapper [jvm] abstract val mapper : Mapper < T > name [jvm] abstract val name : String type [jvm] abstract val type : KClass < T > Inheritors \u00b6 Name HashMapStore","title":"Index"},{"location":"port_store/com.hexagonkt.store/-store/#store","text":"[jvm] interface Store < T : Any , K : Any > TODO All methods accepting maps rely on mapOf returning an insertion ordered map. Take care of this in the future to avoid possible bugs","title":"Store"},{"location":"port_store/com.hexagonkt.store/-store/#functions","text":"Name Summary count [jvm] Content abstract fun count (filter: Map < String , *> = emptyMap ()): Long createIndex [jvm] Content open fun createIndex (unique: Boolean , vararg fields: Pair < KProperty1 < T , >, IndexOrder >): String open fun createIndex (unique: Boolean , vararg fields: KProperty1 < T , >): String abstract fun createIndex (unique: Boolean , fields: Map < String , IndexOrder >): String deleteMany [jvm] Content abstract fun deleteMany (filter: Map < String , *>): Long deleteOne [jvm] Content abstract fun deleteOne (id: K ): Boolean drop [jvm] Content abstract fun drop () fields [jvm] Content open fun fields (vararg updates: Pair < KProperty1 < T , >, >): Map < String , > open fun fields (updates: Map < KProperty1 < T , >, >): Map < String , > findAll [jvm] Content open fun findAll (limit: Int ? = null, skip: Int ? = null, sort: Map < String , Boolean > = emptyMap()): List < T > open fun findAll (fields: List < String >, limit: Int ? = null, skip: Int ? = null, sort: Map < String , Boolean > = emptyMap()): List < Map < String , *>> findMany [jvm] Content abstract fun findMany (filter: Map < String , >, limit: Int ? = null, skip: Int ? = null, sort: Map < String , Boolean > = emptyMap()): List < T > abstract fun findMany (filter: Map < String , >, fields: List < String >, limit: Int ? = null, skip: Int ? = null, sort: Map < String , Boolean > = emptyMap()): List < Map < String , *>> findOne [jvm] Content abstract fun findOne (key: K ): T ? open fun findOne (filter: Map < String , >): T ? abstract fun findOne (key: K , fields: List < String >): Map < String , >? open fun findOne (filter: Map < String , >, fields: List < String >): Map < String , >? import [jvm] Content open fun import (input: File ) open fun import (input: URL ) insertMany [jvm] Content open fun insertMany (vararg instances: T ): List < K > abstract fun insertMany (instances: List < T >): List < K > insertOne [jvm] Content abstract fun insertOne (instance: T ): K replaceMany [jvm] Content open fun replaceMany (vararg instances: T ): List < T > abstract fun replaceMany (instances: List < T >): List < T > replaceOne [jvm] Content abstract fun replaceOne (instance: T ): Boolean saveMany [jvm] Content abstract fun saveMany (instances: List < T >): List < K ?> saveOne [jvm] Content abstract fun saveOne (instance: T ): K ? updateMany [jvm] Content abstract fun updateMany (filter: Map < String , >, updates: Map < String , >): Long updateOne [jvm] Content open fun updateOne (key: K , vararg updates: Pair < KProperty1 < T , >, >): Boolean abstract fun updateOne (key: K , updates: Map < String , *>): Boolean","title":"Functions"},{"location":"port_store/com.hexagonkt.store/-store/#properties","text":"Name Summary key [jvm] abstract val key : KProperty1 < T , K > mapper [jvm] abstract val mapper : Mapper < T > name [jvm] abstract val name : String type [jvm] abstract val type : KClass < T >","title":"Properties"},{"location":"port_store/com.hexagonkt.store/-store/#inheritors","text":"Name HashMapStore","title":"Inheritors"},{"location":"port_store/com.hexagonkt.store/-store/count/","text":"// port_store / com.hexagonkt.store / Store / count count \u00b6 [jvm] Content abstract fun count (filter: Map < String , *> = emptyMap ()): Long","title":"Count"},{"location":"port_store/com.hexagonkt.store/-store/count/#count","text":"[jvm] Content abstract fun count (filter: Map < String , *> = emptyMap ()): Long","title":"count"},{"location":"port_store/com.hexagonkt.store/-store/create-index/","text":"// port_store / com.hexagonkt.store / Store / createIndex createIndex \u00b6 [jvm] Content abstract fun createIndex (unique: Boolean , fields: Map < String , IndexOrder >): String open fun createIndex (unique: Boolean , vararg fields: Pair < KProperty1 < T , >, IndexOrder >): String open fun createIndex (unique: Boolean , vararg fields: KProperty1 < T , >): String","title":"Create index"},{"location":"port_store/com.hexagonkt.store/-store/create-index/#createindex","text":"[jvm] Content abstract fun createIndex (unique: Boolean , fields: Map < String , IndexOrder >): String open fun createIndex (unique: Boolean , vararg fields: Pair < KProperty1 < T , >, IndexOrder >): String open fun createIndex (unique: Boolean , vararg fields: KProperty1 < T , >): String","title":"createIndex"},{"location":"port_store/com.hexagonkt.store/-store/delete-many/","text":"// port_store / com.hexagonkt.store / Store / deleteMany deleteMany \u00b6 [jvm] Content abstract fun deleteMany (filter: Map < String , *>): Long","title":"Delete many"},{"location":"port_store/com.hexagonkt.store/-store/delete-many/#deletemany","text":"[jvm] Content abstract fun deleteMany (filter: Map < String , *>): Long","title":"deleteMany"},{"location":"port_store/com.hexagonkt.store/-store/delete-one/","text":"// port_store / com.hexagonkt.store / Store / deleteOne deleteOne \u00b6 [jvm] Content abstract fun deleteOne (id: K ): Boolean","title":"Delete one"},{"location":"port_store/com.hexagonkt.store/-store/delete-one/#deleteone","text":"[jvm] Content abstract fun deleteOne (id: K ): Boolean","title":"deleteOne"},{"location":"port_store/com.hexagonkt.store/-store/drop/","text":"// port_store / com.hexagonkt.store / Store / drop drop \u00b6 [jvm] Content abstract fun drop ()","title":"Drop"},{"location":"port_store/com.hexagonkt.store/-store/drop/#drop","text":"[jvm] Content abstract fun drop ()","title":"drop"},{"location":"port_store/com.hexagonkt.store/-store/fields/","text":"// port_store / com.hexagonkt.store / Store / fields fields \u00b6 [jvm] Content open fun fields (updates: Map < KProperty1 < T , >, >): Map < String , > open fun fields (vararg updates: Pair < KProperty1 < T , >, >): Map < String , >","title":"Fields"},{"location":"port_store/com.hexagonkt.store/-store/fields/#fields","text":"[jvm] Content open fun fields (updates: Map < KProperty1 < T , >, >): Map < String , > open fun fields (vararg updates: Pair < KProperty1 < T , >, >): Map < String , >","title":"fields"},{"location":"port_store/com.hexagonkt.store/-store/find-all/","text":"// port_store / com.hexagonkt.store / Store / findAll findAll \u00b6 [jvm] Content open fun findAll (limit: Int ? = null, skip: Int ? = null, sort: Map < String , Boolean > = emptyMap()): List < T > open fun findAll (fields: List < String >, limit: Int ? = null, skip: Int ? = null, sort: Map < String , Boolean > = emptyMap()): List < Map < String , *>>","title":"Find all"},{"location":"port_store/com.hexagonkt.store/-store/find-all/#findall","text":"[jvm] Content open fun findAll (limit: Int ? = null, skip: Int ? = null, sort: Map < String , Boolean > = emptyMap()): List < T > open fun findAll (fields: List < String >, limit: Int ? = null, skip: Int ? = null, sort: Map < String , Boolean > = emptyMap()): List < Map < String , *>>","title":"findAll"},{"location":"port_store/com.hexagonkt.store/-store/find-many/","text":"// port_store / com.hexagonkt.store / Store / findMany findMany \u00b6 [jvm] Content abstract fun findMany (filter: Map < String , >, limit: Int ? = null, skip: Int ? = null, sort: Map < String , Boolean > = emptyMap()): List < T > abstract fun findMany (filter: Map < String , >, fields: List < String >, limit: Int ? = null, skip: Int ? = null, sort: Map < String , Boolean > = emptyMap()): List < Map < String , *>>","title":"Find many"},{"location":"port_store/com.hexagonkt.store/-store/find-many/#findmany","text":"[jvm] Content abstract fun findMany (filter: Map < String , >, limit: Int ? = null, skip: Int ? = null, sort: Map < String , Boolean > = emptyMap()): List < T > abstract fun findMany (filter: Map < String , >, fields: List < String >, limit: Int ? = null, skip: Int ? = null, sort: Map < String , Boolean > = emptyMap()): List < Map < String , *>>","title":"findMany"},{"location":"port_store/com.hexagonkt.store/-store/find-one/","text":"// port_store / com.hexagonkt.store / Store / findOne findOne \u00b6 [jvm] Content abstract fun findOne (key: K ): T ? abstract fun findOne (key: K , fields: List < String >): Map < String , >? open fun findOne (filter: Map < String , >): T ? open fun findOne (filter: Map < String , >, fields: List < String >): Map < String , >?","title":"Find one"},{"location":"port_store/com.hexagonkt.store/-store/find-one/#findone","text":"[jvm] Content abstract fun findOne (key: K ): T ? abstract fun findOne (key: K , fields: List < String >): Map < String , >? open fun findOne (filter: Map < String , >): T ? open fun findOne (filter: Map < String , >, fields: List < String >): Map < String , >?","title":"findOne"},{"location":"port_store/com.hexagonkt.store/-store/import/","text":"// port_store / com.hexagonkt.store / Store / import import \u00b6 [jvm] Content open fun import (input: File ) open fun import (input: URL )","title":"Import"},{"location":"port_store/com.hexagonkt.store/-store/import/#import","text":"[jvm] Content open fun import (input: File ) open fun import (input: URL )","title":"import"},{"location":"port_store/com.hexagonkt.store/-store/insert-many/","text":"// port_store / com.hexagonkt.store / Store / insertMany insertMany \u00b6 [jvm] Content abstract fun insertMany (instances: List < T >): List < K > open fun insertMany (vararg instances: T ): List < K >","title":"Insert many"},{"location":"port_store/com.hexagonkt.store/-store/insert-many/#insertmany","text":"[jvm] Content abstract fun insertMany (instances: List < T >): List < K > open fun insertMany (vararg instances: T ): List < K >","title":"insertMany"},{"location":"port_store/com.hexagonkt.store/-store/insert-one/","text":"// port_store / com.hexagonkt.store / Store / insertOne insertOne \u00b6 [jvm] Content abstract fun insertOne (instance: T ): K","title":"Insert one"},{"location":"port_store/com.hexagonkt.store/-store/insert-one/#insertone","text":"[jvm] Content abstract fun insertOne (instance: T ): K","title":"insertOne"},{"location":"port_store/com.hexagonkt.store/-store/key/","text":"// port_store / com.hexagonkt.store / Store / key key \u00b6 [jvm] Content abstract val key : KProperty1 < T , K >","title":"Key"},{"location":"port_store/com.hexagonkt.store/-store/key/#key","text":"[jvm] Content abstract val key : KProperty1 < T , K >","title":"key"},{"location":"port_store/com.hexagonkt.store/-store/mapper/","text":"// port_store / com.hexagonkt.store / Store / mapper mapper \u00b6 [jvm] Content abstract val mapper : Mapper < T >","title":"Mapper"},{"location":"port_store/com.hexagonkt.store/-store/mapper/#mapper","text":"[jvm] Content abstract val mapper : Mapper < T >","title":"mapper"},{"location":"port_store/com.hexagonkt.store/-store/name/","text":"// port_store / com.hexagonkt.store / Store / name name \u00b6 [jvm] Content abstract val name : String","title":"Name"},{"location":"port_store/com.hexagonkt.store/-store/name/#name","text":"[jvm] Content abstract val name : String","title":"name"},{"location":"port_store/com.hexagonkt.store/-store/replace-many/","text":"// port_store / com.hexagonkt.store / Store / replaceMany replaceMany \u00b6 [jvm] Content abstract fun replaceMany (instances: List < T >): List < T > open fun replaceMany (vararg instances: T ): List < T >","title":"Replace many"},{"location":"port_store/com.hexagonkt.store/-store/replace-many/#replacemany","text":"[jvm] Content abstract fun replaceMany (instances: List < T >): List < T > open fun replaceMany (vararg instances: T ): List < T >","title":"replaceMany"},{"location":"port_store/com.hexagonkt.store/-store/replace-one/","text":"// port_store / com.hexagonkt.store / Store / replaceOne replaceOne \u00b6 [jvm] Content abstract fun replaceOne (instance: T ): Boolean","title":"Replace one"},{"location":"port_store/com.hexagonkt.store/-store/replace-one/#replaceone","text":"[jvm] Content abstract fun replaceOne (instance: T ): Boolean","title":"replaceOne"},{"location":"port_store/com.hexagonkt.store/-store/save-many/","text":"// port_store / com.hexagonkt.store / Store / saveMany saveMany \u00b6 [jvm] Content abstract fun saveMany (instances: List < T >): List < K ?>","title":"Save many"},{"location":"port_store/com.hexagonkt.store/-store/save-many/#savemany","text":"[jvm] Content abstract fun saveMany (instances: List < T >): List < K ?>","title":"saveMany"},{"location":"port_store/com.hexagonkt.store/-store/save-one/","text":"// port_store / com.hexagonkt.store / Store / saveOne saveOne \u00b6 [jvm] Content abstract fun saveOne (instance: T ): K ?","title":"Save one"},{"location":"port_store/com.hexagonkt.store/-store/save-one/#saveone","text":"[jvm] Content abstract fun saveOne (instance: T ): K ?","title":"saveOne"},{"location":"port_store/com.hexagonkt.store/-store/type/","text":"// port_store / com.hexagonkt.store / Store / type type \u00b6 [jvm] Content abstract val type : KClass < T >","title":"Type"},{"location":"port_store/com.hexagonkt.store/-store/type/#type","text":"[jvm] Content abstract val type : KClass < T >","title":"type"},{"location":"port_store/com.hexagonkt.store/-store/update-many/","text":"// port_store / com.hexagonkt.store / Store / updateMany updateMany \u00b6 [jvm] Content abstract fun updateMany (filter: Map < String , >, updates: Map < String , >): Long","title":"Update many"},{"location":"port_store/com.hexagonkt.store/-store/update-many/#updatemany","text":"[jvm] Content abstract fun updateMany (filter: Map < String , >, updates: Map < String , >): Long","title":"updateMany"},{"location":"port_store/com.hexagonkt.store/-store/update-one/","text":"// port_store / com.hexagonkt.store / Store / updateOne updateOne \u00b6 [jvm] Content abstract fun updateOne (key: K , updates: Map < String , >): Boolean open fun updateOne (key: K , vararg updates: Pair < KProperty1 < T , >, *>): Boolean","title":"Update one"},{"location":"port_store/com.hexagonkt.store/-store/update-one/#updateone","text":"[jvm] Content abstract fun updateOne (key: K , updates: Map < String , >): Boolean open fun updateOne (key: K , vararg updates: Pair < KProperty1 < T , >, *>): Boolean","title":"updateOne"},{"location":"port_store/com.hexagonkt.store.hashmap/","text":"// port_store / com.hexagonkt.store.hashmap Package com.hexagonkt.store.hashmap \u00b6 Types \u00b6 Name Summary HashMapMapper [jvm] Content class HashMapMapper < T : Any >( type : KClass < T >) : Mapper < T > HashMapStore [jvm] Content class HashMapStore < T : Any , K : Any >( type : KClass < T >, key : KProperty1 < T , K >, name : String , store : HashMap < K , Map < String , Any >>, mapper : Mapper < T >) : Store < T , K >","title":"Index"},{"location":"port_store/com.hexagonkt.store.hashmap/#package-comhexagonktstorehashmap","text":"","title":"Package com.hexagonkt.store.hashmap"},{"location":"port_store/com.hexagonkt.store.hashmap/#types","text":"Name Summary HashMapMapper [jvm] Content class HashMapMapper < T : Any >( type : KClass < T >) : Mapper < T > HashMapStore [jvm] Content class HashMapStore < T : Any , K : Any >( type : KClass < T >, key : KProperty1 < T , K >, name : String , store : HashMap < K , Map < String , Any >>, mapper : Mapper < T >) : Store < T , K >","title":"Types"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-mapper/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapMapper HashMapMapper \u00b6 [jvm] class HashMapMapper < T : Any >( type : KClass < T >) : Mapper < T > Functions \u00b6 Name Summary fromStore [jvm] Content open override fun fromStore (map: Map < String , Any >): T open override fun fromStore (property: String , value: Any ): Any toStore [jvm] Content open override fun toStore (instance: T ): Map < String , Any > open fun toStore (property: String , value: Any ): Any Properties \u00b6 Name Summary fields [jvm] open override val fields : Map < String , KProperty1 < T , *>>","title":"Index"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-mapper/#hashmapmapper","text":"[jvm] class HashMapMapper < T : Any >( type : KClass < T >) : Mapper < T >","title":"HashMapMapper"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-mapper/#functions","text":"Name Summary fromStore [jvm] Content open override fun fromStore (map: Map < String , Any >): T open override fun fromStore (property: String , value: Any ): Any toStore [jvm] Content open override fun toStore (instance: T ): Map < String , Any > open fun toStore (property: String , value: Any ): Any","title":"Functions"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-mapper/#properties","text":"Name Summary fields [jvm] open override val fields : Map < String , KProperty1 < T , *>>","title":"Properties"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-mapper/-hash-map-mapper/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapMapper / HashMapMapper HashMapMapper \u00b6 [jvm] Content fun < T : Any > HashMapMapper (type: KClass < T >)","title":" hash map mapper"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-mapper/-hash-map-mapper/#hashmapmapper","text":"[jvm] Content fun < T : Any > HashMapMapper (type: KClass < T >)","title":"HashMapMapper"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-mapper/fields/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapMapper / fields fields \u00b6 [jvm] Content open override val fields : Map < String , KProperty1 < T , *>>","title":"Fields"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-mapper/fields/#fields","text":"[jvm] Content open override val fields : Map < String , KProperty1 < T , *>>","title":"fields"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-mapper/from-store/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapMapper / fromStore fromStore \u00b6 [jvm] Content open override fun fromStore (map: Map < String , Any >): T open override fun fromStore (property: String , value: Any ): Any","title":"From store"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-mapper/from-store/#fromstore","text":"[jvm] Content open override fun fromStore (map: Map < String , Any >): T open override fun fromStore (property: String , value: Any ): Any","title":"fromStore"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-mapper/to-store/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapMapper / toStore toStore \u00b6 [jvm] Content open override fun toStore (instance: T ): Map < String , Any >","title":"To store"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-mapper/to-store/#tostore","text":"[jvm] Content open override fun toStore (instance: T ): Map < String , Any >","title":"toStore"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapStore HashMapStore \u00b6 [jvm] class HashMapStore < T : Any , K : Any >( type : KClass < T >, key : KProperty1 < T , K >, name : String , store : HashMap < K , Map < String , Any >>, mapper : Mapper < T >) : Store < T , K > Functions \u00b6 Name Summary count [jvm] Content open override fun count (filter: Map < String , *>): Long createIndex [jvm] Content open override fun createIndex (unique: Boolean , fields: Map < String , IndexOrder >): String open fun createIndex (unique: Boolean , vararg fields: Pair < KProperty1 < T , >, IndexOrder >): String open fun createIndex (unique: Boolean , vararg fields: KProperty1 < T , >): String deleteMany [jvm] Content open override fun deleteMany (filter: Map < String , *>): Long deleteOne [jvm] Content open override fun deleteOne (id: K ): Boolean drop [jvm] Content open override fun drop () fields [jvm] Content open fun fields (vararg updates: Pair < KProperty1 < T , >, >): Map < String , > open fun fields (updates: Map < KProperty1 < T , >, >): Map < String , > findAll [jvm] Content open fun findAll (limit: Int ? = null, skip: Int ? = null, sort: Map < String , Boolean > = emptyMap()): List < T > open fun findAll (fields: List < String >, limit: Int ? = null, skip: Int ? = null, sort: Map < String , Boolean > = emptyMap()): List < Map < String , *>> findMany [jvm] Content open override fun findMany (filter: Map < String , >, limit: Int ?, skip: Int ?, sort: Map < String , Boolean >): List < T > open override fun findMany (filter: Map < String , >, fields: List < String >, limit: Int ?, skip: Int ?, sort: Map < String , Boolean >): List < Map < String , *>> findOne [jvm] Content open override fun findOne (key: K ): T ? open fun findOne (filter: Map < String , >): T ? open override fun findOne (key: K , fields: List < String >): Map < String , >? open fun findOne (filter: Map < String , >, fields: List < String >): Map < String , >? import [jvm] Content open fun import (input: File ) open fun import (input: URL ) insertMany [jvm] Content open override fun insertMany (instances: List < T >): List < K > open fun insertMany (vararg instances: T ): List < K > insertOne [jvm] Content open override fun insertOne (instance: T ): K replaceMany [jvm] Content open override fun replaceMany (instances: List < T >): List < T > open fun replaceMany (vararg instances: T ): List < T > replaceOne [jvm] Content open override fun replaceOne (instance: T ): Boolean saveMany [jvm] Content open override fun saveMany (instances: List < T >): List < K ?> saveOne [jvm] Content open override fun saveOne (instance: T ): K ? updateMany [jvm] Content open override fun updateMany (filter: Map < String , >, updates: Map < String , >): Long updateOne [jvm] Content open override fun updateOne (key: K , updates: Map < String , >): Boolean open fun updateOne (key: K , vararg updates: Pair < KProperty1 < T , >, *>): Boolean Properties \u00b6 Name Summary key [jvm] open override val key : KProperty1 < T , K > mapper [jvm] open override val mapper : Mapper < T > name [jvm] open override val name : String type [jvm] open override val type : KClass < T >","title":"Index"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/#hashmapstore","text":"[jvm] class HashMapStore < T : Any , K : Any >( type : KClass < T >, key : KProperty1 < T , K >, name : String , store : HashMap < K , Map < String , Any >>, mapper : Mapper < T >) : Store < T , K >","title":"HashMapStore"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/#functions","text":"Name Summary count [jvm] Content open override fun count (filter: Map < String , *>): Long createIndex [jvm] Content open override fun createIndex (unique: Boolean , fields: Map < String , IndexOrder >): String open fun createIndex (unique: Boolean , vararg fields: Pair < KProperty1 < T , >, IndexOrder >): String open fun createIndex (unique: Boolean , vararg fields: KProperty1 < T , >): String deleteMany [jvm] Content open override fun deleteMany (filter: Map < String , *>): Long deleteOne [jvm] Content open override fun deleteOne (id: K ): Boolean drop [jvm] Content open override fun drop () fields [jvm] Content open fun fields (vararg updates: Pair < KProperty1 < T , >, >): Map < String , > open fun fields (updates: Map < KProperty1 < T , >, >): Map < String , > findAll [jvm] Content open fun findAll (limit: Int ? = null, skip: Int ? = null, sort: Map < String , Boolean > = emptyMap()): List < T > open fun findAll (fields: List < String >, limit: Int ? = null, skip: Int ? = null, sort: Map < String , Boolean > = emptyMap()): List < Map < String , *>> findMany [jvm] Content open override fun findMany (filter: Map < String , >, limit: Int ?, skip: Int ?, sort: Map < String , Boolean >): List < T > open override fun findMany (filter: Map < String , >, fields: List < String >, limit: Int ?, skip: Int ?, sort: Map < String , Boolean >): List < Map < String , *>> findOne [jvm] Content open override fun findOne (key: K ): T ? open fun findOne (filter: Map < String , >): T ? open override fun findOne (key: K , fields: List < String >): Map < String , >? open fun findOne (filter: Map < String , >, fields: List < String >): Map < String , >? import [jvm] Content open fun import (input: File ) open fun import (input: URL ) insertMany [jvm] Content open override fun insertMany (instances: List < T >): List < K > open fun insertMany (vararg instances: T ): List < K > insertOne [jvm] Content open override fun insertOne (instance: T ): K replaceMany [jvm] Content open override fun replaceMany (instances: List < T >): List < T > open fun replaceMany (vararg instances: T ): List < T > replaceOne [jvm] Content open override fun replaceOne (instance: T ): Boolean saveMany [jvm] Content open override fun saveMany (instances: List < T >): List < K ?> saveOne [jvm] Content open override fun saveOne (instance: T ): K ? updateMany [jvm] Content open override fun updateMany (filter: Map < String , >, updates: Map < String , >): Long updateOne [jvm] Content open override fun updateOne (key: K , updates: Map < String , >): Boolean open fun updateOne (key: K , vararg updates: Pair < KProperty1 < T , >, *>): Boolean","title":"Functions"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/#properties","text":"Name Summary key [jvm] open override val key : KProperty1 < T , K > mapper [jvm] open override val mapper : Mapper < T > name [jvm] open override val name : String type [jvm] open override val type : KClass < T >","title":"Properties"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/-hash-map-store/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapStore / HashMapStore HashMapStore \u00b6 [jvm] Content fun < T : Any , K : Any > HashMapStore (type: KClass < T >, key: KProperty1 < T , K >, name: String = type.java.simpleName, store: HashMap < K , Map < String , Any >> = hashMapOf(), mapper: Mapper < T > = HashMapMapper(type))","title":" hash map store"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/-hash-map-store/#hashmapstore","text":"[jvm] Content fun < T : Any , K : Any > HashMapStore (type: KClass < T >, key: KProperty1 < T , K >, name: String = type.java.simpleName, store: HashMap < K , Map < String , Any >> = hashMapOf(), mapper: Mapper < T > = HashMapMapper(type))","title":"HashMapStore"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/count/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapStore / count count \u00b6 [jvm] Content open override fun count (filter: Map < String , *>): Long","title":"Count"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/count/#count","text":"[jvm] Content open override fun count (filter: Map < String , *>): Long","title":"count"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/create-index/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapStore / createIndex createIndex \u00b6 [jvm] Content open override fun createIndex (unique: Boolean , fields: Map < String , IndexOrder >): String","title":"Create index"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/create-index/#createindex","text":"[jvm] Content open override fun createIndex (unique: Boolean , fields: Map < String , IndexOrder >): String","title":"createIndex"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/delete-many/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapStore / deleteMany deleteMany \u00b6 [jvm] Content open override fun deleteMany (filter: Map < String , *>): Long","title":"Delete many"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/delete-many/#deletemany","text":"[jvm] Content open override fun deleteMany (filter: Map < String , *>): Long","title":"deleteMany"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/delete-one/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapStore / deleteOne deleteOne \u00b6 [jvm] Content open override fun deleteOne (id: K ): Boolean","title":"Delete one"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/delete-one/#deleteone","text":"[jvm] Content open override fun deleteOne (id: K ): Boolean","title":"deleteOne"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/drop/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapStore / drop drop \u00b6 [jvm] Content open override fun drop ()","title":"Drop"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/drop/#drop","text":"[jvm] Content open override fun drop ()","title":"drop"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/find-many/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapStore / findMany findMany \u00b6 [jvm] Content open override fun findMany (filter: Map < String , >, limit: Int ?, skip: Int ?, sort: Map < String , Boolean >): List < T > open override fun findMany (filter: Map < String , >, fields: List < String >, limit: Int ?, skip: Int ?, sort: Map < String , Boolean >): List < Map < String , *>>","title":"Find many"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/find-many/#findmany","text":"[jvm] Content open override fun findMany (filter: Map < String , >, limit: Int ?, skip: Int ?, sort: Map < String , Boolean >): List < T > open override fun findMany (filter: Map < String , >, fields: List < String >, limit: Int ?, skip: Int ?, sort: Map < String , Boolean >): List < Map < String , *>>","title":"findMany"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/find-one/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapStore / findOne findOne \u00b6 [jvm] Content open override fun findOne (key: K ): T ? open override fun findOne (key: K , fields: List < String >): Map < String , *>?","title":"Find one"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/find-one/#findone","text":"[jvm] Content open override fun findOne (key: K ): T ? open override fun findOne (key: K , fields: List < String >): Map < String , *>?","title":"findOne"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/insert-many/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapStore / insertMany insertMany \u00b6 [jvm] Content open override fun insertMany (instances: List < T >): List < K >","title":"Insert many"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/insert-many/#insertmany","text":"[jvm] Content open override fun insertMany (instances: List < T >): List < K >","title":"insertMany"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/insert-one/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapStore / insertOne insertOne \u00b6 [jvm] Content open override fun insertOne (instance: T ): K","title":"Insert one"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/insert-one/#insertone","text":"[jvm] Content open override fun insertOne (instance: T ): K","title":"insertOne"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/key/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapStore / key key \u00b6 [jvm] Content open override val key : KProperty1 < T , K >","title":"Key"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/key/#key","text":"[jvm] Content open override val key : KProperty1 < T , K >","title":"key"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/mapper/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapStore / mapper mapper \u00b6 [jvm] Content open override val mapper : Mapper < T >","title":"Mapper"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/mapper/#mapper","text":"[jvm] Content open override val mapper : Mapper < T >","title":"mapper"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/name/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapStore / name name \u00b6 [jvm] Content open override val name : String","title":"Name"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/name/#name","text":"[jvm] Content open override val name : String","title":"name"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/replace-many/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapStore / replaceMany replaceMany \u00b6 [jvm] Content open override fun replaceMany (instances: List < T >): List < T >","title":"Replace many"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/replace-many/#replacemany","text":"[jvm] Content open override fun replaceMany (instances: List < T >): List < T >","title":"replaceMany"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/replace-one/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapStore / replaceOne replaceOne \u00b6 [jvm] Content open override fun replaceOne (instance: T ): Boolean","title":"Replace one"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/replace-one/#replaceone","text":"[jvm] Content open override fun replaceOne (instance: T ): Boolean","title":"replaceOne"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/save-many/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapStore / saveMany saveMany \u00b6 [jvm] Content open override fun saveMany (instances: List < T >): List < K ?>","title":"Save many"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/save-many/#savemany","text":"[jvm] Content open override fun saveMany (instances: List < T >): List < K ?>","title":"saveMany"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/save-one/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapStore / saveOne saveOne \u00b6 [jvm] Content open override fun saveOne (instance: T ): K ?","title":"Save one"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/save-one/#saveone","text":"[jvm] Content open override fun saveOne (instance: T ): K ?","title":"saveOne"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/type/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapStore / type type \u00b6 [jvm] Content open override val type : KClass < T >","title":"Type"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/type/#type","text":"[jvm] Content open override val type : KClass < T >","title":"type"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/update-many/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapStore / updateMany updateMany \u00b6 [jvm] Content open override fun updateMany (filter: Map < String , >, updates: Map < String , >): Long","title":"Update many"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/update-many/#updatemany","text":"[jvm] Content open override fun updateMany (filter: Map < String , >, updates: Map < String , >): Long","title":"updateMany"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/update-one/","text":"// port_store / com.hexagonkt.store.hashmap / HashMapStore / updateOne updateOne \u00b6 [jvm] Content open override fun updateOne (key: K , updates: Map < String , *>): Boolean","title":"Update one"},{"location":"port_store/com.hexagonkt.store.hashmap/-hash-map-store/update-one/#updateone","text":"[jvm] Content open override fun updateOne (key: K , updates: Map < String , *>): Boolean","title":"updateOne"},{"location":"port_templates/","text":"// port_templates port_templates \u00b6 [jvm] This port provides a common interface for rendering templates with multiple different template engines. Install the Dependency \u00b6 This module is not meant to be used directly. You should include any Adapter implementing this feature (as /templates_pebble and/or /templates_freemarker) in order to process templates. You can use many adapters in the same application to be able to handle different template engines at the same time. Packages \u00b6 Name com.hexagonkt.templates","title":"Templates"},{"location":"port_templates/#port_templates","text":"[jvm] This port provides a common interface for rendering templates with multiple different template engines.","title":"port_templates"},{"location":"port_templates/#install-the-dependency","text":"This module is not meant to be used directly. You should include any Adapter implementing this feature (as /templates_pebble and/or /templates_freemarker) in order to process templates. You can use many adapters in the same application to be able to handle different template engines at the same time.","title":"Install the Dependency"},{"location":"port_templates/#packages","text":"Name com.hexagonkt.templates","title":"Packages"},{"location":"port_templates/port_templates/","text":"Module port_templates \u00b6 This port provides a common interface for rendering templates with multiple different template engines. Install the Dependency \u00b6 This module is not meant to be used directly. You should include any Adapter implementing this feature (as templates_pebble and/or templates_freemarker ) in order to process templates. You can use many adapters in the same application to be able to handle different template engines at the same time. Package com.hexagonkt.templates \u00b6 Create a Template Engine \u00b6 You can create a template engine with default settings as follows: 1 2 3 4 5 // Adapter injected TemplateEngine () // Adapter provided explicitly TemplateEngine ( adapter ) Settings \u00b6 Template engines can be configured: 1 2 3 4 5 6 7 8 9 val loader : ( resource : String ) -> Reader? = { StringReader ( \"<html>...</html>\" ) } TemplateEngine ( adapter , TemplateEngineSettings ( loader = loader , // Loader for templates basePath = \"templates\" , // Appended to resource name, i. e. \"templates/resource\" loadContext = true , // Enables context loading ) ) Usage \u00b6 To render a template, do something like this: 1 2 3 val context = mapOf ( \"key1\" to \"value1\" , \"key2\" to \"value2\" ) val locale = Locale . getDefault () val rendered = engine . render ( \"resource\" , locale , context ) Using multiple template engines \u00b6 To make the use of multiple template engines more convenient, you can use the TemplateManager. Just register multiple template engines (or the same engine with different configurations) under a prefix and use it like follows: 1 2 3 4 5 TemplateManager . register ( \"html\" , TemplateEngine ( htmlTemplateAdapter )) TemplateManager . register ( \"plain\" , TemplateEngine ( plainTextTemplateAdapter )) val html = TemplateManager . render ( \"html:template.html\" , locale , context ) val plain = TemplateManager . render ( \"plain:template.txt\" , locale , context )","title":"Module port_templates"},{"location":"port_templates/port_templates/#module-port_templates","text":"This port provides a common interface for rendering templates with multiple different template engines.","title":"Module port_templates"},{"location":"port_templates/port_templates/#install-the-dependency","text":"This module is not meant to be used directly. You should include any Adapter implementing this feature (as templates_pebble and/or templates_freemarker ) in order to process templates. You can use many adapters in the same application to be able to handle different template engines at the same time.","title":"Install the Dependency"},{"location":"port_templates/port_templates/#package-comhexagonkttemplates","text":"","title":"Package com.hexagonkt.templates"},{"location":"port_templates/port_templates/#create-a-template-engine","text":"You can create a template engine with default settings as follows: 1 2 3 4 5 // Adapter injected TemplateEngine () // Adapter provided explicitly TemplateEngine ( adapter )","title":"Create a Template Engine"},{"location":"port_templates/port_templates/#settings","text":"Template engines can be configured: 1 2 3 4 5 6 7 8 9 val loader : ( resource : String ) -> Reader? = { StringReader ( \"<html>...</html>\" ) } TemplateEngine ( adapter , TemplateEngineSettings ( loader = loader , // Loader for templates basePath = \"templates\" , // Appended to resource name, i. e. \"templates/resource\" loadContext = true , // Enables context loading ) )","title":"Settings"},{"location":"port_templates/port_templates/#usage","text":"To render a template, do something like this: 1 2 3 val context = mapOf ( \"key1\" to \"value1\" , \"key2\" to \"value2\" ) val locale = Locale . getDefault () val rendered = engine . render ( \"resource\" , locale , context )","title":"Usage"},{"location":"port_templates/port_templates/#using-multiple-template-engines","text":"To make the use of multiple template engines more convenient, you can use the TemplateManager. Just register multiple template engines (or the same engine with different configurations) under a prefix and use it like follows: 1 2 3 4 5 TemplateManager . register ( \"html\" , TemplateEngine ( htmlTemplateAdapter )) TemplateManager . register ( \"plain\" , TemplateEngine ( plainTextTemplateAdapter )) val html = TemplateManager . render ( \"html:template.html\" , locale , context ) val plain = TemplateManager . render ( \"plain:template.txt\" , locale , context )","title":"Using multiple template engines"},{"location":"port_templates/com.hexagonkt.templates/","text":"// port_templates / com.hexagonkt.templates Package com.hexagonkt.templates \u00b6 [jvm] Create a Template Engine \u00b6 You can create a template engine with default settings as follows: Types \u00b6 Name Summary TemplateEngine [jvm] Content class TemplateEngine ( adapter : TemplatePort , settings : TemplateEngineSettings ) More info A TemplateEngine can be used to render templates TemplateEngineSettings [jvm] Content data class TemplateEngineSettings ( loader : (resource: String ) -> Reader ??, loadContext : Boolean , basePath : String ?) More info TemplateEngineSettings are used to configure a TemplateEngine TemplateManager [jvm] Content object TemplateManager More info The TemplateManager handles multiple templates engines. TemplatePort [jvm] Content interface TemplatePort More info TODO Add code to test templates (check unresolved variables in bundles, multi-language, etc.","title":"Index"},{"location":"port_templates/com.hexagonkt.templates/#package-comhexagonkttemplates","text":"[jvm]","title":"Package com.hexagonkt.templates"},{"location":"port_templates/com.hexagonkt.templates/#create-a-template-engine","text":"You can create a template engine with default settings as follows:","title":"Create a Template Engine"},{"location":"port_templates/com.hexagonkt.templates/#types","text":"Name Summary TemplateEngine [jvm] Content class TemplateEngine ( adapter : TemplatePort , settings : TemplateEngineSettings ) More info A TemplateEngine can be used to render templates TemplateEngineSettings [jvm] Content data class TemplateEngineSettings ( loader : (resource: String ) -> Reader ??, loadContext : Boolean , basePath : String ?) More info TemplateEngineSettings are used to configure a TemplateEngine TemplateManager [jvm] Content object TemplateManager More info The TemplateManager handles multiple templates engines. TemplatePort [jvm] Content interface TemplatePort More info TODO Add code to test templates (check unresolved variables in bundles, multi-language, etc.","title":"Types"},{"location":"port_templates/com.hexagonkt.templates/-template-engine/","text":"// port_templates / com.hexagonkt.templates / TemplateEngine TemplateEngine \u00b6 [jvm] class TemplateEngine ( adapter : TemplatePort , settings : TemplateEngineSettings ) A TemplateEngine can be used to render templates Constructors \u00b6 TemplateEngine [jvm] fun TemplateEngine (settings: TemplateEngineSettings = TemplateEngineSettings()) TemplateEngine [jvm] fun TemplateEngine (adapter: TemplatePort = InjectionManager.inject(), settings: TemplateEngineSettings = TemplateEngineSettings()) Functions \u00b6 Name Summary render [jvm] Content fun render (resource: String , locale: Locale , vararg context: Pair < String , >): String fun render (resource: String , locale: Locale , context: Map < String , >): String","title":"Index"},{"location":"port_templates/com.hexagonkt.templates/-template-engine/#templateengine","text":"[jvm] class TemplateEngine ( adapter : TemplatePort , settings : TemplateEngineSettings ) A TemplateEngine can be used to render templates","title":"TemplateEngine"},{"location":"port_templates/com.hexagonkt.templates/-template-engine/#constructors","text":"TemplateEngine [jvm] fun TemplateEngine (settings: TemplateEngineSettings = TemplateEngineSettings()) TemplateEngine [jvm] fun TemplateEngine (adapter: TemplatePort = InjectionManager.inject(), settings: TemplateEngineSettings = TemplateEngineSettings())","title":"Constructors"},{"location":"port_templates/com.hexagonkt.templates/-template-engine/#functions","text":"Name Summary render [jvm] Content fun render (resource: String , locale: Locale , vararg context: Pair < String , >): String fun render (resource: String , locale: Locale , context: Map < String , >): String","title":"Functions"},{"location":"port_templates/com.hexagonkt.templates/-template-engine/-template-engine/","text":"// port_templates / com.hexagonkt.templates / TemplateEngine / TemplateEngine TemplateEngine \u00b6 [jvm] Content fun TemplateEngine (settings: TemplateEngineSettings = TemplateEngineSettings()) fun TemplateEngine (adapter: TemplatePort = InjectionManager.inject(), settings: TemplateEngineSettings = TemplateEngineSettings())","title":" template engine"},{"location":"port_templates/com.hexagonkt.templates/-template-engine/-template-engine/#templateengine","text":"[jvm] Content fun TemplateEngine (settings: TemplateEngineSettings = TemplateEngineSettings()) fun TemplateEngine (adapter: TemplatePort = InjectionManager.inject(), settings: TemplateEngineSettings = TemplateEngineSettings())","title":"TemplateEngine"},{"location":"port_templates/com.hexagonkt.templates/-template-engine/render/","text":"// port_templates / com.hexagonkt.templates / TemplateEngine / render render \u00b6 [jvm] Content fun render (resource: String , locale: Locale , context: Map < String , >): String fun render (resource: String , locale: Locale , vararg context: Pair < String , >): String","title":"Render"},{"location":"port_templates/com.hexagonkt.templates/-template-engine/render/#render","text":"[jvm] Content fun render (resource: String , locale: Locale , context: Map < String , >): String fun render (resource: String , locale: Locale , vararg context: Pair < String , >): String","title":"render"},{"location":"port_templates/com.hexagonkt.templates/-template-engine-settings/","text":"// port_templates / com.hexagonkt.templates / TemplateEngineSettings TemplateEngineSettings \u00b6 [jvm] data class TemplateEngineSettings ( loader : (resource: String ) -> Reader ??, loadContext : Boolean , basePath : String ?) TemplateEngineSettings are used to configure a TemplateEngine Parameters \u00b6 jvm loader loads templates loadContext if enabled, properties are loaded from the classpath basePath appended to resource name, i. e. \"templates/resource\" Constructors \u00b6 TemplateEngineSettings [jvm] fun TemplateEngineSettings (loader: (resource: String ) -> Reader ?? = null, loadContext: Boolean = true, basePath: String ? = null)loads templates Properties \u00b6 Name Summary basePath [jvm] val basePath : String ? = nullappended to resource name, i. loadContext [jvm] val loadContext : Boolean = trueif enabled, properties are loaded from the classpath loader [jvm] val loader : (resource: String ) -> Reader ?? = nullloads templates","title":"Index"},{"location":"port_templates/com.hexagonkt.templates/-template-engine-settings/#templateenginesettings","text":"[jvm] data class TemplateEngineSettings ( loader : (resource: String ) -> Reader ??, loadContext : Boolean , basePath : String ?) TemplateEngineSettings are used to configure a TemplateEngine","title":"TemplateEngineSettings"},{"location":"port_templates/com.hexagonkt.templates/-template-engine-settings/#parameters","text":"jvm loader loads templates loadContext if enabled, properties are loaded from the classpath basePath appended to resource name, i. e. \"templates/resource\"","title":"Parameters"},{"location":"port_templates/com.hexagonkt.templates/-template-engine-settings/#constructors","text":"TemplateEngineSettings [jvm] fun TemplateEngineSettings (loader: (resource: String ) -> Reader ?? = null, loadContext: Boolean = true, basePath: String ? = null)loads templates","title":"Constructors"},{"location":"port_templates/com.hexagonkt.templates/-template-engine-settings/#properties","text":"Name Summary basePath [jvm] val basePath : String ? = nullappended to resource name, i. loadContext [jvm] val loadContext : Boolean = trueif enabled, properties are loaded from the classpath loader [jvm] val loader : (resource: String ) -> Reader ?? = nullloads templates","title":"Properties"},{"location":"port_templates/com.hexagonkt.templates/-template-engine-settings/-template-engine-settings/","text":"// port_templates / com.hexagonkt.templates / TemplateEngineSettings / TemplateEngineSettings TemplateEngineSettings \u00b6 [jvm] Content fun TemplateEngineSettings (loader: (resource: String ) -> Reader ?? = null, loadContext: Boolean = true, basePath: String ? = null) More info Parameters \u00b6 jvm loader loads templates loadContext if enabled, properties are loaded from the classpath basePath appended to resource name, i. e. \"templates/resource\"","title":" template engine settings"},{"location":"port_templates/com.hexagonkt.templates/-template-engine-settings/-template-engine-settings/#templateenginesettings","text":"[jvm] Content fun TemplateEngineSettings (loader: (resource: String ) -> Reader ?? = null, loadContext: Boolean = true, basePath: String ? = null) More info","title":"TemplateEngineSettings"},{"location":"port_templates/com.hexagonkt.templates/-template-engine-settings/-template-engine-settings/#parameters","text":"jvm loader loads templates loadContext if enabled, properties are loaded from the classpath basePath appended to resource name, i. e. \"templates/resource\"","title":"Parameters"},{"location":"port_templates/com.hexagonkt.templates/-template-engine-settings/base-path/","text":"// port_templates / com.hexagonkt.templates / TemplateEngineSettings / basePath basePath \u00b6 [jvm] Content val basePath : String ? = null More info Parameters \u00b6 jvm basePath appended to resource name, i. e. \"templates/resource\"","title":"Base path"},{"location":"port_templates/com.hexagonkt.templates/-template-engine-settings/base-path/#basepath","text":"[jvm] Content val basePath : String ? = null More info","title":"basePath"},{"location":"port_templates/com.hexagonkt.templates/-template-engine-settings/base-path/#parameters","text":"jvm basePath appended to resource name, i. e. \"templates/resource\"","title":"Parameters"},{"location":"port_templates/com.hexagonkt.templates/-template-engine-settings/load-context/","text":"// port_templates / com.hexagonkt.templates / TemplateEngineSettings / loadContext loadContext \u00b6 [jvm] Content val loadContext : Boolean = true More info Parameters \u00b6 jvm loadContext if enabled, properties are loaded from the classpath","title":"Load context"},{"location":"port_templates/com.hexagonkt.templates/-template-engine-settings/load-context/#loadcontext","text":"[jvm] Content val loadContext : Boolean = true More info","title":"loadContext"},{"location":"port_templates/com.hexagonkt.templates/-template-engine-settings/load-context/#parameters","text":"jvm loadContext if enabled, properties are loaded from the classpath","title":"Parameters"},{"location":"port_templates/com.hexagonkt.templates/-template-engine-settings/loader/","text":"// port_templates / com.hexagonkt.templates / TemplateEngineSettings / loader loader \u00b6 [jvm] Content val loader : (resource: String ) -> Reader ?? = null More info Parameters \u00b6 jvm loader loads templates","title":"Loader"},{"location":"port_templates/com.hexagonkt.templates/-template-engine-settings/loader/#loader","text":"[jvm] Content val loader : (resource: String ) -> Reader ?? = null More info","title":"loader"},{"location":"port_templates/com.hexagonkt.templates/-template-engine-settings/loader/#parameters","text":"jvm loader loads templates","title":"Parameters"},{"location":"port_templates/com.hexagonkt.templates/-template-manager/","text":"// port_templates / com.hexagonkt.templates / TemplateManager TemplateManager \u00b6 [jvm] object TemplateManager The TemplateManager handles multiple templates engines. Functions \u00b6 Name Summary register [jvm] Content fun register (prefix: String , engine: TemplateEngine ) More info Register a template engine under a prefix. render [jvm] Content fun render (prefixedResource: String , locale: Locale , context: Map < String , *>): String More info Render a template with a registered template engine.","title":"Index"},{"location":"port_templates/com.hexagonkt.templates/-template-manager/#templatemanager","text":"[jvm] object TemplateManager The TemplateManager handles multiple templates engines.","title":"TemplateManager"},{"location":"port_templates/com.hexagonkt.templates/-template-manager/#functions","text":"Name Summary register [jvm] Content fun register (prefix: String , engine: TemplateEngine ) More info Register a template engine under a prefix. render [jvm] Content fun render (prefixedResource: String , locale: Locale , context: Map < String , *>): String More info Render a template with a registered template engine.","title":"Functions"},{"location":"port_templates/com.hexagonkt.templates/-template-manager/register/","text":"// port_templates / com.hexagonkt.templates / TemplateManager / register register \u00b6 [jvm] Content fun register (prefix: String , engine: TemplateEngine ) More info Register a template engine under a prefix.","title":"Register"},{"location":"port_templates/com.hexagonkt.templates/-template-manager/register/#register","text":"[jvm] Content fun register (prefix: String , engine: TemplateEngine ) More info Register a template engine under a prefix.","title":"register"},{"location":"port_templates/com.hexagonkt.templates/-template-manager/render/","text":"// port_templates / com.hexagonkt.templates / TemplateManager / render render \u00b6 [jvm] Content fun render (prefixedResource: String , locale: Locale , context: Map < String , *>): String More info Render a template with a registered template engine. Parameters \u00b6 jvm prefixedResource selects engine and template, i.e. \"html:template.html\" uses the engine registered under prefix \"html\" to render the template \"template.html\" Throws \u00b6 kotlin.IllegalArgumentException if no engine for prefix was found","title":"Render"},{"location":"port_templates/com.hexagonkt.templates/-template-manager/render/#render","text":"[jvm] Content fun render (prefixedResource: String , locale: Locale , context: Map < String , *>): String More info Render a template with a registered template engine.","title":"render"},{"location":"port_templates/com.hexagonkt.templates/-template-manager/render/#parameters","text":"jvm prefixedResource selects engine and template, i.e. \"html:template.html\" uses the engine registered under prefix \"html\" to render the template \"template.html\"","title":"Parameters"},{"location":"port_templates/com.hexagonkt.templates/-template-manager/render/#throws","text":"kotlin.IllegalArgumentException if no engine for prefix was found","title":"Throws"},{"location":"port_templates/com.hexagonkt.templates/-template-port/","text":"// port_templates / com.hexagonkt.templates / TemplatePort TemplatePort \u00b6 [jvm] interface TemplatePort TODO Add code to test templates (check unresolved variables in bundles, multi-language, etc.) Functions \u00b6 Name Summary render [jvm] Content open fun render (resource: String , locale: Locale , vararg context: Pair < String , >): String open fun render (resource: String , locale: Locale , context: Map < String , >): String abstract fun render (resource: String , locale: Locale , context: Map < String , *>, settings: TemplateEngineSettings ): String","title":"Index"},{"location":"port_templates/com.hexagonkt.templates/-template-port/#templateport","text":"[jvm] interface TemplatePort TODO Add code to test templates (check unresolved variables in bundles, multi-language, etc.)","title":"TemplatePort"},{"location":"port_templates/com.hexagonkt.templates/-template-port/#functions","text":"Name Summary render [jvm] Content open fun render (resource: String , locale: Locale , vararg context: Pair < String , >): String open fun render (resource: String , locale: Locale , context: Map < String , >): String abstract fun render (resource: String , locale: Locale , context: Map < String , *>, settings: TemplateEngineSettings ): String","title":"Functions"},{"location":"port_templates/com.hexagonkt.templates/-template-port/render/","text":"// port_templates / com.hexagonkt.templates / TemplatePort / render render \u00b6 [jvm] Content open fun render (resource: String , locale: Locale , context: Map < String , >): String open fun render (resource: String , locale: Locale , vararg context: Pair < String , >): String abstract fun render (resource: String , locale: Locale , context: Map < String , *>, settings: TemplateEngineSettings ): String","title":"Render"},{"location":"port_templates/com.hexagonkt.templates/-template-port/render/#render","text":"[jvm] Content open fun render (resource: String , locale: Locale , context: Map < String , >): String open fun render (resource: String , locale: Locale , vararg context: Pair < String , >): String abstract fun render (resource: String , locale: Locale , context: Map < String , *>, settings: TemplateEngineSettings ): String","title":"render"},{"location":"serialization_csv/","text":"// serialization_csv serialization_csv \u00b6 Packages \u00b6 Name com.hexagonkt.serialization","title":"Index"},{"location":"serialization_csv/#serialization_csv","text":"","title":"serialization_csv"},{"location":"serialization_csv/#packages","text":"Name com.hexagonkt.serialization","title":"Packages"},{"location":"serialization_csv/com.hexagonkt.serialization/","text":"// serialization_csv / com.hexagonkt.serialization Package com.hexagonkt.serialization \u00b6 Types \u00b6 Name Summary Csv [jvm] Content object Csv : SerializationFormat","title":"Index"},{"location":"serialization_csv/com.hexagonkt.serialization/#package-comhexagonktserialization","text":"","title":"Package com.hexagonkt.serialization"},{"location":"serialization_csv/com.hexagonkt.serialization/#types","text":"Name Summary Csv [jvm] Content object Csv : SerializationFormat","title":"Types"},{"location":"serialization_csv/com.hexagonkt.serialization/-csv/","text":"// serialization_csv / com.hexagonkt.serialization / Csv Csv \u00b6 [jvm] object Csv : SerializationFormat Functions \u00b6 Name Summary parse [jvm] Content open override fun < T : Any > parse (input: InputStream , type: KClass < T >): T parseObjects [jvm] Content open override fun < T : Any > parseObjects (input: InputStream , type: KClass < T >): List < T > serialize [jvm] Content open fun serialize (obj: Any ): String open override fun serialize (obj: Any , output: OutputStream ) Properties \u00b6 Name Summary contentType [jvm] open override val contentType : String extensions [jvm] open override val extensions : Set < String > isBinary [jvm] open override val isBinary : Boolean = false","title":"Index"},{"location":"serialization_csv/com.hexagonkt.serialization/-csv/#csv","text":"[jvm] object Csv : SerializationFormat","title":"Csv"},{"location":"serialization_csv/com.hexagonkt.serialization/-csv/#functions","text":"Name Summary parse [jvm] Content open override fun < T : Any > parse (input: InputStream , type: KClass < T >): T parseObjects [jvm] Content open override fun < T : Any > parseObjects (input: InputStream , type: KClass < T >): List < T > serialize [jvm] Content open fun serialize (obj: Any ): String open override fun serialize (obj: Any , output: OutputStream )","title":"Functions"},{"location":"serialization_csv/com.hexagonkt.serialization/-csv/#properties","text":"Name Summary contentType [jvm] open override val contentType : String extensions [jvm] open override val extensions : Set < String > isBinary [jvm] open override val isBinary : Boolean = false","title":"Properties"},{"location":"serialization_csv/com.hexagonkt.serialization/-csv/content-type/","text":"// serialization_csv / com.hexagonkt.serialization / Csv / contentType contentType \u00b6 [jvm] Content open override val contentType : String","title":"Content type"},{"location":"serialization_csv/com.hexagonkt.serialization/-csv/content-type/#contenttype","text":"[jvm] Content open override val contentType : String","title":"contentType"},{"location":"serialization_csv/com.hexagonkt.serialization/-csv/extensions/","text":"// serialization_csv / com.hexagonkt.serialization / Csv / extensions extensions \u00b6 [jvm] Content open override val extensions : Set < String >","title":"Extensions"},{"location":"serialization_csv/com.hexagonkt.serialization/-csv/extensions/#extensions","text":"[jvm] Content open override val extensions : Set < String >","title":"extensions"},{"location":"serialization_csv/com.hexagonkt.serialization/-csv/is-binary/","text":"// serialization_csv / com.hexagonkt.serialization / Csv / isBinary isBinary \u00b6 [jvm] Content open override val isBinary : Boolean = false","title":"Is binary"},{"location":"serialization_csv/com.hexagonkt.serialization/-csv/is-binary/#isbinary","text":"[jvm] Content open override val isBinary : Boolean = false","title":"isBinary"},{"location":"serialization_csv/com.hexagonkt.serialization/-csv/parse-objects/","text":"// serialization_csv / com.hexagonkt.serialization / Csv / parseObjects parseObjects \u00b6 [jvm] Content open override fun < T : Any > parseObjects (input: InputStream , type: KClass < T >): List < T >","title":"Parse objects"},{"location":"serialization_csv/com.hexagonkt.serialization/-csv/parse-objects/#parseobjects","text":"[jvm] Content open override fun < T : Any > parseObjects (input: InputStream , type: KClass < T >): List < T >","title":"parseObjects"},{"location":"serialization_csv/com.hexagonkt.serialization/-csv/parse/","text":"// serialization_csv / com.hexagonkt.serialization / Csv / parse parse \u00b6 [jvm] Content open override fun < T : Any > parse (input: InputStream , type: KClass < T >): T","title":"Parse"},{"location":"serialization_csv/com.hexagonkt.serialization/-csv/parse/#parse","text":"[jvm] Content open override fun < T : Any > parse (input: InputStream , type: KClass < T >): T","title":"parse"},{"location":"serialization_csv/com.hexagonkt.serialization/-csv/serialize/","text":"// serialization_csv / com.hexagonkt.serialization / Csv / serialize serialize \u00b6 [jvm] Content open override fun serialize (obj: Any , output: OutputStream )","title":"Serialize"},{"location":"serialization_csv/com.hexagonkt.serialization/-csv/serialize/#serialize","text":"[jvm] Content open override fun serialize (obj: Any , output: OutputStream )","title":"serialize"},{"location":"serialization_json/","text":"// serialization_json serialization_json \u00b6 Packages \u00b6 Name com.hexagonkt.serialization","title":"Index"},{"location":"serialization_json/#serialization_json","text":"","title":"serialization_json"},{"location":"serialization_json/#packages","text":"Name com.hexagonkt.serialization","title":"Packages"},{"location":"serialization_json/com.hexagonkt.serialization/","text":"// serialization_json / com.hexagonkt.serialization Package com.hexagonkt.serialization \u00b6 Types \u00b6 Name Summary JacksonHelper [jvm] Content object JacksonHelper JacksonMapper [jvm] Content object JacksonMapper : Mapper JacksonTextFormat [jvm] Content open class JacksonTextFormat ( extensions : LinkedHashSet < String >, factoryGenerator : () -> JsonFactory?) : SerializationFormat Json [jvm] Content object Json : SerializationFormat","title":"Index"},{"location":"serialization_json/com.hexagonkt.serialization/#package-comhexagonktserialization","text":"","title":"Package com.hexagonkt.serialization"},{"location":"serialization_json/com.hexagonkt.serialization/#types","text":"Name Summary JacksonHelper [jvm] Content object JacksonHelper JacksonMapper [jvm] Content object JacksonMapper : Mapper JacksonTextFormat [jvm] Content open class JacksonTextFormat ( extensions : LinkedHashSet < String >, factoryGenerator : () -> JsonFactory?) : SerializationFormat Json [jvm] Content object Json : SerializationFormat","title":"Types"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-helper/","text":"// serialization_json / com.hexagonkt.serialization / JacksonHelper JacksonHelper \u00b6 [jvm] object JacksonHelper Functions \u00b6 Name Summary createObjectMapper [jvm] Content fun createObjectMapper (mapperFactory: JsonFactory = MappingJsonFactory()): ObjectMapper parseException [jvm] Content fun parseException (e: Exception ?): ParseException setupObjectMapper [jvm] Content fun setupObjectMapper (objectMapper: ObjectMapper): ObjectMapper Properties \u00b6 Name Summary mapper [jvm] val mapper : ObjectMapper","title":"Index"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-helper/#jacksonhelper","text":"[jvm] object JacksonHelper","title":"JacksonHelper"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-helper/#functions","text":"Name Summary createObjectMapper [jvm] Content fun createObjectMapper (mapperFactory: JsonFactory = MappingJsonFactory()): ObjectMapper parseException [jvm] Content fun parseException (e: Exception ?): ParseException setupObjectMapper [jvm] Content fun setupObjectMapper (objectMapper: ObjectMapper): ObjectMapper","title":"Functions"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-helper/#properties","text":"Name Summary mapper [jvm] val mapper : ObjectMapper","title":"Properties"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-helper/create-object-mapper/","text":"// serialization_json / com.hexagonkt.serialization / JacksonHelper / createObjectMapper createObjectMapper \u00b6 [jvm] Content fun createObjectMapper (mapperFactory: JsonFactory = MappingJsonFactory()): ObjectMapper","title":"Create object mapper"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-helper/create-object-mapper/#createobjectmapper","text":"[jvm] Content fun createObjectMapper (mapperFactory: JsonFactory = MappingJsonFactory()): ObjectMapper","title":"createObjectMapper"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-helper/mapper/","text":"// serialization_json / com.hexagonkt.serialization / JacksonHelper / mapper mapper \u00b6 [jvm] Content val mapper : ObjectMapper","title":"Mapper"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-helper/mapper/#mapper","text":"[jvm] Content val mapper : ObjectMapper","title":"mapper"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-helper/parse-exception/","text":"// serialization_json / com.hexagonkt.serialization / JacksonHelper / parseException parseException \u00b6 [jvm] Content fun parseException (e: Exception ?): ParseException","title":"Parse exception"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-helper/parse-exception/#parseexception","text":"[jvm] Content fun parseException (e: Exception ?): ParseException","title":"parseException"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-helper/setup-object-mapper/","text":"// serialization_json / com.hexagonkt.serialization / JacksonHelper / setupObjectMapper setupObjectMapper \u00b6 [jvm] Content fun setupObjectMapper (objectMapper: ObjectMapper): ObjectMapper","title":"Setup object mapper"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-helper/setup-object-mapper/#setupobjectmapper","text":"[jvm] Content fun setupObjectMapper (objectMapper: ObjectMapper): ObjectMapper","title":"setupObjectMapper"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-mapper/","text":"// serialization_json / com.hexagonkt.serialization / JacksonMapper JacksonMapper \u00b6 [jvm] object JacksonMapper : Mapper Functions \u00b6 Name Summary convertToMap [jvm] Content open override fun convertToMap (instance: Any ): Map < , > convertToObject [jvm] Content open override fun < T : Any > convertToObject (map: Map < , >, type: KClass < T >): T","title":"Index"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-mapper/#jacksonmapper","text":"[jvm] object JacksonMapper : Mapper","title":"JacksonMapper"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-mapper/#functions","text":"Name Summary convertToMap [jvm] Content open override fun convertToMap (instance: Any ): Map < , > convertToObject [jvm] Content open override fun < T : Any > convertToObject (map: Map < , >, type: KClass < T >): T","title":"Functions"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-mapper/convert-to-map/","text":"// serialization_json / com.hexagonkt.serialization / JacksonMapper / convertToMap convertToMap \u00b6 [jvm] Content open override fun convertToMap (instance: Any ): Map < , >","title":"Convert to map"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-mapper/convert-to-map/#converttomap","text":"[jvm] Content open override fun convertToMap (instance: Any ): Map < , >","title":"convertToMap"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-mapper/convert-to-object/","text":"// serialization_json / com.hexagonkt.serialization / JacksonMapper / convertToObject convertToObject \u00b6 [jvm] Content open override fun < T : Any > convertToObject (map: Map < , >, type: KClass < T >): T","title":"Convert to object"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-mapper/convert-to-object/#converttoobject","text":"[jvm] Content open override fun < T : Any > convertToObject (map: Map < , >, type: KClass < T >): T","title":"convertToObject"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-text-format/","text":"// serialization_json / com.hexagonkt.serialization / JacksonTextFormat JacksonTextFormat \u00b6 [jvm] open class JacksonTextFormat ( extensions : LinkedHashSet < String >, factoryGenerator : () -> JsonFactory?) : SerializationFormat Functions \u00b6 Name Summary parse [jvm] Content open override fun < T : Any > parse (input: InputStream , type: KClass < T >): T parseObjects [jvm] Content open override fun < T : Any > parseObjects (input: InputStream , type: KClass < T >): List < T > serialize [jvm] Content open override fun serialize (obj: Any ): String open override fun serialize (obj: Any , output: OutputStream ) Properties \u00b6 Name Summary contentType [jvm] open override val contentType : String extensions [jvm] override val extensions : LinkedHashSet < String > isBinary [jvm] open override val isBinary : Boolean = false","title":"Index"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-text-format/#jacksontextformat","text":"[jvm] open class JacksonTextFormat ( extensions : LinkedHashSet < String >, factoryGenerator : () -> JsonFactory?) : SerializationFormat","title":"JacksonTextFormat"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-text-format/#functions","text":"Name Summary parse [jvm] Content open override fun < T : Any > parse (input: InputStream , type: KClass < T >): T parseObjects [jvm] Content open override fun < T : Any > parseObjects (input: InputStream , type: KClass < T >): List < T > serialize [jvm] Content open override fun serialize (obj: Any ): String open override fun serialize (obj: Any , output: OutputStream )","title":"Functions"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-text-format/#properties","text":"Name Summary contentType [jvm] open override val contentType : String extensions [jvm] override val extensions : LinkedHashSet < String > isBinary [jvm] open override val isBinary : Boolean = false","title":"Properties"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-text-format/-jackson-text-format/","text":"// serialization_json / com.hexagonkt.serialization / JacksonTextFormat / JacksonTextFormat JacksonTextFormat \u00b6 [jvm] Content fun JacksonTextFormat (extensions: LinkedHashSet < String >, factoryGenerator: () -> JsonFactory? = null)","title":" jackson text format"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-text-format/-jackson-text-format/#jacksontextformat","text":"[jvm] Content fun JacksonTextFormat (extensions: LinkedHashSet < String >, factoryGenerator: () -> JsonFactory? = null)","title":"JacksonTextFormat"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-text-format/content-type/","text":"// serialization_json / com.hexagonkt.serialization / JacksonTextFormat / contentType contentType \u00b6 [jvm] Content open override val contentType : String","title":"Content type"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-text-format/content-type/#contenttype","text":"[jvm] Content open override val contentType : String","title":"contentType"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-text-format/extensions/","text":"// serialization_json / com.hexagonkt.serialization / JacksonTextFormat / extensions extensions \u00b6 [jvm] Content override val extensions : LinkedHashSet < String >","title":"Extensions"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-text-format/extensions/#extensions","text":"[jvm] Content override val extensions : LinkedHashSet < String >","title":"extensions"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-text-format/is-binary/","text":"// serialization_json / com.hexagonkt.serialization / JacksonTextFormat / isBinary isBinary \u00b6 [jvm] Content open override val isBinary : Boolean = false","title":"Is binary"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-text-format/is-binary/#isbinary","text":"[jvm] Content open override val isBinary : Boolean = false","title":"isBinary"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-text-format/parse-objects/","text":"// serialization_json / com.hexagonkt.serialization / JacksonTextFormat / parseObjects parseObjects \u00b6 [jvm] Content open override fun < T : Any > parseObjects (input: InputStream , type: KClass < T >): List < T >","title":"Parse objects"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-text-format/parse-objects/#parseobjects","text":"[jvm] Content open override fun < T : Any > parseObjects (input: InputStream , type: KClass < T >): List < T >","title":"parseObjects"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-text-format/parse/","text":"// serialization_json / com.hexagonkt.serialization / JacksonTextFormat / parse parse \u00b6 [jvm] Content open override fun < T : Any > parse (input: InputStream , type: KClass < T >): T","title":"Parse"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-text-format/parse/#parse","text":"[jvm] Content open override fun < T : Any > parse (input: InputStream , type: KClass < T >): T","title":"parse"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-text-format/serialize/","text":"// serialization_json / com.hexagonkt.serialization / JacksonTextFormat / serialize serialize \u00b6 [jvm] Content open override fun serialize (obj: Any , output: OutputStream ) open override fun serialize (obj: Any ): String","title":"Serialize"},{"location":"serialization_json/com.hexagonkt.serialization/-jackson-text-format/serialize/#serialize","text":"[jvm] Content open override fun serialize (obj: Any , output: OutputStream ) open override fun serialize (obj: Any ): String","title":"serialize"},{"location":"serialization_json/com.hexagonkt.serialization/-json/","text":"// serialization_json / com.hexagonkt.serialization / Json Json \u00b6 [jvm] object Json : SerializationFormat Functions \u00b6 Name Summary parse [jvm] Content open override fun Any > parse (input: InputStream , type: KClass ): T parseObjects [jvm] Content open override fun Any > parseObjects (input: InputStream , type: KClass ): List serialize [jvm] Content open override fun serialize (obj: Any ): String open override fun serialize (obj: Any , output: OutputStream ) Properties \u00b6 Name Summary contentType [jvm] open override val contentType : String extensions [jvm] open override val extensions : Set < String > isBinary [jvm] open override val isBinary : Boolean","title":"Index"},{"location":"serialization_json/com.hexagonkt.serialization/-json/#json","text":"[jvm] object Json : SerializationFormat","title":"Json"},{"location":"serialization_json/com.hexagonkt.serialization/-json/#functions","text":"Name Summary parse [jvm] Content open override fun Any > parse (input: InputStream , type: KClass ): T parseObjects [jvm] Content open override fun Any > parseObjects (input: InputStream , type: KClass ): List serialize [jvm] Content open override fun serialize (obj: Any ): String open override fun serialize (obj: Any , output: OutputStream )","title":"Functions"},{"location":"serialization_json/com.hexagonkt.serialization/-json/#properties","text":"Name Summary contentType [jvm] open override val contentType : String extensions [jvm] open override val extensions : Set < String > isBinary [jvm] open override val isBinary : Boolean","title":"Properties"},{"location":"serialization_xml/","text":"// serialization_xml serialization_xml \u00b6 Packages \u00b6 Name com.hexagonkt.serialization","title":"Index"},{"location":"serialization_xml/#serialization_xml","text":"","title":"serialization_xml"},{"location":"serialization_xml/#packages","text":"Name com.hexagonkt.serialization","title":"Packages"},{"location":"serialization_xml/com.hexagonkt.serialization/","text":"// serialization_xml / com.hexagonkt.serialization Package com.hexagonkt.serialization \u00b6 Types \u00b6 Name Summary Xml [jvm] Content object Xml : SerializationFormat","title":"Index"},{"location":"serialization_xml/com.hexagonkt.serialization/#package-comhexagonktserialization","text":"","title":"Package com.hexagonkt.serialization"},{"location":"serialization_xml/com.hexagonkt.serialization/#types","text":"Name Summary Xml [jvm] Content object Xml : SerializationFormat","title":"Types"},{"location":"serialization_xml/com.hexagonkt.serialization/-xml/","text":"// serialization_xml / com.hexagonkt.serialization / Xml Xml \u00b6 [jvm] object Xml : SerializationFormat Functions \u00b6 Name Summary parse [jvm] Content open override fun < T : Any > parse (input: InputStream , type: KClass < T >): T parseObjects [jvm] Content open override fun < T : Any > parseObjects (input: InputStream , type: KClass < T >): List < T > serialize [jvm] Content open override fun serialize (obj: Any ): String open override fun serialize (obj: Any , output: OutputStream ) Properties \u00b6 Name Summary contentType [jvm] open override val contentType : String extensions [jvm] open override val extensions : Set < String > isBinary [jvm] open override val isBinary : Boolean = false","title":"Index"},{"location":"serialization_xml/com.hexagonkt.serialization/-xml/#xml","text":"[jvm] object Xml : SerializationFormat","title":"Xml"},{"location":"serialization_xml/com.hexagonkt.serialization/-xml/#functions","text":"Name Summary parse [jvm] Content open override fun < T : Any > parse (input: InputStream , type: KClass < T >): T parseObjects [jvm] Content open override fun < T : Any > parseObjects (input: InputStream , type: KClass < T >): List < T > serialize [jvm] Content open override fun serialize (obj: Any ): String open override fun serialize (obj: Any , output: OutputStream )","title":"Functions"},{"location":"serialization_xml/com.hexagonkt.serialization/-xml/#properties","text":"Name Summary contentType [jvm] open override val contentType : String extensions [jvm] open override val extensions : Set < String > isBinary [jvm] open override val isBinary : Boolean = false","title":"Properties"},{"location":"serialization_xml/com.hexagonkt.serialization/-xml/content-type/","text":"// serialization_xml / com.hexagonkt.serialization / Xml / contentType contentType \u00b6 [jvm] Content open override val contentType : String","title":"Content type"},{"location":"serialization_xml/com.hexagonkt.serialization/-xml/content-type/#contenttype","text":"[jvm] Content open override val contentType : String","title":"contentType"},{"location":"serialization_xml/com.hexagonkt.serialization/-xml/extensions/","text":"// serialization_xml / com.hexagonkt.serialization / Xml / extensions extensions \u00b6 [jvm] Content open override val extensions : Set < String >","title":"Extensions"},{"location":"serialization_xml/com.hexagonkt.serialization/-xml/extensions/#extensions","text":"[jvm] Content open override val extensions : Set < String >","title":"extensions"},{"location":"serialization_xml/com.hexagonkt.serialization/-xml/is-binary/","text":"// serialization_xml / com.hexagonkt.serialization / Xml / isBinary isBinary \u00b6 [jvm] Content open override val isBinary : Boolean = false","title":"Is binary"},{"location":"serialization_xml/com.hexagonkt.serialization/-xml/is-binary/#isbinary","text":"[jvm] Content open override val isBinary : Boolean = false","title":"isBinary"},{"location":"serialization_xml/com.hexagonkt.serialization/-xml/parse-objects/","text":"// serialization_xml / com.hexagonkt.serialization / Xml / parseObjects parseObjects \u00b6 [jvm] Content open override fun < T : Any > parseObjects (input: InputStream , type: KClass < T >): List < T >","title":"Parse objects"},{"location":"serialization_xml/com.hexagonkt.serialization/-xml/parse-objects/#parseobjects","text":"[jvm] Content open override fun < T : Any > parseObjects (input: InputStream , type: KClass < T >): List < T >","title":"parseObjects"},{"location":"serialization_xml/com.hexagonkt.serialization/-xml/parse/","text":"// serialization_xml / com.hexagonkt.serialization / Xml / parse parse \u00b6 [jvm] Content open override fun < T : Any > parse (input: InputStream , type: KClass < T >): T","title":"Parse"},{"location":"serialization_xml/com.hexagonkt.serialization/-xml/parse/#parse","text":"[jvm] Content open override fun < T : Any > parse (input: InputStream , type: KClass < T >): T","title":"parse"},{"location":"serialization_xml/com.hexagonkt.serialization/-xml/serialize/","text":"// serialization_xml / com.hexagonkt.serialization / Xml / serialize serialize \u00b6 [jvm] Content open override fun serialize (obj: Any , output: OutputStream ) open override fun serialize (obj: Any ): String","title":"Serialize"},{"location":"serialization_xml/com.hexagonkt.serialization/-xml/serialize/#serialize","text":"[jvm] Content open override fun serialize (obj: Any , output: OutputStream ) open override fun serialize (obj: Any ): String","title":"serialize"},{"location":"serialization_yaml/","text":"// serialization_yaml serialization_yaml \u00b6 Packages \u00b6 Name com.hexagonkt.serialization","title":"Index"},{"location":"serialization_yaml/#serialization_yaml","text":"","title":"serialization_yaml"},{"location":"serialization_yaml/#packages","text":"Name com.hexagonkt.serialization","title":"Packages"},{"location":"serialization_yaml/com.hexagonkt.serialization/","text":"// serialization_yaml / com.hexagonkt.serialization Package com.hexagonkt.serialization \u00b6 Types \u00b6 Name Summary Yaml [jvm] Content object Yaml : SerializationFormat","title":"Index"},{"location":"serialization_yaml/com.hexagonkt.serialization/#package-comhexagonktserialization","text":"","title":"Package com.hexagonkt.serialization"},{"location":"serialization_yaml/com.hexagonkt.serialization/#types","text":"Name Summary Yaml [jvm] Content object Yaml : SerializationFormat","title":"Types"},{"location":"serialization_yaml/com.hexagonkt.serialization/-yaml/","text":"// serialization_yaml / com.hexagonkt.serialization / Yaml Yaml \u00b6 [jvm] object Yaml : SerializationFormat Functions \u00b6 Name Summary parse [jvm] Content open override fun Any > parse (input: InputStream , type: KClass ): T parseObjects [jvm] Content open override fun Any > parseObjects (input: InputStream , type: KClass ): List serialize [jvm] Content open override fun serialize (obj: Any ): String open override fun serialize (obj: Any , output: OutputStream ) Properties \u00b6 Name Summary contentType [jvm] open override val contentType : String extensions [jvm] open override val extensions : Set < String > isBinary [jvm] open override val isBinary : Boolean","title":"Index"},{"location":"serialization_yaml/com.hexagonkt.serialization/-yaml/#yaml","text":"[jvm] object Yaml : SerializationFormat","title":"Yaml"},{"location":"serialization_yaml/com.hexagonkt.serialization/-yaml/#functions","text":"Name Summary parse [jvm] Content open override fun Any > parse (input: InputStream , type: KClass ): T parseObjects [jvm] Content open override fun Any > parseObjects (input: InputStream , type: KClass ): List serialize [jvm] Content open override fun serialize (obj: Any ): String open override fun serialize (obj: Any , output: OutputStream )","title":"Functions"},{"location":"serialization_yaml/com.hexagonkt.serialization/-yaml/#properties","text":"Name Summary contentType [jvm] open override val contentType : String extensions [jvm] open override val extensions : Set < String > isBinary [jvm] open override val isBinary : Boolean","title":"Properties"},{"location":"store_mongodb/","text":"// store_mongodb store_mongodb \u00b6 [jvm] !!! Warning This module is a preview and its code is still being reviewed and tested. Hexagon's storage utilities for data classes. Install the Dependency \u00b6 build.gradle 1 2 3 4 5 repositories { mavenCentral () } implementation ( \"com.hexagonkt:store_mongodb:$hexagonVersion\" ) pom.xml 1 2 3 4 5 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> store_mongodb </artifactId> <version> $hexagonVersion </version> </dependency> Packages \u00b6 Name com.hexagonkt.store.mongodb","title":"MongoDB (beta)"},{"location":"store_mongodb/#store_mongodb","text":"[jvm] !!! Warning This module is a preview and its code is still being reviewed and tested. Hexagon's storage utilities for data classes.","title":"store_mongodb"},{"location":"store_mongodb/#install-the-dependency","text":"build.gradle 1 2 3 4 5 repositories { mavenCentral () } implementation ( \"com.hexagonkt:store_mongodb:$hexagonVersion\" ) pom.xml 1 2 3 4 5 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> store_mongodb </artifactId> <version> $hexagonVersion </version> </dependency>","title":"Install the Dependency"},{"location":"store_mongodb/#packages","text":"Name com.hexagonkt.store.mongodb","title":"Packages"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/","text":"// store_mongodb / com.hexagonkt.store.mongodb Package com.hexagonkt.store.mongodb \u00b6 [jvm] TODO Types \u00b6 Name Summary MongoDbMapper [jvm] Content open class MongoDbMapper < T : Any , K : Any >( type : KClass < T >, key : KProperty1 < T , K >) : Mapper< T > MongoDbStore [jvm] Content class MongoDbStore < T : Any , K : Any >( type : KClass < T >, key : KProperty1 < T , K >, database : MongoDatabase, name : String , mapper : Mapper< T >) : Store< T , K >","title":"Index"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/#package-comhexagonktstoremongodb","text":"[jvm] TODO","title":"Package com.hexagonkt.store.mongodb"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/#types","text":"Name Summary MongoDbMapper [jvm] Content open class MongoDbMapper < T : Any , K : Any >( type : KClass < T >, key : KProperty1 < T , K >) : Mapper< T > MongoDbStore [jvm] Content class MongoDbStore < T : Any , K : Any >( type : KClass < T >, key : KProperty1 < T , K >, database : MongoDatabase, name : String , mapper : Mapper< T >) : Store< T , K >","title":"Types"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbMapper MongoDbMapper \u00b6 [jvm] open class MongoDbMapper < T : Any , K : Any >( type : KClass < T >, key : KProperty1 < T , K >) : Mapper< T > Functions \u00b6 Name Summary fromStore [jvm] Content open override fun fromStore (map: Map < String , Any >): T open override fun fromStore (property: String , value: Any ): Any toStore [jvm] Content open override fun toStore (instance: T ): Map < String , Any > open override fun toStore (property: String , value: Any ): Any Properties \u00b6 Name Summary fields [jvm] open override val fields : Map < String , KProperty1 < T , *>>","title":"Index"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/#mongodbmapper","text":"[jvm] open class MongoDbMapper < T : Any , K : Any >( type : KClass < T >, key : KProperty1 < T , K >) : Mapper< T >","title":"MongoDbMapper"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/#functions","text":"Name Summary fromStore [jvm] Content open override fun fromStore (map: Map < String , Any >): T open override fun fromStore (property: String , value: Any ): Any toStore [jvm] Content open override fun toStore (instance: T ): Map < String , Any > open override fun toStore (property: String , value: Any ): Any","title":"Functions"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/#properties","text":"Name Summary fields [jvm] open override val fields : Map < String , KProperty1 < T , *>>","title":"Properties"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/-mongo-db-mapper/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbMapper / MongoDbMapper MongoDbMapper \u00b6 [jvm] Content fun < T : Any , K : Any > MongoDbMapper (type: KClass < T >, key: KProperty1 < T , K >)","title":" mongo db mapper"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/-mongo-db-mapper/#mongodbmapper","text":"[jvm] Content fun < T : Any , K : Any > MongoDbMapper (type: KClass < T >, key: KProperty1 < T , K >)","title":"MongoDbMapper"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/fields/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbMapper / fields fields \u00b6 [jvm] Content open override val fields : Map < String , KProperty1 < T , *>>","title":"Fields"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/fields/#fields","text":"[jvm] Content open override val fields : Map < String , KProperty1 < T , *>>","title":"fields"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/from-store/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbMapper / fromStore fromStore \u00b6 [jvm] Content open override fun fromStore (map: Map < String , Any >): T open override fun fromStore (property: String , value: Any ): Any","title":"From store"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/from-store/#fromstore","text":"[jvm] Content open override fun fromStore (map: Map < String , Any >): T open override fun fromStore (property: String , value: Any ): Any","title":"fromStore"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/to-store/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbMapper / toStore toStore \u00b6 [jvm] Content open override fun toStore (instance: T ): Map < String , Any > open override fun toStore (property: String , value: Any ): Any","title":"To store"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-mapper/to-store/#tostore","text":"[jvm] Content open override fun toStore (instance: T ): Map < String , Any > open override fun toStore (property: String , value: Any ): Any","title":"toStore"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore MongoDbStore \u00b6 [jvm] class MongoDbStore < T : Any , K : Any >( type : KClass < T >, key : KProperty1 < T , K >, database : MongoDatabase, name : String , mapper : Mapper< T >) : Store< T , K > Constructors \u00b6 MongoDbStore [jvm] fun < T : Any , K : Any > MongoDbStore (type: KClass < T >, key: KProperty1 < T , K >, url: String , name: String = type.java.simpleName) Types \u00b6 Name Summary Companion [jvm] Content object Companion Functions \u00b6 Name Summary count [jvm] Content open override fun count (filter: Map < String , *>): Long createIndex [jvm] Content open override fun createIndex (unique: Boolean , fields: Map < String , IndexOrder>): String open fun createIndex (unique: Boolean , vararg fields: Pair < KProperty1 < T , >, IndexOrder>): String open fun createIndex (unique: Boolean , vararg fields: KProperty1 < T , >): String deleteMany [jvm] Content open override fun deleteMany (filter: Map < String , *>): Long deleteOne [jvm] Content open override fun deleteOne (id: K ): Boolean drop [jvm] Content open override fun drop () fields [jvm] Content open fun fields (vararg updates: Pair < KProperty1 < T , >, >): Map < String , > open fun fields (updates: Map < KProperty1 < T , >, >): Map < String , > findAll [jvm] Content open fun findAll (limit: Int ?, skip: Int ?, sort: Map < String , Boolean >): List < T > open fun findAll (fields: List < String >, limit: Int ?, skip: Int ?, sort: Map < String , Boolean >): List < Map < String , *>> findMany [jvm] Content open override fun findMany (filter: Map < String , >, limit: Int ?, skip: Int ?, sort: Map < String , Boolean >): List < T > open override fun findMany (filter: Map < String , >, fields: List < String >, limit: Int ?, skip: Int ?, sort: Map < String , Boolean >): List < Map < String , *>> findOne [jvm] Content open override fun findOne (key: K ): T ? open fun findOne (filter: Map < String , >): T ? open override fun findOne (key: K , fields: List < String >): Map < String , >? open fun findOne (filter: Map < String , >, fields: List < String >): Map < String , >? import [jvm] Content open fun import (input: File ) open fun import (input: URL ) insertMany [jvm] Content open override fun insertMany (instances: List < T >): List < K > open fun insertMany (vararg instances: T ): List < K > insertOne [jvm] Content open override fun insertOne (instance: T ): K replaceMany [jvm] Content open override fun replaceMany (instances: List < T >): List < T > open fun replaceMany (vararg instances: T ): List < T > replaceOne [jvm] Content open override fun replaceOne (instance: T ): Boolean saveMany [jvm] Content open override fun saveMany (instances: List < T >): List < K ?> saveOne [jvm] Content open override fun saveOne (instance: T ): K ? updateMany [jvm] Content open override fun updateMany (filter: Map < String , >, updates: Map < String , >): Long updateOne [jvm] Content open override fun updateOne (key: K , updates: Map < String , >): Boolean open fun updateOne (key: K , vararg updates: Pair < KProperty1 < T , >, *>): Boolean Properties \u00b6 Name Summary collection [jvm] val collection : MongoCollection key [jvm] open override val key : KProperty1 < T , K > mapper [jvm] open override val mapper : Mapper< T > name [jvm] open override val name : String type [jvm] open override val type : KClass < T >","title":"Index"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/#mongodbstore","text":"[jvm] class MongoDbStore < T : Any , K : Any >( type : KClass < T >, key : KProperty1 < T , K >, database : MongoDatabase, name : String , mapper : Mapper< T >) : Store< T , K >","title":"MongoDbStore"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/#constructors","text":"MongoDbStore [jvm] fun < T : Any , K : Any > MongoDbStore (type: KClass < T >, key: KProperty1 < T , K >, url: String , name: String = type.java.simpleName)","title":"Constructors"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/#types","text":"Name Summary Companion [jvm] Content object Companion","title":"Types"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/#functions","text":"Name Summary count [jvm] Content open override fun count (filter: Map < String , *>): Long createIndex [jvm] Content open override fun createIndex (unique: Boolean , fields: Map < String , IndexOrder>): String open fun createIndex (unique: Boolean , vararg fields: Pair < KProperty1 < T , >, IndexOrder>): String open fun createIndex (unique: Boolean , vararg fields: KProperty1 < T , >): String deleteMany [jvm] Content open override fun deleteMany (filter: Map < String , *>): Long deleteOne [jvm] Content open override fun deleteOne (id: K ): Boolean drop [jvm] Content open override fun drop () fields [jvm] Content open fun fields (vararg updates: Pair < KProperty1 < T , >, >): Map < String , > open fun fields (updates: Map < KProperty1 < T , >, >): Map < String , > findAll [jvm] Content open fun findAll (limit: Int ?, skip: Int ?, sort: Map < String , Boolean >): List < T > open fun findAll (fields: List < String >, limit: Int ?, skip: Int ?, sort: Map < String , Boolean >): List < Map < String , *>> findMany [jvm] Content open override fun findMany (filter: Map < String , >, limit: Int ?, skip: Int ?, sort: Map < String , Boolean >): List < T > open override fun findMany (filter: Map < String , >, fields: List < String >, limit: Int ?, skip: Int ?, sort: Map < String , Boolean >): List < Map < String , *>> findOne [jvm] Content open override fun findOne (key: K ): T ? open fun findOne (filter: Map < String , >): T ? open override fun findOne (key: K , fields: List < String >): Map < String , >? open fun findOne (filter: Map < String , >, fields: List < String >): Map < String , >? import [jvm] Content open fun import (input: File ) open fun import (input: URL ) insertMany [jvm] Content open override fun insertMany (instances: List < T >): List < K > open fun insertMany (vararg instances: T ): List < K > insertOne [jvm] Content open override fun insertOne (instance: T ): K replaceMany [jvm] Content open override fun replaceMany (instances: List < T >): List < T > open fun replaceMany (vararg instances: T ): List < T > replaceOne [jvm] Content open override fun replaceOne (instance: T ): Boolean saveMany [jvm] Content open override fun saveMany (instances: List < T >): List < K ?> saveOne [jvm] Content open override fun saveOne (instance: T ): K ? updateMany [jvm] Content open override fun updateMany (filter: Map < String , >, updates: Map < String , >): Long updateOne [jvm] Content open override fun updateOne (key: K , updates: Map < String , >): Boolean open fun updateOne (key: K , vararg updates: Pair < KProperty1 < T , >, *>): Boolean","title":"Functions"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/#properties","text":"Name Summary collection [jvm] val collection : MongoCollection key [jvm] open override val key : KProperty1 < T , K > mapper [jvm] open override val mapper : Mapper< T > name [jvm] open override val name : String type [jvm] open override val type : KClass < T >","title":"Properties"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/-mongo-db-store/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore / MongoDbStore MongoDbStore \u00b6 [jvm] Content fun < T : Any , K : Any > MongoDbStore (type: KClass < T >, key: KProperty1 < T , K >, url: String , name: String = type.java.simpleName) fun < T : Any , K : Any > MongoDbStore (type: KClass < T >, key: KProperty1 < T , K >, database: MongoDatabase, name: String = type.java.simpleName, mapper: Mapper< T > = MongoDbMapper(type, key))","title":" mongo db store"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/-mongo-db-store/#mongodbstore","text":"[jvm] Content fun < T : Any , K : Any > MongoDbStore (type: KClass < T >, key: KProperty1 < T , K >, url: String , name: String = type.java.simpleName) fun < T : Any , K : Any > MongoDbStore (type: KClass < T >, key: KProperty1 < T , K >, database: MongoDatabase, name: String = type.java.simpleName, mapper: Mapper< T > = MongoDbMapper(type, key))","title":"MongoDbStore"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/collection/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore / collection collection \u00b6 [jvm] Content val collection : MongoCollection","title":"Collection"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/collection/#collection","text":"[jvm] Content val collection : MongoCollection","title":"collection"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/count/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore / count count \u00b6 [jvm] Content open override fun count (filter: Map < String , *>): Long","title":"Count"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/count/#count","text":"[jvm] Content open override fun count (filter: Map < String , *>): Long","title":"count"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/create-index/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore / createIndex createIndex \u00b6 [jvm] Content open override fun createIndex (unique: Boolean , fields: Map < String , IndexOrder>): String","title":"Create index"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/create-index/#createindex","text":"[jvm] Content open override fun createIndex (unique: Boolean , fields: Map < String , IndexOrder>): String","title":"createIndex"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/delete-many/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore / deleteMany deleteMany \u00b6 [jvm] Content open override fun deleteMany (filter: Map < String , *>): Long","title":"Delete many"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/delete-many/#deletemany","text":"[jvm] Content open override fun deleteMany (filter: Map < String , *>): Long","title":"deleteMany"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/delete-one/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore / deleteOne deleteOne \u00b6 [jvm] Content open override fun deleteOne (id: K ): Boolean","title":"Delete one"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/delete-one/#deleteone","text":"[jvm] Content open override fun deleteOne (id: K ): Boolean","title":"deleteOne"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/drop/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore / drop drop \u00b6 [jvm] Content open override fun drop ()","title":"Drop"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/drop/#drop","text":"[jvm] Content open override fun drop ()","title":"drop"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/find-many/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore / findMany findMany \u00b6 [jvm] Content open override fun findMany (filter: Map < String , >, limit: Int ?, skip: Int ?, sort: Map < String , Boolean >): List < T > open override fun findMany (filter: Map < String , >, fields: List < String >, limit: Int ?, skip: Int ?, sort: Map < String , Boolean >): List < Map < String , *>>","title":"Find many"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/find-many/#findmany","text":"[jvm] Content open override fun findMany (filter: Map < String , >, limit: Int ?, skip: Int ?, sort: Map < String , Boolean >): List < T > open override fun findMany (filter: Map < String , >, fields: List < String >, limit: Int ?, skip: Int ?, sort: Map < String , Boolean >): List < Map < String , *>>","title":"findMany"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/find-one/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore / findOne findOne \u00b6 [jvm] Content open override fun findOne (key: K ): T ? open override fun findOne (key: K , fields: List < String >): Map < String , *>?","title":"Find one"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/find-one/#findone","text":"[jvm] Content open override fun findOne (key: K ): T ? open override fun findOne (key: K , fields: List < String >): Map < String , *>?","title":"findOne"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/insert-many/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore / insertMany insertMany \u00b6 [jvm] Content open override fun insertMany (instances: List < T >): List < K >","title":"Insert many"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/insert-many/#insertmany","text":"[jvm] Content open override fun insertMany (instances: List < T >): List < K >","title":"insertMany"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/insert-one/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore / insertOne insertOne \u00b6 [jvm] Content open override fun insertOne (instance: T ): K","title":"Insert one"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/insert-one/#insertone","text":"[jvm] Content open override fun insertOne (instance: T ): K","title":"insertOne"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/key/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore / key key \u00b6 [jvm] Content open override val key : KProperty1 < T , K >","title":"Key"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/key/#key","text":"[jvm] Content open override val key : KProperty1 < T , K >","title":"key"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/mapper/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore / mapper mapper \u00b6 [jvm] Content open override val mapper : Mapper< T >","title":"Mapper"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/mapper/#mapper","text":"[jvm] Content open override val mapper : Mapper< T >","title":"mapper"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/name/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore / name name \u00b6 [jvm] Content open override val name : String","title":"Name"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/name/#name","text":"[jvm] Content open override val name : String","title":"name"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/replace-many/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore / replaceMany replaceMany \u00b6 [jvm] Content open override fun replaceMany (instances: List < T >): List < T >","title":"Replace many"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/replace-many/#replacemany","text":"[jvm] Content open override fun replaceMany (instances: List < T >): List < T >","title":"replaceMany"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/replace-one/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore / replaceOne replaceOne \u00b6 [jvm] Content open override fun replaceOne (instance: T ): Boolean","title":"Replace one"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/replace-one/#replaceone","text":"[jvm] Content open override fun replaceOne (instance: T ): Boolean","title":"replaceOne"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/save-many/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore / saveMany saveMany \u00b6 [jvm] Content open override fun saveMany (instances: List < T >): List < K ?>","title":"Save many"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/save-many/#savemany","text":"[jvm] Content open override fun saveMany (instances: List < T >): List < K ?>","title":"saveMany"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/save-one/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore / saveOne saveOne \u00b6 [jvm] Content open override fun saveOne (instance: T ): K ?","title":"Save one"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/save-one/#saveone","text":"[jvm] Content open override fun saveOne (instance: T ): K ?","title":"saveOne"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/type/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore / type type \u00b6 [jvm] Content open override val type : KClass < T >","title":"Type"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/type/#type","text":"[jvm] Content open override val type : KClass < T >","title":"type"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/update-many/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore / updateMany updateMany \u00b6 [jvm] Content open override fun updateMany (filter: Map < String , >, updates: Map < String , >): Long","title":"Update many"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/update-many/#updatemany","text":"[jvm] Content open override fun updateMany (filter: Map < String , >, updates: Map < String , >): Long","title":"updateMany"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/update-one/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore / updateOne updateOne \u00b6 [jvm] Content open override fun updateOne (key: K , updates: Map < String , *>): Boolean","title":"Update one"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/update-one/#updateone","text":"[jvm] Content open override fun updateOne (key: K , updates: Map < String , *>): Boolean","title":"updateOne"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/-companion/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore / Companion Companion \u00b6 [jvm] object Companion Functions \u00b6 Name Summary database [jvm] Content fun database (url: String ): MongoDatabase","title":"Index"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/-companion/#companion","text":"[jvm] object Companion","title":"Companion"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/-companion/#functions","text":"Name Summary database [jvm] Content fun database (url: String ): MongoDatabase","title":"Functions"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/-companion/database/","text":"// store_mongodb / com.hexagonkt.store.mongodb / MongoDbStore / Companion / database database \u00b6 [jvm] Content fun database (url: String ): MongoDatabase","title":"Database"},{"location":"store_mongodb/com.hexagonkt.store.mongodb/-mongo-db-store/-companion/database/#database","text":"[jvm] Content fun database (url: String ): MongoDatabase","title":"database"},{"location":"templates_freemarker/","text":"// templates_freemarker templates_freemarker \u00b6 [jvm] This module provides an adapter for the templates Port supporting the Apache FreeMarker template engine. Install the Dependency \u00b6 build.gradle 1 2 3 4 5 repositories { mavenCentral () } implementation ( \"com.hexagonkt:templates_freemarker:$hexagonVersion\" ) pom.xml 1 2 3 4 5 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> templates_freemarker </artifactId> <version> $hexagonVersion </version> </dependency> How to Use \u00b6 val contextVariables = hashMapOf( \"contextVariableKey\" to contextVariableValue ) val renderedPage = FreeMarkerAdapter.render( \"templates/page.html\", Locale.getDefault(), contextVariables ) If you have no context variables, you can simply pass an empty map: val renderedPage = FreeMarkerAdapter.render( \"templates/page.html\", Locale.getDefault(), hashMapOf () ) Packages \u00b6 Name com.hexagonkt.templates.freemarker","title":"FreeMarker"},{"location":"templates_freemarker/#templates_freemarker","text":"[jvm] This module provides an adapter for the templates Port supporting the Apache FreeMarker template engine.","title":"templates_freemarker"},{"location":"templates_freemarker/#install-the-dependency","text":"build.gradle 1 2 3 4 5 repositories { mavenCentral () } implementation ( \"com.hexagonkt:templates_freemarker:$hexagonVersion\" ) pom.xml 1 2 3 4 5 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> templates_freemarker </artifactId> <version> $hexagonVersion </version> </dependency>","title":"Install the Dependency"},{"location":"templates_freemarker/#how-to-use","text":"val contextVariables = hashMapOf( \"contextVariableKey\" to contextVariableValue ) val renderedPage = FreeMarkerAdapter.render( \"templates/page.html\", Locale.getDefault(), contextVariables ) If you have no context variables, you can simply pass an empty map: val renderedPage = FreeMarkerAdapter.render( \"templates/page.html\", Locale.getDefault(), hashMapOf () )","title":"How to Use"},{"location":"templates_freemarker/#packages","text":"Name com.hexagonkt.templates.freemarker","title":"Packages"},{"location":"templates_freemarker/com.hexagonkt.templates.freemarker/","text":"// templates_freemarker / com.hexagonkt.templates.freemarker Package com.hexagonkt.templates.freemarker \u00b6 [jvm] Classes defined in this package implement the Templates Port interface with the FreeMarker implementation. Types \u00b6 Name Summary FreeMarkerAdapter [jvm] Content object FreeMarkerAdapter : TemplatePort","title":"Index"},{"location":"templates_freemarker/com.hexagonkt.templates.freemarker/#package-comhexagonkttemplatesfreemarker","text":"[jvm] Classes defined in this package implement the Templates Port interface with the FreeMarker implementation.","title":"Package com.hexagonkt.templates.freemarker"},{"location":"templates_freemarker/com.hexagonkt.templates.freemarker/#types","text":"Name Summary FreeMarkerAdapter [jvm] Content object FreeMarkerAdapter : TemplatePort","title":"Types"},{"location":"templates_freemarker/com.hexagonkt.templates.freemarker/-free-marker-adapter/","text":"// templates_freemarker / com.hexagonkt.templates.freemarker / FreeMarkerAdapter FreeMarkerAdapter \u00b6 [jvm] object FreeMarkerAdapter : TemplatePort Functions \u00b6 Name Summary render [jvm] Content open fun render (resource: String , locale: Locale , vararg context: Pair < String , >): String open fun render (resource: String , locale: Locale , context: Map < String , >): String open override fun render (resource: String , locale: Locale , context: Map < String , *>, settings: TemplateEngineSettings): String","title":"Index"},{"location":"templates_freemarker/com.hexagonkt.templates.freemarker/-free-marker-adapter/#freemarkeradapter","text":"[jvm] object FreeMarkerAdapter : TemplatePort","title":"FreeMarkerAdapter"},{"location":"templates_freemarker/com.hexagonkt.templates.freemarker/-free-marker-adapter/#functions","text":"Name Summary render [jvm] Content open fun render (resource: String , locale: Locale , vararg context: Pair < String , >): String open fun render (resource: String , locale: Locale , context: Map < String , >): String open override fun render (resource: String , locale: Locale , context: Map < String , *>, settings: TemplateEngineSettings): String","title":"Functions"},{"location":"templates_freemarker/com.hexagonkt.templates.freemarker/-free-marker-adapter/render/","text":"// templates_freemarker / com.hexagonkt.templates.freemarker / FreeMarkerAdapter / render render \u00b6 [jvm] Content open override fun render (resource: String , locale: Locale , context: Map < String , *>, settings: TemplateEngineSettings): String","title":"Render"},{"location":"templates_freemarker/com.hexagonkt.templates.freemarker/-free-marker-adapter/render/#render","text":"[jvm] Content open override fun render (resource: String , locale: Locale , context: Map < String , *>, settings: TemplateEngineSettings): String","title":"render"},{"location":"templates_pebble/","text":"// templates_pebble templates_pebble \u00b6 [jvm] Pebble template engine adapter for Hexagon. Install the Dependency \u00b6 build.gradle 1 2 3 4 5 repositories { mavenCentral () } implementation ( \"com.hexagonkt:templates_pebble:$hexagonVersion\" ) pom.xml 1 2 3 4 5 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> templates_pebble </artifactId> <version> $hexagonVersion </version> </dependency> Packages \u00b6 Name com.hexagonkt.templates.pebble","title":"Pebble"},{"location":"templates_pebble/#templates_pebble","text":"[jvm] Pebble template engine adapter for Hexagon.","title":"templates_pebble"},{"location":"templates_pebble/#install-the-dependency","text":"build.gradle 1 2 3 4 5 repositories { mavenCentral () } implementation ( \"com.hexagonkt:templates_pebble:$hexagonVersion\" ) pom.xml 1 2 3 4 5 <dependency> <groupId> com.hexagonkt </groupId> <artifactId> templates_pebble </artifactId> <version> $hexagonVersion </version> </dependency>","title":"Install the Dependency"},{"location":"templates_pebble/#packages","text":"Name com.hexagonkt.templates.pebble","title":"Packages"},{"location":"templates_pebble/com.hexagonkt.templates.pebble/","text":"// templates_pebble / com.hexagonkt.templates.pebble Package com.hexagonkt.templates.pebble \u00b6 [jvm] TODO Types \u00b6 Name Summary PebbleAdapter [jvm] Content object PebbleAdapter : TemplatePort","title":"Index"},{"location":"templates_pebble/com.hexagonkt.templates.pebble/#package-comhexagonkttemplatespebble","text":"[jvm] TODO","title":"Package com.hexagonkt.templates.pebble"},{"location":"templates_pebble/com.hexagonkt.templates.pebble/#types","text":"Name Summary PebbleAdapter [jvm] Content object PebbleAdapter : TemplatePort","title":"Types"},{"location":"templates_pebble/com.hexagonkt.templates.pebble/-pebble-adapter/","text":"// templates_pebble / com.hexagonkt.templates.pebble / PebbleAdapter PebbleAdapter \u00b6 [jvm] object PebbleAdapter : TemplatePort Functions \u00b6 Name Summary render [jvm] Content open fun render (resource: String , locale: Locale , vararg context: Pair < String , >): String open fun render (resource: String , locale: Locale , context: Map < String , >): String open override fun render (resource: String , locale: Locale , context: Map < String , *>, settings: TemplateEngineSettings): String","title":"Index"},{"location":"templates_pebble/com.hexagonkt.templates.pebble/-pebble-adapter/#pebbleadapter","text":"[jvm] object PebbleAdapter : TemplatePort","title":"PebbleAdapter"},{"location":"templates_pebble/com.hexagonkt.templates.pebble/-pebble-adapter/#functions","text":"Name Summary render [jvm] Content open fun render (resource: String , locale: Locale , vararg context: Pair < String , >): String open fun render (resource: String , locale: Locale , context: Map < String , >): String open override fun render (resource: String , locale: Locale , context: Map < String , *>, settings: TemplateEngineSettings): String","title":"Functions"},{"location":"templates_pebble/com.hexagonkt.templates.pebble/-pebble-adapter/render/","text":"// templates_pebble / com.hexagonkt.templates.pebble / PebbleAdapter / render render \u00b6 [jvm] Content open override fun render (resource: String , locale: Locale , context: Map < String , *>, settings: TemplateEngineSettings): String","title":"Render"},{"location":"templates_pebble/com.hexagonkt.templates.pebble/-pebble-adapter/render/#render","text":"[jvm] Content open override fun render (resource: String , locale: Locale , context: Map < String , *>, settings: TemplateEngineSettings): String","title":"render"}]}