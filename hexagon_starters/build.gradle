import org.w3c.dom.Document

import javax.xml.parsers.DocumentBuilderFactory

apply(from: "../gradle/kotlin.gradle")
apply(from: "../gradle/junit.gradle")
//apply(from: "../gradle/bintray.gradle")

apply(plugin: "maven-publish")

dependencies {
    implementation(project(":http_server_jetty"))
    implementation(project(":http_client_ahc"))
}

task("processTemplate", dependsOn: "test") {

    final Map<String, ?> stringProperties = project.getProperties()
        .findAll { it.value instanceof String }

    projectDir
        .listFiles({ File f -> f.isDirectory() && f.name.startsWith("hexagon_") } as FileFilter)
        .collect { it.name }
        .forEach { dir ->
            copy {
                from("$projectDir/$dir".toString())
                into("$buildDir/$dir".toString())
                filter {
                    String content = it

                    stringProperties.entrySet().forEach { entry ->
                        final String entryValue = entry.value.toString()
                        content = content.replace("\${project.${entry.key}}".toString(), entryValue)
                    }

                    content
                }
            }

            copy {
                from("$projectDir/src".toString())
                into("$buildDir/$dir/src".toString())
            }

            copy {
                from("$rootDir/gradle/wrapper".toString())
                into("$buildDir/$dir/gradle/wrapper".toString())
            }

            copy {
                from(rootDir.toString())
                into("$buildDir/$dir".toString())
                include("gradlew", "gradlew.bat", ".editorconfig")
            }

            file("$buildDir/$dir/gradle.properties".toString()).text = """
                name=\${projectName}
                version=\${version}
                group=\${group}
                description=\${description}

                gradleScripts=https://raw.githubusercontent.com/hexagonkt/hexagon/$rootProject.version/gradle

                hexagonVersion=$rootProject.version
                logbackVersion=$logbackVersion

                junitVersion=$junitVersion
            """.stripIndent()
        }
}

publishing {
    publications {
        kotlinPom(MavenPublication) {
            def pomFile = project.file("kotlin_pom/pom.xml")
            def pomDom = new XmlParser().parse(pomFile)
            final Document domDom =
                DocumentBuilderFactory.newDefaultInstance().newDocumentBuilder().parse(pomFile)

            artifactId = pomDom.artifactId.text()

            pom {
                packaging = pomDom.packaging.text()
                description = pomDom.description.text()

                withXml {
                    def node = asNode()
//                    println(domDom.getElementsByTagName("properties").item(0))
//                    node.appendNode(domDom.getElementsByTagName("properties").item(0))
//                    node.appendNode(prop)
//                    println(pomDom.properties.getClass())
//                    println(pomDom.properties.size())
//                    pomDom.properties.forEach { println(it) }
//                    node.appendNode(pomDom.properties.get(0))
//                    node.appendNode(pomDom.repositories.get(0))
//                    node.appendNode(pomDom.build.get(0))
                }
            }
        }
    }
}
