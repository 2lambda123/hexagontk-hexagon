
apply(plugin: "org.graalvm.buildtools.native")

graalvmNative {
    agent {
        final String codeFilterFile = findProperty("codeFilterFile")
        defaultMode = codeFilterFile == null? "standard" : "conditional"

        metadataCopy {
            inputTaskNames.add("test")
            final String buildPath = project.buildDir.absolutePath
            outputDirectories.add("$buildPath/resources/main/META-INF/native-image")
        }

        modes {
            conditional {
                if (codeFilterFile != null)
                    userCodeFilterPath.set(rootProject.file(codeFilterFile).absolutePath)
            }
        }
    }

    metadataRepository {
        enabled.set(true)
    }
}

tasks.register("upx", Exec) {
    group = "distribution"
    description = "Compress the native executable using 'upx'."
    dependsOn("nativeCompile")

    final String source = "$buildDir/native/nativeCompile/${project.name}"
    final String target = "$buildDir/native/${project.name}"
    final String os = System.getProperty("os.name").toLowerCase()
    final String command =
        os.contains("windows")? "upx ${source}.exe -o ${target}.exe" : "upx $source -o $target"
    commandLine(command.split(" "))

    doFirst {
        file(target).delete()
    }
}

tasks.register("zipNative", Zip) {
    group = "distribution"
    description = "Compress native executable in a ZIP file."
    dependsOn("upx")

    final String os = System.getProperty("os.name").toLowerCase()
    final String arch = System.getProperty("os.arch").toLowerCase()
    final String source = os.contains("windows")? "${project.name}.exe" : project.name
    from("$buildDir/native")
    include(source)
    archiveFileName.set("${project.name}-${project.version}-${os}-${arch}.zip")
    destinationDirectory.set(buildDir.toPath().resolve("distributions").toFile())
}
