/*
 * Check usage information at: http://hexagonkt.com/gradle/#bintray
 */

apply(plugin: "java")
apply(plugin: "signing")
apply(plugin: "maven-publish")
apply(plugin: "com.jfrog.bintray")

//signing {
//    sign configurations.archives
//}
//
//uploadArchives {
//    repositories {
//        mavenDeployer {
//            beforeDeployment { signing.signPom(it) }
//
//            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
//                authentication(userName: ossrhUsername, password: ossrhPassword)
//            }
//
//            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
//                authentication(userName: ossrhUsername, password: ossrhPassword)
//            }
//
//            pom.project {
//                url("https://hexagonkt.com")
//
//                scm {
//                    connection 'scm:svn:http://foo.googlecode.com/svn/trunk/'
//                    developerConnection 'scm:svn:https://foo.googlecode.com/svn/trunk/'
//                    url 'http://foo.googlecode.com/svn/trunk/'
//                }
//
//                licenses {
//                    license {
//                        name 'The Apache License, Version 2.0'
//                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                    }
//                }
//
//                developers {
//                    developer {
//                        id 'manfred'
//                        name 'Manfred Moser'
//                        email 'manfred@sonatype.com'
//                    }
//                }
//            }
//        }
//    }
//}

bintray {
    key = findProperty("bintrayKey") ?: System.getenv("BINTRAY_KEY")
    user = findProperty("bintrayUser") ?: System.getenv("BINTRAY_USER")
    publications = findProperty("bintrayPublications") ?: [ "mavenJava" ]
    dryRun = findProperty("bintrayDryRun") ?: false
    publish = true

    pkg {
        repo = project.findProperty("bintrayRepo")
        userOrg = project.findProperty("bintrayOrganization")
        name = project.name
        licenses = project.findProperty("licenses").toString().split(",").collect { it.trim() }
        vcsUrl = project.findProperty("vcsUrl")
    }
}

bintrayUpload.dependsOn("build")
