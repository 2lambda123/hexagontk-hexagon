
name: Site

on:
  workflow_call:
    inputs:
      ref:
        type: string
        description: Branch to check out.
        default: ''

      java:
        type: string
        description: Java version used to run Gradle.
        default: "17"

      java_distribution:
        type: string
        description: Java distribution used to run Gradle.
        default: temurin

      check_directory:
        type: string
        description: Directory to check for build execution.
        default: site/build/site

jobs:
  site:
    name: Build Site
    runs-on: ubuntu-latest
    defaults:
      run: { shell: bash }
    steps:
      - name: Restore MkDocs Cache
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-mkdocs-${{ hashFiles('**/*.gradle*', '**/gradle*.properties') }}
          restore-keys: ${{ runner.os }}-mkdocs-
          path: |
            ~/.local/bin
            ~/.local/lib/python*/site-packages

      - name: Restore ImageMagick Cache
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-imagemagick-${{ hashFiles('assets/*.gradle*') }}
          restore-keys: ${{ runner.os }}-imagemagick-
          path: ~/.local/bin/magick

      - name: Install ImageMagick
        run: |
          sudo apt-get install fuse
          sudo apt-get install librsvg2-bin
          mkdir -p ~/.local/bin
          export MAGICK="https://download.imagemagick.org/ImageMagick/download/binaries/magick"
          [[ ! -f ~/.local/bin/magick ]] && sudo curl "$MAGICK" -Lo ~/.local/bin/magick
          sudo chmod +x ~/.local/bin/magick
          magick --version

      - name: Check Out
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      - name: Set Up Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.java }}
          distribution: ${{ inputs.java_distribution }}
          cache: gradle

      - name: Build Project
        run: ./gradlew build

      - name: Diagnose Build
        if: failure()
        run: ./gradlew --info --stacktrace build

      - name: Build Site
        run: ./gradlew -x build buildSite

      - name: Diagnose Site
        if: failure()
        run: ./gradlew --info --stacktrace -x build buildSite

      - name: Check Build
        if: ${{ inputs.check_directory != '' }}
        run: ls -AlF "${{ inputs.check_directory }}"
